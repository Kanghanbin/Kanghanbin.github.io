<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>第一个Flutter应用之Helloworld</title>
      <link href="/2019/06/17/%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8%E4%B9%8BHelloworld/"/>
      <url>/2019/06/17/%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8%E4%B9%8BHelloworld/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。1.0版本于2018年12月5日(北京时间)发布。</p><p><img src="https://Kanghanbin.github.io/2019/06/17/第一个Flutter应用之Helloworld/0.jpg" alt=""></p><h2 id="安装环境和配置"><a href="#安装环境和配置" class="headerlink" title="安装环境和配置"></a>安装环境和配置</h2><h3 id="1-获取-Flutter-SDK"><a href="#1-获取-Flutter-SDK" class="headerlink" title="1.获取 Flutter SDK"></a>1.获取 Flutter SDK</h3><ol><li><p>下载下面的安装包以获取最新版本 stable 的 Flutter SDK</p><p><a href="https://storage.flutter-io.cn/flutter_infra/releases/stable/windows/flutter_windows_v1.5.4-hotfix.2-stable.zip" target="_blank" rel="noopener">flutter_windows_v1.5.4-hotfix.2-stable.zip</a></p><p>要查看其他发行通道和以往的版本，请参阅<a href="https://flutter-io.cn/docs/development/tools/sdk/archive" target="_blank" rel="noopener">SDK 归档</a>页面。</p></li><li><p>将压缩包解压，然后把其中的 <code>flutter</code> 目录整个放在你预想的 Flutter SDK 安装目录中（比如 <code>C:\src\flutter</code>；请勿将该目录放在一些需要额外操作权限的目录，比如 <code>C:\Program Files\</code>）。</p></li><li><p>找到 <code>flutter</code> 目录中的 `flutter_console.bat’ 文件，双击执行该批处理脚本。</p></li></ol><p>好的，现在你可以在控制台当中使用 Flutter 的命令了。</p><h3 id="2-更新-path-环境变量"><a href="#2-更新-path-环境变量" class="headerlink" title="2.更新 path 环境变量"></a>2.更新 path 环境变量</h3><p>如果你想要在普通的 Windows 控制台中使用 Flutter 命令，那就需要按照下面的步骤来将 Flutter 的二进制文件路径加入到 <code>PATH</code>环境变量。</p><ul><li>在开始菜单的搜索功能键入“env”，然后选择<strong>编辑当前用户的环境变量</strong></li><li>在 <strong>User variables</strong> 一栏中，检查是否有 <strong>Path</strong> 这个条目：<ul><li>如果存在，直接把 <code>flutter\bin</code> 目录的完整路径以 <code>;</code> 作为分隔加到已有的值后面。</li><li>如果不存在的话，在用户环境变量中创建一个新的 <code>Path</code> 变量，然后将 <code>flutter\bin</code> 所在的完整路径作为新变量的值。</li></ul></li></ul><p>注意，你需要关闭和重新启动已经打开的各个控制台窗口，这样下次启动控制台时才能访问到刚才修改的变量。</p><h3 id="3-运行-flutter-doctor"><a href="#3-运行-flutter-doctor" class="headerlink" title="3.运行 flutter doctor"></a>3.运行 <code>flutter doctor</code></h3><p>在将 <code>Path</code> 变量更新后，打开一个新的控制台窗口，然后将下面的命令输入进去执行。如果它提示有任何的平台相关依赖，那么你就需要按照指示完成这些配置：</p><pre class=" language-cmd"><code class="language-cmd">C:\src\flutter>flutter doctorcm</code></pre><p>上述命令会检查你的现有环境，然后把检测结果以报告形式呈现出来。仔细阅读它显示的内容，检查是否有尚未安装的软件或是有其他的步骤需要完成（通常会以<strong>粗体</strong>呈现）。</p><p>举个例子：</p><pre class=" language-cmd"><code class="language-cmd">[-] Android toolchain - develop for Android devices    • Android SDK at D:\Android\sdk    ✗ Android SDK is missing command line tools; download from https://goo.gl/XxQghQ    • Try re-installing or updating your Android SDK,      visit https://flutter-io.cn/setup/#android-setup for detailed instructions.</code></pre><p>对于安卓开发者来说，Android Studio 为 Flutter 提供了一个完整的集成开发环境。安装过程如下：</p><ol><li>打开 Android Studio。</li><li>打开插件设置（macOS 系统打开 <strong>Preferences &gt; Plugins</strong>， Windows 和 Linux 系统打开 <strong>File &gt; Settings &gt; Plugins</strong>）。</li><li>选择 <strong>Browse repositories</strong>，然后选择 Flutter 插件并点击 <strong>安装</strong>。</li><li>当弹出安装 Dart 插件提示时，点击 <strong>Yes</strong>。</li><li>当弹出重新启动提示时，点击 <strong>Restart</strong>。</li></ol><p><img src="https://Kanghanbin.github.io/2019/06/17/第一个Flutter应用之Helloworld/1.jpg" alt=""></p><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><ol><li>打开 Android Studio，选择 <strong>新 Flutter 项目 (Start a new Flutter project)</strong>.</li><li>选择 <strong>Flutter 应用程序</strong> 作为项目类型， 然后点 <strong>下一步</strong></li><li>确认 <strong>Flutter SDK 路径</strong> 区域所示路径是正确的 SDK 路径。 如果你还没有安装 SDK，需要先进行安装，选择 <strong>Install SDK…</strong>。</li><li>输入项目名称(比如 ‘myapp’), 然后点击<strong>下一步</strong>。</li><li>点击 <strong>完成</strong>。</li><li>待 Android Studio 安装 SDK 后，创建项目。</li></ol><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><ol><li>找到 Android Studio 的工具条:<br><img src="https://flutter-io.cn/assets/tools/android-studio/main-toolbar-857fe8c36d38020e27b502ec643ea8b1716edbe150cc6e39e3560f8fb7bda5b2.png" alt="Main IntelliJ toolbar"></li><li>在 <strong>目标选择器</strong>， 选择一个 Android 设备来运行程序。 如果列表里没有可用设备，选择 **工具 &gt; Android &gt; AVD Manager 然后在这个窗口中创建一个新的虚拟机。更多详细介绍，参见<a href="https://developer.android.google.cn/studio/run/managing-avds" target="_blank" rel="noopener">管理 AVDs</a>。</li><li>点击工具栏中的 Run 图标，或者在菜单中选择 <strong>Run &gt; Run</strong>。</li></ol><p>当应用编译完成后，就可以在设备上运行这个起步应用了。</p><p><img src="https://flutter-io.cn/assets/get-started/ios/starter-app-5e284e57b8dce587ea1dfdac7da616e6ec9dc263a409a9a8f99cf836340f47b8.png" alt="Starter app on iOS">Starter app</p><h2 id="尝试热重载-hot-reload"><a href="#尝试热重载-hot-reload" class="headerlink" title="尝试热重载 (hot reload)"></a>尝试热重载 (hot reload)</h2><p>Flutter 通过 <strong>热重载</strong> 提供快速开发周期，该功能支持应用程序在运行状态下重载代码 而无需重新启动应用程序或者丢失程序运行状态。 修改一下代码，然后告诉IDE或者命令行工具你需要热重载， 然后看一下模拟器或者设备上应用的变化</p><ol><li><p>打开 <code>lib/main.dart</code>。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// This widget is the root of your application.</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Flutter Demo'</span><span class="token punctuation">,</span>      theme<span class="token punctuation">:</span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">// This is the theme of your application.</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// Try running your application with "flutter run". You'll see the</span>        <span class="token comment" spellcheck="true">// application has a blue toolbar. Then, without quitting the app, try</span>        <span class="token comment" spellcheck="true">// changing the primarySwatch below to Colors.green and then invoke</span>        <span class="token comment" spellcheck="true">// "hot reload" (press "r" in the console where you ran "flutter run",</span>        <span class="token comment" spellcheck="true">// or simply save your changes to "hot reload" in a Flutter IDE).</span>        <span class="token comment" spellcheck="true">// Notice that the counter didn't reset back to zero; the application</span>        <span class="token comment" spellcheck="true">// is not restarted.</span>        primarySwatch<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blue<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">MyHomePage</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string">'Flutter Demo Home Page'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyHomePage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token function">MyHomePage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Key key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// This widget is the home page of your application. It is stateful, meaning</span>  <span class="token comment" spellcheck="true">// that it has a State object (defined below) that contains fields that affect</span>  <span class="token comment" spellcheck="true">// how it looks.</span>  <span class="token comment" spellcheck="true">// This class is the configuration for the state. It holds the values (in this</span>  <span class="token comment" spellcheck="true">// case the title) provided by the parent (in this case the App widget) and</span>  <span class="token comment" spellcheck="true">// used by the build method of the State. Fields in a Widget subclass are</span>  <span class="token comment" spellcheck="true">// always marked "final".</span>  <span class="token keyword">final</span> String title<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  _MyHomePageState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_MyHomePageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_MyHomePageState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>MyHomePage<span class="token operator">></span> <span class="token punctuation">{</span>  int _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">_incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// This call to setState tells the Flutter framework that something has</span>      <span class="token comment" spellcheck="true">// changed in this State, which causes it to rerun the build method below</span>      <span class="token comment" spellcheck="true">// so that the display can reflect the updated values. If we changed</span>      <span class="token comment" spellcheck="true">// _counter without calling setState(), then the build method would not be</span>      <span class="token comment" spellcheck="true">// called again, and so nothing would appear to happen.</span>      _counter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// This method is rerun every time setState is called, for instance as done</span>    <span class="token comment" spellcheck="true">// by the _incrementCounter method above.</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// The Flutter framework has been optimized to make rerunning build methods</span>    <span class="token comment" spellcheck="true">// fast, so that you can just rebuild anything that needs updating rather</span>    <span class="token comment" spellcheck="true">// than having to individually change instances of widgets.</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">// Here we take the value from the MyHomePage object that was created by</span>        <span class="token comment" spellcheck="true">// the App.build method, and use it to set our appbar title.</span>        title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">// Center is a layout widget. It takes a single child and positions it</span>        <span class="token comment" spellcheck="true">// in the middle of the parent.</span>        child<span class="token punctuation">:</span> <span class="token function">Column</span><span class="token punctuation">(</span>          <span class="token comment" spellcheck="true">// Column is also layout widget. It takes a list of children and</span>          <span class="token comment" spellcheck="true">// arranges them vertically. By default, it sizes itself to fit its</span>          <span class="token comment" spellcheck="true">// children horizontally, and tries to be as tall as its parent.</span>          <span class="token comment" spellcheck="true">//</span>          <span class="token comment" spellcheck="true">// Invoke "debug painting" (press "p" in the console, choose the</span>          <span class="token comment" spellcheck="true">// "Toggle Debug Paint" action from the Flutter Inspector in Android</span>          <span class="token comment" spellcheck="true">// Studio, or the "Toggle Debug Paint" command in Visual Studio Code)</span>          <span class="token comment" spellcheck="true">// to see the wireframe for each widget.</span>          <span class="token comment" spellcheck="true">//</span>          <span class="token comment" spellcheck="true">// Column has various properties to control how it sizes itself and</span>          <span class="token comment" spellcheck="true">// how it positions its children. Here we use mainAxisAlignment to</span>          <span class="token comment" spellcheck="true">// center the children vertically; the main axis here is the vertical</span>          <span class="token comment" spellcheck="true">// axis because Columns are vertical (the cross axis would be</span>          <span class="token comment" spellcheck="true">// horizontal).</span>          mainAxisAlignment<span class="token punctuation">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>            <span class="token function">Text</span><span class="token punctuation">(</span>              <span class="token string">'You have clicked the button this many times:'</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Text</span><span class="token punctuation">(</span>              <span class="token string">'$_counter'</span><span class="token punctuation">,</span>              style<span class="token punctuation">:</span> Theme<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>display1<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      floatingActionButton<span class="token punctuation">:</span> <span class="token function">FloatingActionButton</span><span class="token punctuation">(</span>        onPressed<span class="token punctuation">:</span> _incrementCounter<span class="token punctuation">,</span>        tooltip<span class="token punctuation">:</span> <span class="token string">'Increment'</span><span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// This trailing comma makes auto-formatting nicer for build methods.</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>修改字符串</p><pre class=" language-dart"><code class="language-dart"><span class="token string">'You have pushed the button this many times'</span></code></pre><p>改为</p><pre class=" language-dart"><code class="language-dart"><span class="token string">'You have clicked the button this many times'</span></code></pre></li></ol><p>  3.保存修改: 选择 <strong>Save All</strong>，或者点击<strong>热重载</strong> </p><p>你会发现修改后的字符串几乎马上出现在正在运行的应用程序上。</p><h2 id="Helloworld来了"><a href="#Helloworld来了" class="headerlink" title="Helloworld来了"></a>Helloworld来了</h2><p>替换 lib/main.dart<br>删除 lib/main.dart 中的所有代码，然后替换为下面的代码，它将在屏幕的中心显示”Hello World”。</p><p>lib/main.dart</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Welcome to Flutter'</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Welcome to Flutter'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://flutter-io.cn/docs/get-started/test-drive#androidstudio" target="_blank" rel="noopener">运行</a>你的工程项目， 根据不同的操作系统，你会看到如下运行结果界面：</p><p><img src="https://Kanghanbin.github.io/2019/06/17/第一个Flutter应用之Helloworld/2.jpg" alt=""></p><h3 id="观察和分析"><a href="#观察和分析" class="headerlink" title="观察和分析"></a>观察和分析</h3><ul><li>本示例创建了一个具有 Material Design 风格的应用， <a href="https://material-io.cn/guidelines" target="_blank" rel="noopener">Material</a> 是一种移动端和网页端通用的视觉设计语言， Flutter 提供了丰富的 Material 风格的 widgets。</li><li>主函数（main）使用了 (<code>=&gt;</code>) 符号，这是 Dart 中单行函数或方法的简写。</li><li>该应用程序继承了 <code>StatelessWidget</code>，这将会使应用本身也成为一个 widget。 在 Flutter 中，几乎所有都是 widget， 包括对齐 (alignment)、填充 (padding) 和布局 (layout)。</li><li><code>Scaffold</code> 是 Material 库中提供的一个 widget， 它提供了默认的导航栏、标题和包含主屏幕 widget 树的 body 属性。 widget 树可以很复杂。</li><li>一个 widget 的主要工作是提供一个 <code>build()</code> 方法来描述如何根据其他较低级别的 widgets 来显示自己。</li><li>本示例中的 body 的 widget 树中包含了一个 <code>Center</code> widget， Center widget 又包含一个 <code>Text</code> 子 widget， Center widget 可以将其子 widget 树对齐到屏幕中心。</li></ul><h2 id="使用外部-package"><a href="#使用外部-package" class="headerlink" title="使用外部 package"></a>使用外部 package</h2><p>使用一个名为 <a href="https://pub.flutter-io.cn/packages/english_words" target="_blank" rel="noopener">english_words</a> 的开源软件包，其中包含数千个最常用的英文单词以及一些实用功能。</p><p>你可以在 <a href="https://pub.flutter-io.cn/flutter" target="_blank" rel="noopener">Pub site</a> 上找到 <code>english_words</code> 软件包以及其他许多开源软件包。</p><ol><li><p>pubspec 文件管理 Flutter 应用程序的 assets（资源，如图片、package等）。 在pubspec.yaml 中，将 english_words（3.1.0或更高版本）添加到依赖项列表， 如下面高亮显示的行：</p><pre class=" language-dart"><code class="language-dart">dependencies<span class="token punctuation">:</span>  flutter<span class="token punctuation">:</span>    sdk<span class="token punctuation">:</span> flutter  # The following adds the Cupertino Icons font to your application<span class="token punctuation">.</span>  # Use <span class="token keyword">with</span> the CupertinoIcons <span class="token keyword">class</span> <span class="token class-name">for</span> iOS style icons<span class="token punctuation">.</span>  cupertino_icons<span class="token punctuation">:</span> <span class="token operator">^</span><span class="token number">0.1</span><span class="token punctuation">.</span><span class="token number">2</span>  english_words<span class="token punctuation">:</span> <span class="token operator">^</span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">0</span></code></pre></li><li><p>在Android Studio 的编辑器视图中查看 pubspec 时， 单击右上角的 Packages get，这会将依赖包安装到你的项目。 你可以在控制台中看到以下内容：</p><pre class=" language-cmd"><code class="language-cmd">$ flutter pub getRunning "flutter pub get" in startup_namer...Process finished with exit code 0</code></pre><p>在执行 <code>Packages get</code> 命令的时候，同时会自动生成一个名为 <code>pubspec.lock</code> 的文件，这里包含了你依赖 package</p><p>s 的名称和版本。</p></li><li><p>在 <code>lib/main.dart</code> 中引入，如下所示：</p><p>lib/main.dart</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:english_words/english_words.dart'</span><span class="token punctuation">;</span></code></pre><p>在你输入时，Android Studio会为你提供有关库导入的建议。 然后它将呈现灰色的导入字符串，让你知道导入的库截至目前尚未被使用。</p></li><li><p>接下来，我们使用 English words 包生成文本来替换字符串”Hello World”：</p><p>{step1_base → step2_use_package}/lib/main.dart</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> wordPair <span class="token operator">=</span> WordPair<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Welcome to Flutter'</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Welcome to Flutter'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">//          child: Text('Hello World'),</span>            child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>wordPair<span class="token punctuation">.</span>asPascalCase<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>   5.如果应用程序正在运行，请使用热重载按钮 <em>offline_bolt</em> 更新正在运行的应用程序。每次单击热重载或保存项目时，都会在正在运行的应用程序中随机选择不同的单词对。 这是因为单词对是在 build 方法内部生成的。每次 MaterialApp 需要渲染时或者在 Flutter Inspector 中切换平台时 build 都会运行。</p><p>   <img src="https://Kanghanbin.github.io/2019/06/17/第一个Flutter应用之Helloworld/3.png" alt=""></p><h2 id="添加一个-Stateful-widget"><a href="#添加一个-Stateful-widget" class="headerlink" title="添加一个 Stateful widget"></a>添加一个 Stateful widget</h2><p>State<em>less</em> widgets 是不可变的，这意味着它们的属性不能改变 —— 所有的值都是 final。</p><p>State<em>ful</em> widgets 持有的状态可能在 widget 生命周期中发生变化， 实现一个 stateful widget 至少需要两个类： 1）一个 StatefulWidget 类；2）一个 State 类，StatefulWidget 类本身是不变的， 但是 State 类在 widget 生命周期中始终存在。</p><p>添加一个 stateful widget（有状态的 widget）—— <code>RandomWords</code>， 它会创建自己的状态类 —— <code>RandomWordsState</code>，然后你需要将 <code>RandomWords</code> 内嵌到已有的无状态的 <code>MyApp</code> widget</p><ol><li><p>创建一个最简的 state 类，这个类可以在任意地方创建而不一定非要在 MyApp 里， 我们的示例代码是放在 MyApp 类的最下面了：</p><p>Create a minimal state class. Add the following to the bottom of <code>main.dart</code>:</p><p>lib/main.dart (RandomWordsState)</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">RandomWordsState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>RandomWords<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TODO Add build() method</span><span class="token punctuation">}</span></code></pre><p>注意一下 <code>State&lt;RandomWords&gt;</code> 的声明。这表明我们在使用专门用于 <code>RandomWords</code> 的 <a href="https://api.flutter.dev/flutter/widgets/State-class.html" target="_blank" rel="noopener">State</a> 泛型类。 应用的大部分逻辑和状态都在这里 —— 它会维护 RandomWords widget 的状态。 这个类会保存代码生成的单词对，这个单词对列表会随着用户滑动而无限增长， 另外还会保存用户喜爱的单词对（第二部分）， 也即当用户点击爱心图标的时候会从喜爱的列表中添加或者移除当前单词对。</p><p><code>RandomWordsState</code> 依赖 <code>RandomWords</code>，我们接下来会创建这个类。</p></li><li><p>添加有状态的 <code>RandomWords</code> widget 到 <code>main.dart</code>，<code>RandomWords</code> widget 除了创建 State 类之外几乎没有其他任何东西：</p><p>lib/main.dart (RandomWords)</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">RandomWords</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  RandomWordsState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">RandomWordsState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在添加状态类后，IDE 会提示该类缺少 build 方法。 接下来，你将添加一个基本的 build 方法， 该方法通过将生成单词对的代码从 <code>MyApp</code> 移动到 <code>RandomWordsState</code> 来生成单词对。</p></li><li><p>将 <code>build()</code> 方法添加到 <code>RandomWordState</code> 中，如下所示：</p><p>lib/main.dart (RandomWordsState)</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">RandomWordsState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>RandomWords<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> wordPair <span class="token operator">=</span> WordPair<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">Text</span><span class="token punctuation">(</span>wordPair<span class="token punctuation">.</span>asPascalCase<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>如下所示，删除 <code>MyApp</code> 里生成文字的代码：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Welcome to Flutter'</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Welcome to Flutter'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">//            child: Text(wordPair.asPascalCase),</span>              child<span class="token punctuation">:</span> <span class="token function">RandomWords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>重启应用。 应用应该像之前一样运行，每次热重载或保存应用程序时都会显示一个单词对。</p></li></ol><h2 id="创建一个小项目（生成建议的名字）"><a href="#创建一个小项目（生成建议的名字）" class="headerlink" title="创建一个小项目（生成建议的名字）"></a>创建一个小项目（生成建议的名字）</h2><p>在这一步中，你将扩展（继承）<code>RandomWordsState</code> 类，以生成并显示单词对列表。 当用户滚动时，<code>ListView</code> 中显示的列表将无限增长。 <code>ListView</code> 的 <code>builder</code> 工厂构造函数允许你按需建立一个懒加载的列表视图。</p><ol><li><p>向 <code>RandomWordsState</code> 类中添加一个 <code>_suggestions</code> 列表以保存建议的单词对， 同时，添加一个 <code>_biggerFont</code> 变量来增大字体大小。</p><p>lib/main.dart</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">RandomWordsState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>RandomWords<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> _suggestions <span class="token operator">=</span> <span class="token operator">&lt;</span>WordPair<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> _biggerFont <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><p> <strong>备忘</strong></p><p>在 Dart 语言中使用下划线前缀标识符，会<a href="https://dart.dev/guides/language/language-tour" target="_blank" rel="noopener">强制其变成私有</a>。</p><p>接下来，我们将向 <code>RandomWordsState</code> 类添加一个 <code>_buildSuggestions()</code> 方法， 此方法构建显示建议单词对的 <code>ListView</code>。</p><p><code>ListView</code> 类提供了一个名为 <code>itemBuilder</code> 的 builder 属性，这是一个工厂匿名回调函数， 接受两个参数 <code>BuildContext</code> 和行迭代器 <code>i</code>。迭代器从 0 开始，每调用一次该函数 <code>i</code> 就会自增， 每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。 它用于创建一个在用户滚动时候无限增长的列表。</p></li><li><p>向 <code>RandomWordsState</code> 类添加 <code>_buildSuggestions()</code> 方法，内容如下：</p><p>lib/main.dart (_buildSuggestions)</p><pre class=" language-dart"><code class="language-dart">Widget <span class="token function">_buildSuggestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> ListView<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>      padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      itemBuilder<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*1*/</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>isOdd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*2*/</span>        <span class="token keyword">final</span> index <span class="token operator">=</span> i <span class="token operator">~/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*3*/</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> _suggestions<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          _suggestions<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">generateWordPairs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*4*/</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">_buildRow</span><span class="token punctuation">(</span>_suggestions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>对于每个建议的单词对都会调用一次 itemBuilder，然后将单词对添加到 ListTile 行中。 在偶数行，该函数会为单词对添加一个 ListTile row， 在奇数行，该函数会添加一个分割线的 widget，来分隔相邻的词对。 注意，在小屏幕上，分割线看起来可能比较吃力。</li><li>在每一列之前，添加一个1像素高的分隔线 widget。</li><li>语法 “i ~/ 2” 表示i除以2，但返回值是整形（向下取整）， 比如 i 为：1, 2, 3, 4, 5 时，结果为 0, 1, 1, 2, 2， 这个可以计算出 ListView 中减去分隔线后的实际单词对数量。</li><li>如果是建议列表中最后一个单词对，接着再生成10个单词对，然后添加到建议列表。</li></ol><p>对于每一个单词对，<code>_buildSuggestions()</code> 都会调用一次 <code>_buildRow()</code>。 这个函数在 <code>ListTile</code> 中显示每个新词对， 这使你在下一步中可以生成更漂亮的显示行，详见本 codelab 的第二部分。</p></li><li><p>在 <code>RandomWordsState</code> 中添加 <code>_buildRow()</code> 函数 :</p><p>lib/main.dart (_buildRow)</p><pre class=" language-dart"><code class="language-dart">Widget <span class="token function">_buildRow</span><span class="token punctuation">(</span>WordPair pair<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">ListTile</span><span class="token punctuation">(</span>    title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>      pair<span class="token punctuation">.</span>asPascalCase<span class="token punctuation">,</span>      style<span class="token punctuation">:</span> _biggerFont<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>更新 RandomWordsState 的 build 方法以使用 _buildSuggestions()， 而不是直接调用单词生成库，代码更改后如下： （使用 <a href="https://api.flutter.dev/flutter/material/Scaffold-class.html" target="_blank" rel="noopener">Scaffold</a> 类实现基础的 Material Design 布局）</p><p>lib/main.dart (build)</p><pre class=" language-dart"><code class="language-dart"><span class="token metadata symbol">@override</span>Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>    appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Startup Name Generator'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    body<span class="token punctuation">:</span> <span class="token function">_buildSuggestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>更新 <code>MyApp</code> 的 <code>build()</code> 方法，修改 <code>title</code> 的值来改变标题， 修改 <code>home</code> 的值为 <code>RandomWords</code> widget。</p><p>{step3_stateful_widget → step4_infinite_list}/lib/main.dart</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Startup Name Generator'</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span>  <span class="token function">RandomWords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>重新启动你的项目工程应用，你应该看到一个单词对列表。 尽可能地向下滚动，你将继续看到新的单词对。</p><p><img src="https://Kanghanbin.github.io/2019/06/17/第一个Flutter应用之Helloworld/4.png" alt=""></p></li><li><p>向列表里添加图标</p></li></ol><p>在这部分，我们将为每一行添加一个心形的（收藏）图标，下一步你将能够为这个图标加入点击收藏的功能。</p><p> 添加一个 <code>_saved</code> Set（集合）到 RandomWordsState，这个集合存储用户喜欢（收藏）的单词对。 在这里，Set 比 List 更合适，因为 Set 中不允许重复的值。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">RandomWordsState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>RandomWords<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> List<span class="token operator">&lt;</span>WordPair<span class="token operator">></span> _suggestions <span class="token operator">=</span> <span class="token operator">&lt;</span>WordPair<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>WordPair<span class="token operator">></span> _saved <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span>WordPair<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 新增本行</span>  <span class="token keyword">final</span> TextStyle _biggerFont <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p> 在 <code>_buildRow</code> 方法中添加 <code>alreadySaved</code> 来检查确保单词对还没有添加到收藏夹中。</p><pre class=" language-dart"><code class="language-dart">Widget <span class="token function">_buildRow</span><span class="token punctuation">(</span>WordPair pair<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> bool alreadySaved <span class="token operator">=</span> _saved<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 新增本行</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>同时在 <code>_buildRow()</code> 中， 添加一个心形 ❤️图标到 ListTiles以启用收藏功能。接下来，你就可以给心形 ❤️图标添加交互能力了。</p><p>向列表添加图标，如下所示：</p><pre class=" language-dart"><code class="language-dart">Widget <span class="token function">_buildRow</span><span class="token punctuation">(</span>WordPair pair<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> bool alreadySaved <span class="token operator">=</span> _saved<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>    title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>      pair<span class="token punctuation">.</span>asPascalCase<span class="token punctuation">,</span>      style<span class="token punctuation">:</span> _biggerFont<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    trailing<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>   <span class="token comment" spellcheck="true">// 新增代码开始 ...</span>      alreadySaved <span class="token operator">?</span> Icons<span class="token punctuation">.</span>favorite <span class="token punctuation">:</span> Icons<span class="token punctuation">.</span>favorite_border<span class="token punctuation">,</span>      color<span class="token punctuation">:</span> alreadySaved <span class="token operator">?</span> Colors<span class="token punctuation">.</span>red <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// ... 新增代码结束</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>热重载应用，你现在可以在每一行看到心形 ❤️图标️，但它们还没有交互。</p><p><img src="https://Kanghanbin.github.io/2019/06/17/第一个Flutter应用之Helloworld/5.png" alt=""></p><ol start="8"><li>添加交互</li></ol><p>在这部分，我们将为刚刚的心形 ❤️图标增加交互，当用户点击列表中的条目，切换其”收藏”状态，并将该词对添加到或移除出”收藏夹”。</p><p>为了做到这个，我们在 <code>_buildRow</code> 中让心形 ❤️图标变得可以点击。如果单词条目已经添加到收藏夹中， 再次点击它将其从收藏夹中删除。当心形 ❤️图标被点击时，函数调用 <code>setState()</code> 通知框架状态已经改变。增加 <code>onTap</code> 方法，如下所示：</p><pre class=" language-dart"><code class="language-dart">Widget <span class="token function">_buildRow</span><span class="token punctuation">(</span>WordPair pair<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> alreadySaved <span class="token operator">=</span> _saved<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>    title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>      pair<span class="token punctuation">.</span>asPascalCase<span class="token punctuation">,</span>      style<span class="token punctuation">:</span> _biggerFont<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    trailing<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>      alreadySaved <span class="token operator">?</span> Icons<span class="token punctuation">.</span>favorite <span class="token punctuation">:</span> Icons<span class="token punctuation">.</span>favorite_border<span class="token punctuation">,</span>      color<span class="token punctuation">:</span> alreadySaved <span class="token operator">?</span> Colors<span class="token punctuation">.</span>red <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 增加如下 9 行代码...</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadySaved<span class="token punctuation">)</span> <span class="token punctuation">{</span>          _saved<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           _saved<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">// ... 一直到这里</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>提示:</strong> 在 Flutter 的响应式风格的框架中，调用 <code>setState()</code> 会为 State 对象触发 <code>build()</code> 方法，从而导致对 UI 的更新</p><p>热重载应用，你就可以点击任何一行测试收藏或取消收藏功能，你的点击同时自带 Material Design 里的水波动画特效。</p><ol start="9"><li>导航到新页面</li></ol><p>在这一步中，您将添加一个显示收藏夹内容的新页面（在 Flutter 中称为路由［<em>route</em>］）。您将学习如何在主路由和新路由之间导航（切换页面）。</p><p>在 Flutter 中，导航器管理应用程序的路由栈。将路由推入（push）到导航器的栈中，将会显示更新为该路由页面。 从导航器的栈中弹出（pop）路由，将显示返回到前一个路由。</p><p>接下来，我们在 RandomWordsState 的 <code>build</code> 方法中为 AppBar 添加一个列表图标。当用户点击列表图标时，包含收藏夹的新路由页面入栈显示。将该图标及其相应的操作添加到 <code>build</code> 方法中：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">RandomWordsState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>RandomWords<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">'Startup Name Generator'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        actions<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// 新增代码开始 ...</span>          <span class="token keyword">new</span> <span class="token class-name">IconButton</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">,</span> onPressed<span class="token punctuation">:</span> _pushSaved<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// ... 代码新增结束</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">_buildSuggestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>提示</strong>: 某些 widget 属性需要单个 widget（child），而其它一些属性，如 action，需要一组widgets（children），用方括号 [] 表示。</p><p>在 <code>RandomWordsState</code> 这个类里添加 <code>_pushSaved()</code> 方法：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">RandomWordsState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>RandomWords<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">// 新增代码开始</span>  <span class="token keyword">void</span> <span class="token function">_pushSaved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 新增代码结束 </span><span class="token punctuation">}</span></code></pre><p> 热重载应用，列表图标（<img src="https://Kanghanbin.github.io/2019/06/17/第一个Flutter应用之Helloworld/menu.png" alt="img">）将会出现在导航栏中。现在点击它不会有任何反应，因为 <code>_pushSaved</code> 函数还是空的。</p><p>接下来，（当用户点击导航栏中的列表图标时）我们会建立一个路由并将其推入到导航管理器栈中。此操作会切换页面以显示新路由，新页面的内容会在 MaterialPageRoute 的 <code>builder</code> 属性中构建，<code>builder</code> 是一个匿名函数。</p><p>添加 <code>Navigator.push</code> 调用，这会使路由入栈（以后路由入栈均指推入到导航管理器的栈）</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">_pushSaved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接下来，添加 MaterialPageRoute 及其 builder。 现在，添加生成 ListTile 行的代码，ListTile 的 <code>divideTiles()</code> 方法在每个 ListTile 之间添加 1 像素的分割线。 该 <code>divided</code> 变量持有最终的列表项，并通过 <code>toList()</code>方法非常方便的转换成列表显示。添加如下所示的代码：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">_pushSaved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">MaterialPageRoute</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">(</span>   <span class="token comment" spellcheck="true">// 新增如下20行代码 ...</span>      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Iterable<span class="token operator">&lt;</span>ListTile<span class="token operator">></span> tiles <span class="token operator">=</span> _saved<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span>WordPair pair<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>              title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>                pair<span class="token punctuation">.</span>asPascalCase<span class="token punctuation">,</span>                style<span class="token punctuation">:</span> _biggerFont<span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Widget<span class="token operator">></span> divided <span class="token operator">=</span> ListTile          <span class="token punctuation">.</span><span class="token function">divideTiles</span><span class="token punctuation">(</span>            context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>            tiles<span class="token punctuation">:</span> tiles<span class="token punctuation">,</span>          <span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token comment" spellcheck="true">// ... 新增代码结束</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>builder 返回一个 Scaffold，其中包含名为”Saved Suggestions”的新路由的应用栏。新路由的body 由包含 ListTiles 行的 ListView 组成；每行之间通过一个分隔线分隔。添加水平分隔符，如下代码所示：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">_pushSaved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">MaterialPageRoute</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">(</span>      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Iterable<span class="token operator">&lt;</span>ListTile<span class="token operator">></span> tiles <span class="token operator">=</span> _saved<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span>WordPair pair<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>              title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>                pair<span class="token punctuation">.</span>asPascalCase<span class="token punctuation">,</span>                style<span class="token punctuation">:</span> _biggerFont<span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Widget<span class="token operator">></span> divided <span class="token operator">=</span> ListTile          <span class="token punctuation">.</span><span class="token function">divideTiles</span><span class="token punctuation">(</span>            context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>            tiles<span class="token punctuation">:</span> tiles<span class="token punctuation">,</span>          <span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>         <span class="token comment" spellcheck="true">// 新增 6 行代码开始 ...</span>          appBar<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>            title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Saved Suggestions'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          body<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ListView</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> divided<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// ... 新增代码段结束.</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>热重载应用程序，点击列表项收藏一些项，点击列表图标（<img src="https://Kanghanbin.github.io/2019/06/17/第一个Flutter应用之Helloworld/menu.png" alt="img">），在新的 route（路由）页面中显示收藏的内容。Navigator（导航器）会在应用栏中自动添加一个”返回”按钮，无需调用<code>Navigator.pop</code>，点击后退按钮就会返回到主页路由.</p><p><img src="https://Kanghanbin.github.io/2019/06/17/第一个Flutter应用之Helloworld/6.png" alt=""></p><p>10.使用 Themes 修改 UI</p><p>这一部分，我们将会一起修改应用的主题。Flutter 里我们使用 <em>theme</em> 来控制你应用的外观和风格，你可以使用默认主题，该主题取决于物理设备或模拟器，也可以自定义主题以适应您的品牌。</p><p>你可以通过配置 <a href="https://docs.flutter.io/flutter/material/ThemeData-class.html" target="_blank" rel="noopener">ThemeData</a> 类轻松更改应用程序的主题，目前我们的应用程序使用默认主题，下面将更改 primaryColor 颜色为白色。</p><p>在 MyApp 这个类里修改颜色：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Startup Name Generator'</span><span class="token punctuation">,</span>      theme<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span>          <span class="token comment" spellcheck="true">// 新增代码开始... </span>        primaryColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token comment" spellcheck="true">// ... 代码新增结束</span>      home<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">RandomWords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>热重载应用。 你会发现，整个背景将会变为白色，包括 app bar（应用栏）。</p><p><img src="https://Kanghanbin.github.io/2019/06/17/第一个Flutter应用之Helloworld/7.png" alt=""></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>会遇到提示 <strong>Waiting for another flutter command to release the startup lock…</strong><br>然后就一直卡着不动了。</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>1.先关闭Android Studio，打开任务管理器，看看有没有Dart.exe运行着，有的话全部结束了，然后重启试试<br>2.还是不行的话就删除掉 flutter\bin\cache目录下的lockfile文件，然后再次重启Android Studio即可</p><p><code>flutter issue：</code> <a href="https://github.com/flutter/flutter/issues/7768" target="_blank" rel="noopener">https://github.com/flutter/flutter/issues/7768</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完成了一个可运行在 Android 和 iOS 系统上的、包含交互的 Flutter 应用，在这个 codelab 里，你已经做了下面的事情：</p><ul><li>写了 Dart 代码</li><li>使用热重载加速了开发进程</li><li>实现了一个 stateful widget，为你的应用加入了交互功能</li><li>创建了一个新的页面（route），为主页和这个新页面的跳转加入了逻辑</li><li>学会了如何使用 themes 修改应用的 UI</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>带你初识kotlin(五)</title>
      <link href="/2019/06/03/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86kotlin-%E4%BA%94/"/>
      <url>/2019/06/03/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86kotlin-%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>集合是大多数编程语言的常见概念通常包含相同类型的一些（数目也可以为零）对象。集合中的对象称为<em>元素</em>或<em>条目</em>。</p><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><p>Kotlin标准库提供了基本集合类型的实现：集合，列表和映射。 一对接口代表每种集合类型：</p><ul><li>A <em>read-only</em> interface that provides operations for accessing collection elements.</li><li>A <em>mutable</em> interface that extends the corresponding read-only interface with write operations: adding, removing, and updating its elements.</li></ul><ol><li>List是一个有序集合，可以通过索引访问元素 （反映其位置的整数）。 元素可以在列表中出现多次。 list就像是是一个句子：它是一组单词，它们的顺序很重要，它们可以重复。</li><li>Set是一系列唯一元素。 它反映了集合的数学抽象：一组没有重复的对象。 通常，集合元素的顺序没有意义。 例如，字母表是一组字母。</li><li>Map（或dictionary）是一组键值对。 键是唯一的，每个键都映射到一个值。 值可以是重复的。 映射对于存储对象之间的逻辑连接很有用，例如，员工的ID和位置。</li></ol><p>下面是kotlin接口的结构图</p><p><img src="https://kanghanbin.github.io/2019/06/03/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86kotlin-%E4%BA%94/1.png" height="800" width="90%"></p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>Collection <t>是集合层次结构的根。 此接口表示只读集合的常见行为：检索大小，检查项目成员资格等。 集合继承自Iterable <t>接口，该接口定义迭代元素的操作。 您可以使用Collection作为适用于不同集合类型的函数的参数。 对于更具体的情况，请使用Collection的继承者：List和Set。</t></t></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printAll</span><span class="token punctuation">(</span>strings<span class="token operator">:</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>s <span class="token keyword">in</span> strings<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$s</span> "</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> stringList <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span>    <span class="token function">printAll</span><span class="token punctuation">(</span>stringList<span class="token punctuation">)</span>    <span class="token keyword">val</span> stringSet <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span>    <span class="token function">printAll</span><span class="token punctuation">(</span>stringSet<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p>one two one<br>one two three </p><p>MutableCollection是一个具有写操作的Collection，例如add和remove。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">getShortWordsTo</span><span class="token punctuation">(</span>shortWords<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> maxLength<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filterTo</span><span class="token punctuation">(</span>shortWords<span class="token punctuation">)</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> maxLength<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// throwing away the articles</span>    <span class="token keyword">val</span> articles <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"an"</span><span class="token punctuation">,</span> <span class="token string">"An"</span><span class="token punctuation">,</span> <span class="token string">"the"</span><span class="token punctuation">,</span> <span class="token string">"The"</span><span class="token punctuation">)</span>    shortWords <span class="token operator">-=</span> articles<span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> words <span class="token operator">=</span> <span class="token string">"A long time ago in a galaxy far far away"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> shortWords <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    words<span class="token punctuation">.</span><span class="token function">getShortWordsTo</span><span class="token punctuation">(</span>shortWords<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>shortWords<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p>[ago, in, far, far]</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p><strong>List <t></t></strong>以指定的顺序存储元素，并提供对它们的索引访问。 索引从 第一个元素(0)开始到最后一个元素lastIndex（list.size  -  1）。列表元素（包括空值）可以重复：列表可以包含任意数量的相等对象或单个对象的出现。 如果两个列表在相同位置具有相同的大小和结构相同的元素，则认为它们是相等的。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> bob <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token keyword">val</span> people <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Adam"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bob<span class="token punctuation">,</span> bob<span class="token punctuation">)</span><span class="token keyword">val</span> people2 <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Adam"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bob<span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>people <span class="token operator">==</span> people2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>bob<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">32</span><span class="token function">println</span><span class="token punctuation">(</span>people <span class="token operator">==</span> people2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span></code></pre><p><strong>mutableList</strong>是一个具有特定于列表的写操作的List，例如，用于在特定位置添加或删除元素。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>numbers<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>numbers<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//随机打乱</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span></code></pre><p>结果：</p><p>[0, 5, 4, 3]</p><p>如我们所见，在某些方面，列表与数组非常相似。 但是，有一个重要的区别：数组的大小是在初始化时定义的，永远不会改变; 反过来，列表没有预定义的大小; 写操作：添加，更新或删除元素，可以更改列表的大小。在Kotlin中，List的默认实现是ArrayList，您可以将其视为可调整大小的数组。</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p><strong>Set<t></t></strong>存储唯一的元素， 他们的顺序通常是不确定的。 null元素也是唯一的就，Set只能包含一个null。 如果它们具有相同的大小，并且对于集合中的每个元素，在另一个集合中存在相等的元素，则两个集合相等。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Number of elements: <span class="token interpolation"><span class="token delimiter variable">${</span>numbers<span class="token punctuation">.</span>size<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 is in the set"</span><span class="token punctuation">)</span><span class="token keyword">val</span> numbersBackwards <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The sets are equal: <span class="token interpolation"><span class="token delimiter variable">${</span>numbers <span class="token operator">==</span> numbersBackwards<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span></code></pre><p>结果：</p><p>Number of elements: 4<br>1 is in the set<br>The sets are equal: true</p><p><strong>MutableSet</strong>是一个带有来自MutableCollection的写操作的Set。</p><p>Set 的默认实现 是 <strong>LinkedHashSet</strong>保留元素插入的顺序。 因此，依赖于顺序的函数（例如first（）或last（））会在这些集合上返回可预测的结果。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// LinkedHashSet is the default implementation</span><span class="token keyword">val</span> numbersBackwards <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> numbersBackwards<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//false</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> numbersBackwards<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//true</span></code></pre><p>另一种实现<strong>HashSet</strong> ,对元素顺序没有任何说明，因此在其上调用这些函数会返回不可预测的结果。 但是，HashSet存储相同数量的元素需要较少的内存。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><strong>Map &lt;K，V&gt;</strong>不是Collection接口的继承者; 但是，它也是Kotlin系列。 Map存储键值对（或条目）; 键是唯一的，但不同的键可以与相同的值配对。 Map接口提供例如按键访问值，搜索键和值等特定功能。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbersMap <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"key1"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"key2"</span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"key3"</span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"key4"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All keys: <span class="token interpolation"><span class="token delimiter variable">${</span>numbersMap<span class="token punctuation">.</span>keys<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All values: <span class="token interpolation"><span class="token delimiter variable">${</span>numbersMap<span class="token punctuation">.</span>values<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"key2"</span> <span class="token keyword">in</span> numbersMap<span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Value by key \"key2\": ${numbersMap["</span>key2<span class="token string">"]}"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> numbersMap<span class="token punctuation">.</span>values<span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The value 1 is in the map"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>numbersMap<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The value 1 is in the map"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// same as previous</span></code></pre><p>结果：</p><p>All keys: [key1, key2, key3, key4]<br>All values: [1, 2, 3, 1]<br>Value by key “key2”: 2<br>The value 1 is in the map<br>The value 1 is in the map</p><p>无论对顺序如何，包含相等对的两个映射都是相等的</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbersMap <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"key1"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"key2"</span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"key3"</span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"key4"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> anotherMap <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"key2"</span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"key1"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"key4"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"key3"</span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The maps are equal: <span class="token interpolation"><span class="token delimiter variable">${</span>numbersMap <span class="token operator">==</span> anotherMap<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p><strong>MutableMap</strong>是一个带有Map写操作的Map，例如，您可以添加新的键值对或更新与给定键关联的值。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbersMap <span class="token operator">=</span> <span class="token function">mutableMapOf</span><span class="token punctuation">(</span><span class="token string">"one"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"two"</span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">)</span>numbersMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>numbersMap<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token function">println</span><span class="token punctuation">(</span>numbersMap<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{one=11, two=2, three=3}</span></code></pre><p>与Set一样， LinkedHashMap是Map的默认实现 - 在迭代Map时保留元素插入的顺序。 反过来，另一种实现HashMap  对元素顺序没有任何说明。</p><h2 id="构造集合"><a href="#构造集合" class="headerlink" title="构造集合"></a>构造集合</h2><h3 id="1-由元素构造"><a href="#1-由元素构造" class="headerlink" title="1.由元素构造"></a>1.由元素构造</h3><p>创建集合的最常用方法是使用标准库函数 listOf <t>（），setOf <t>（），mutableListOf <t>（），mutableSetOf <t>（）。 如果以逗号分隔的集合元素列表作为参数，则编译器会自动检测元素类型。 创建空集合时，请明确指定类型。map也是如此，用mapOf（）和mutableMapOf（）函数。 map的键和值作为Pair对象传递（通常使用infix函数<code>to</code>创建）。</t></t></t></t></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbersSet <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span><span class="token keyword">val</span> emptySet <span class="token operator">=</span> mutableSetOf<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> numbersMap <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"key1"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"key2"</span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"key3"</span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"key4"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>请注意，<code>to</code>表示法会创建一个短生命的Pair对象，因此建议仅在性能不重要时才使用它。 为避免过多的内存使用，请使用其他方法。 例如可以创建<code>mutableMap</code>并使用写入操作填充它。 apply（）函数可以帮助保持初始化流畅。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbersMap <span class="token operator">=</span> mutableMapOf<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">"two"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"2"</span> <span class="token punctuation">}</span></code></pre><h3 id="2-空集合"><a href="#2-空集合" class="headerlink" title="2.空集合"></a>2.空集合</h3><p>创建没有任何元素的集合的函数： <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/empty-list.html" target="_blank" rel="noopener"><code>emptyList()</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/empty-set.html" target="_blank" rel="noopener"><code>emptySet()</code></a>, and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/empty-map.html" target="_blank" rel="noopener"><code>emptyMap()</code></a>.。 创建空集合时，应指定集合将包含的元素类型。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> empty <span class="token operator">=</span> emptyList<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-list初始化函数"><a href="#3-list初始化函数" class="headerlink" title="3.list初始化函数"></a>3.list初始化函数</h3><p>对于list，有一个构造函数，它接受列表大小和初始化函数两个参数，该函数根据索引定义元素值。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> doubled <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> it <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// or MutableList if you want to change its content later</span><span class="token function">println</span><span class="token punctuation">(</span>doubled<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0, 2, 4]</span></code></pre><h3 id="4-具体类构造函数"><a href="#4-具体类构造函数" class="headerlink" title="4.具体类构造函数"></a>4.具体类构造函数</h3><p>要创建具体的类型集合（例如ArrayList或LinkedList），可以使用这些类型的可用构造函数。 类似的构造函数可用于Set和Map的实现。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> linkedList <span class="token operator">=</span> LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> presizedSet <span class="token operator">=</span> HashSet<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span></code></pre><h3 id="5-复制"><a href="#5-复制" class="headerlink" title="5.复制"></a>5.复制</h3><p>要使用与现有集合相同的元素创建集合，可以使用复制操作。 标准库中的集合复制操作创建了具有相同元素引用的浅复制集合。 因此，对集合元素所做的更改会反映其所有副本。</p><p>集合复制函数如toList（），toMutableList（），toSet（）等可在特定时刻创建集合的快照。 他们的结果是相同元素的新集合。 如果在原始集合中添加或删除元素，则不会影响副本。 副本也可以独立于源进行更改</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> sourceList <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">val</span> copyList <span class="token operator">=</span> sourceList<span class="token punctuation">.</span><span class="token function">toMutableList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> readOnlyCopyList <span class="token operator">=</span> sourceList<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sourceList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Copy size: <span class="token interpolation"><span class="token delimiter variable">${</span>copyList<span class="token punctuation">.</span>size<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//Copy size: 3</span><span class="token comment" spellcheck="true">//readOnlyCopyList.add(4)             // compilation error</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Read-only copy size: <span class="token interpolation"><span class="token delimiter variable">${</span>copyList<span class="token punctuation">.</span>size<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Read-only copy size: 3</span></code></pre><p>或者，可以创建对同一集合实例的新引用。 使用现有集合初始化集合变量时，将创建新引用。 因此，当通过引用更改集合实例时，更改将反映在其所有引用中。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> sourceList <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">val</span> referenceList <span class="token operator">=</span> sourceListreferenceList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Source size: <span class="token interpolation"><span class="token delimiter variable">${</span>sourceList<span class="token punctuation">.</span>size<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Source size: 4</span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>对于遍历集合元素，Kotlin标准库支持常用的迭代器机制 - 对象提供顺序访问元素而不暴露集合的底层结构。 当您需要逐个处理集合的所有元素（例如，打印值或对它们进行类似更新）时，迭代器非常有用。</p><p>通过调用<code>iterator()</code>函数，可以获取<code>Iterable &lt;T&gt;</code>接口的继承者的迭代器，包括<code>Set</code>和<code>List</code>。 获得迭代器后，它指向集合的第一个元素; 调用<code>next()</code>函数返回此元素并将迭代器位置移动到以下元素（如果存在）。 一旦迭代器通过最后一个元素，它就不能再用于检索元素; 也不能将其重置为任何先前的位置。 要再次遍历集合，请创建一个新的迭代器。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span><span class="token keyword">val</span> numbersIterator <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>numbersIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>numbersIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/*    one    two    three    four    */</span><span class="token punctuation">}</span></code></pre><p>另一种通过Iterable集合的方法是众所周知的for循环。 在集合上使用for时，将隐式获取迭代器。 因此，以下代码等同于上面的示例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>有一个有用的forEach（）函数，它允许您自动迭代集合并为每个元素执行给定的代码。 </p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span>numbers<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="List-迭代器"><a href="#List-迭代器" class="headerlink" title="List 迭代器"></a>List 迭代器</h3><p>对于列表，有一个特殊的迭代器实现：<code>ListIterator</code>。 它支持在两个方向上迭代列表：前向和后向。向后迭代由函数<code>hasPrevious()</code>和<code>previous()</code>实现。 此外，<code>ListIterator</code>使用函数<code>nextIndex()</code>和<code>previousIndex()</code>提供有关元素索引的信息。</p><p>能够在两个方向上进行迭代，意味着ListIterator在到达最后一个元素后仍然可以使用。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span><span class="token keyword">val</span> listIterator <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> listIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Iterating backwards:"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Index: <span class="token interpolation"><span class="token delimiter variable">${</span>listIterator<span class="token punctuation">.</span><span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">", value: <span class="token interpolation"><span class="token delimiter variable">${</span>listIterator<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>Iterating backwards:Index: 3, value: fourIndex: 2, value: threeIndex: 1, value: twoIndex: 0, value: one</code></pre><h3 id="可变迭代器MutableIterator"><a href="#可变迭代器MutableIterator" class="headerlink" title="可变迭代器MutableIterator"></a>可变迭代器MutableIterator</h3><p>对于<code>MutableIterator</code>而言，<code>MutableIterator</code>使用元素移除函数remove（）扩展Iterator。 因此，您可以在迭代时从集合中删除元素。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> mutableIterator <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mutableIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mutableIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After removal: <span class="token interpolation variable">$numbers</span>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//After removal: [two, three, four]</span></code></pre><p>除了删除元素之外，<code>MutableListIterator</code>还可以在迭代列表时插入和替换元素。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> mutableListIterator <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mutableListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mutableListIterator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span>mutableListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mutableListIterator<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span>   <span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[one, two, three, four]</span></code></pre><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>序列提供与Iterable相同的功能，但实现了多步骤收集处理的另一种方法。</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><h4 id="sequenceOf函数"><a href="#sequenceOf函数" class="headerlink" title="sequenceOf函数"></a><code>sequenceOf</code>函数</h4><p>调用<code>sequenceOf</code>函数，将元素列为其参数。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbersSequence <span class="token operator">=</span> <span class="token function">sequenceOf</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span></code></pre><h4 id="Iterable-asSequence"><a href="#Iterable-asSequence" class="headerlink" title="Iterable.asSequence()"></a><code>Iterable.asSequence()</code></h4><p>如果已经有了<code>Iterable</code>对象(such as a <code>List</code> or a <code>Set</code>),可以通过<code>asSequence()</code>创建</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span><span class="token keyword">val</span> numbersSequence <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">asSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="函数generateSequence"><a href="#函数generateSequence" class="headerlink" title="函数generateSequence()"></a>函数<code>generateSequence()</code></h4><p>函数作为参数调用<code>generateSequence()</code>。您可以将第一个元素指定为显式值或函数调用的结果。 当提供的函数返回null时，序列生成停止。 因此，下面示例中的序列是无限的。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> oddNumbers <span class="token operator">=</span> <span class="token function">generateSequence</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> it <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// `it` is the previous element</span><span class="token function">println</span><span class="token punctuation">(</span>oddNumbers<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//println(oddNumbers.count())     // error: the sequence is infinite</span></code></pre><h3 id="Iterable和Sequence的区别"><a href="#Iterable和Sequence的区别" class="headerlink" title="Iterable和Sequence的区别"></a>Iterable和Sequence的区别</h3><h4 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h4><p>假设您有一个单词列表。 下面的代码过滤超过三个字符的单词，并打印前四个这样的单词的长度。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> words <span class="token operator">=</span> <span class="token string">"The quick brown fox jumps over the lazy dog"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">val</span> lengthsList <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter: <span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"length: <span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span>length<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token punctuation">.</span>length <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lengths of first 4 words longer than 3 chars:"</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>lengthsList<span class="token punctuation">)</span></code></pre><p>结果：</p><p>filter: The<br>filter: quick<br>filter: brown<br>filter: fox<br>filter: jumps<br>filter: over<br>filter: the<br>filter: lazy<br>filter: dog<br>length: 5<br>length: 5<br>length: 5<br>length: 4<br>length: 4<br>Lengths of first 4 words longer than 3 chars:<br>[5, 5, 5, 4]</p><p>filter（）和map（）函数的执行顺序与它们在代码中显示的顺序相同。 首先，您会看到filter：所有元素，然后是length：过滤后剩余的元素，然后是最后两行的输出。 这是列表处理的方式：</p><p><img src="https://www.kotlincn.net/assets/images/reference/sequences/list-processing.png" alt=""></p><h4 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> words <span class="token operator">=</span> <span class="token string">"The quick brown fox jumps over the lazy dog"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//convert the List to a Sequence</span><span class="token keyword">val</span> wordsSequence <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">asSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> lengthsSequence <span class="token operator">=</span> wordsSequence<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter: <span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"length: <span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span>length<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token punctuation">.</span>length <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lengths of first 4 words longer than 3 chars"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// terminal operation: obtaining the result as a List</span><span class="token function">println</span><span class="token punctuation">(</span>lengthsSequence<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Lengths of first 4 words longer than 3 chars<br>filter: The<br>filter: quick<br>length: 5<br>filter: brown<br>length: 5<br>filter: fox<br>filter: jumps<br>length: 5<br>filter: over<br>length: 4<br>[5, 5, 5, 4]</p><p>输出显示仅在构建结果列表时调用filter（）和map（）函数。 因此，您首先看到文本行“Lengths of ..”然后开始序列处理。 请注意，对于filter后留下的元素，map在filter下一个元素之前执行。 当结果大小达到4时，处理停止，因为它是（4）可以返回的最大可能大小。</p><p>序列处理如下：</p><p><img src="https://www.kotlincn.net/assets/images/reference/sequences/sequence-processing.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>带你初识kotlin（四）</title>
      <link href="/2019/05/31/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86kotlin-%E5%9B%9B/"/>
      <url>/2019/05/31/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86kotlin-%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<p>这一节主要学习高阶函数及其涉及到的一系列函数</p><h3 id="头等函数"><a href="#头等函数" class="headerlink" title="头等函数"></a>头等函数</h3><p><strong>头等函数</strong>（first-class function）是指在<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">程序设计语言</a>中，函数被当作<a href="https://zh.wikipedia.org/wiki/%E5%A4%B4%E7%AD%89%E5%85%AC%E6%B0%91" target="_blank" rel="noopener">头等公民</a>。这意味着，函数可以作为别的函数的参数、函数的返回值，赋值给变量或存储在数据结构中。 Kotlin 函数都是<a href="https://zh.wikipedia.org/wiki/%E5%A4%B4%E7%AD%89%E5%87%BD%E6%95%B0" target="_blank" rel="noopener"><em>头等的</em></a>，这意味着它们可以存储在变量与数据结构中、作为参数传递给其他<a href="https://www.kotlincn.net/docs/reference/lambdas.html#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">高阶函数</a>以及从其他高阶函数返回。可以像操作任何其他非函数值一样操作函数。</p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数是将函数用作参数或返回值的函数。</p><p>比如集合的[函数式风格的 <code>fold</code>， 它接受一个初始累积值与一个接合函数，并通过将当前累积值与每个集合元素连续接合起来代入累积值来构建返回值，<code>fold</code>高阶函数定义如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> Collection<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>    initial<span class="token operator">:</span> R<span class="token punctuation">,</span>     combine<span class="token operator">:</span> <span class="token punctuation">(</span>acc<span class="token operator">:</span> R<span class="token punctuation">,</span> nextElement<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token punctuation">{</span>    <span class="token keyword">var</span> accumulator<span class="token operator">:</span> R <span class="token operator">=</span> initial    <span class="token keyword">for</span> <span class="token punctuation">(</span>element<span class="token operator">:</span> T <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        accumulator <span class="token operator">=</span> <span class="token function">combine</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> element<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> accumulator<span class="token punctuation">}</span></code></pre><p>在上述代码中，参数 <code>combine</code> 具有函数类型(R, T) -&gt; R<code>，因此</code>fold<code>接受一个函数作为参数， 该函数接受类型分别为</code>R<code>与</code>T<code>的两个参数并返回一个</code>R<code>类型的值。 在 *for*-循环内部调用该函数，然后将其返回值赋值给</code>accumulator<code>。为了调用</code>fold`，需要传给它一个函数类型的实例作为参数，而在高阶函数调用处，lambda 表达 式广泛用于此目的。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> items <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Lambdas 表达式是花括号括起来的代码块。</span>items<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 如果一个 lambda 表达式有参数，前面是参数，后跟“->”</span>    acc<span class="token operator">:</span> Int<span class="token punctuation">,</span> i<span class="token operator">:</span> Int <span class="token operator">-></span>         <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"acc = <span class="token interpolation variable">$acc</span>, i = <span class="token interpolation variable">$i</span>, "</span><span class="token punctuation">)</span>     <span class="token keyword">val</span> result <span class="token operator">=</span> acc <span class="token operator">+</span> i    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = <span class="token interpolation variable">$result</span>"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// lambda 表达式中的最后一个表达式是返回值：</span>    result<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// lambda 表达式的参数类型是可选的，如果能够推断出来的话：</span><span class="token keyword">val</span> joinedToString <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token string">"Elements:"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> acc<span class="token punctuation">,</span> i <span class="token operator">-></span> acc <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 函数引用也可以用于高阶函数调用：</span><span class="token keyword">val</span> product <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Int<span class="token operator">::</span>times<span class="token punctuation">)</span></code></pre><p>执行结果：</p><pre><code>acc = 0, i = 1, result = 1acc = 1, i = 2, result = 3acc = 3, i = 3, result = 6acc = 6, i = 4, result = 10acc = 10, i = 5, result = 15joinedToString = Elements: 1 2 3 4 5product = 120</code></pre><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>Kotlin 使用类似 <code>(Int) -&gt; String</code> 的一系列函数类型来处理函数的声明： <code>val onClick: () -&gt; Unit = ……</code>。</p><p>这些类型具有与函数签名相对应的特殊表示法，即它们的参数和返回值：</p><ol><li>所有函数类型都有一个圆括号括起来的参数类型列表以及一个返回类型：<code>(A, B) -&gt; C</code> 表示接受类型分别为 <code>A</code> 与 <code>B</code> 两个参数并返回一个 <code>C</code> 类型值的函数类型。 参数类型列表可以为空，如 <code>() -&gt; A</code>。<a href="https://www.kotlincn.net/docs/reference/functions.html#%E8%BF%94%E5%9B%9E-unit-%E7%9A%84%E5%87%BD%E6%95%B0" target="_blank" rel="noopener"><code>Unit</code> 返回类型</a>不可省略。</li><li>函数类型可以有一个额外的<em>接收者</em>类型，它在表示法中的点之前指定： 类型 <code>A.(B) -&gt; C</code> 表示可以在 <code>A</code> 的接收者对象上以一个 <code>B</code> 类型参数来调用并返回一个 <code>C</code> 类型值的函数。 <a href="https://www.kotlincn.net/docs/reference/lambdas.html#%E5%B8%A6%E6%9C%89%E6%8E%A5%E6%94%B6%E8%80%85%E7%9A%84%E5%87%BD%E6%95%B0%E5%AD%97%E9%9D%A2%E5%80%BC" target="_blank" rel="noopener">带有接收者的函数字面值</a>通常与这些类型一起使用。</li><li><a href="https://www.kotlincn.net/docs/reference/coroutines.html#%E6%8C%82%E8%B5%B7%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">挂起函数</a>属于特殊种类的函数类型，它的表示法中有一个 <em>suspend</em> 修饰符 ，例如 <code>suspend () -&gt; Unit</code> 或者 <code>suspend A.(B) -&gt; C</code>。</li></ol><p>函数类型表示法可以选择性地包含函数的参数名：<code>(x: Int, y: Int) -&gt; Point</code>。 这些名称可用于表明参数的含义。</p><h3 id="函数类型的实例化"><a href="#函数类型的实例化" class="headerlink" title="函数类型的实例化"></a>函数类型的实例化</h3><p>获得函数类型的实例有以下几种方法：</p><ol><li><p>使用函数字面值的代码块</p><p>lambda表达式：<code>{ a, b -&gt; a + b }</code></p><p>匿名函数： <code>fun(s: String): Int { return s.toIntOrNull() ?: 0 }</code></p></li><li><p>使用已有声明的可调用引用</p><p>顶层、局部、成员、扩展函数：<code>::isOdd</code>、 <code>String::toInt</code>，</p><p>顶层、成员、扩展属性：<code>List&lt;Int&gt;::size</code>，</p><p>构造函数：<code>::Regex</code></p></li><li><p>使用实现函数类型接口的自定义类的实例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> IntTransformer<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-></span> Int <span class="token punctuation">{</span>    <span class="token keyword">override</span> operator <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">val</span> intFunction<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-></span> Int <span class="token operator">=</span> <span class="token function">IntTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol><h3 id="函数类型实例调用"><a href="#函数类型实例调用" class="headerlink" title="函数类型实例调用"></a>函数类型实例调用</h3><p>函数类型的值可以通过其 <a href="https://www.kotlincn.net/docs/reference/operator-overloading.html#invoke" target="_blank" rel="noopener"><code>invoke(……)</code> 操作符</a>调用：<code>f.invoke(x)</code> 或者直接 <code>f(x)</code>。</p><p>如果该值具有接收者类型，那么应该将接收者对象作为第一个参数传递。 调用带有接收者的函数类型值的另一个方式是在其前面加上接收者对象， 就好比该值是一个<a href="https://www.kotlincn.net/docs/reference/extensions.html" target="_blank" rel="noopener">扩展函数</a>：<code>1.foo(2)</code>，</p><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> stringPlus<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> String<span class="token punctuation">)</span> <span class="token operator">-></span> String <span class="token operator">=</span> String<span class="token operator">::</span>plus<span class="token keyword">val</span> intPlus<span class="token operator">:</span> Int<span class="token punctuation">.</span><span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-></span> Int <span class="token operator">=</span> Int<span class="token operator">::</span>plus<span class="token function">println</span><span class="token punctuation">(</span>stringPlus<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">"&lt;-"</span><span class="token punctuation">,</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">stringPlus</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span><span class="token punctuation">,</span> <span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span>intPlus<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">intPlus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token function">intPlus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 类扩展调用</span></code></pre><p>运行结果：</p><pre><code>&lt;--&gt;Hello, world!235</code></pre><h3 id="Lambda-表达式与匿名函数"><a href="#Lambda-表达式与匿名函数" class="headerlink" title="Lambda 表达式与匿名函数"></a>Lambda 表达式与匿名函数</h3><h4 id="Lambda-表达式语法"><a href="#Lambda-表达式语法" class="headerlink" title="Lambda 表达式语法"></a>Lambda 表达式语法</h4><p>Lambda 表达式的完整语法形式如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> sum <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int <span class="token operator">-></span> x <span class="token operator">+</span> y <span class="token punctuation">}</span></code></pre><p>lambda 表达式总是括在花括号中， 完整语法形式的参数声明放在花括号内，并有可选的类型标注， 函数体跟在一个 <code>-&gt;</code> 符号之后。如果推断出的该 lambda 的返回类型不是 <code>Unit</code>，那么该 lambda 主体中的最后一个（或可能是单个）表达式会视为返回值</p><p>如果我们把所有可选标注都留下，看起来如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> sum<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-></span> Int <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token operator">-></span> x <span class="token operator">+</span> y <span class="token punctuation">}</span></code></pre><p>当一个 lambda 表达式只有一个参数时，如果编译器自己可以识别出签名，也可以不用声明唯一的参数并忽略 <code>-&gt;</code>。 该参数会隐式声明为 <code>it</code>：</p><pre class=" language-kotlin"><code class="language-kotlin">ints<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 这个字面值是“(it: Int) -> Boolean”类型的</span></code></pre><p>如果 lambda 表达式的参数未使用，那么可以用下划线取代其名称：</p><pre class=" language-kotlin"><code class="language-kotlin">map<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> _<span class="token punctuation">,</span> value <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$value</span>!"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>上面提供的 lambda 表达式语法缺少的一个东西是指定函数的返回类型的能力。在大多数情况下，这是不必要的。因为返回类型可以自动推断出来。然而，如果确实需要显式指定，可以使用另一种语法： <em>匿名函数</em> 。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> x <span class="token operator">+</span> y</code></pre><p>匿名函数看起来非常像一个常规函数声明，除了其名称省略了。其函数体可以是表达式（如上所示）或代码块：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><p>参数和返回类型的指定方式与常规函数相同，除了能够从上下文推断出的参数类型可以省略：</p><pre class=" language-kotlin"><code class="language-kotlin">ints<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">fun</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span> item <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>匿名函数的返回类型推断机制与正常函数一样：对于具有表达式函数体的匿名函数将自动推断返回类型，而具有代码块函数体的返回类型必须显式指定（或者已假定为 <code>Unit</code>）。</p><p>请注意，匿名函数参数总是在括号内传递。 允许将函数留在圆括号外的简写语法仅适用于 lambda 表达式。</p><p>Lambda表达式与匿名函数之间的另一个区别是<a href="https://www.kotlincn.net/docs/reference/inline-functions.html#%E9%9D%9E%E5%B1%80%E9%83%A8%E8%BF%94%E5%9B%9E" target="_blank" rel="noopener">非局部返回</a>的行为。一个不带标签的 <em>return</em> 语句总是在用 <em>fun</em> 关键字声明的函数中返回。这意味着 lambda 表达式中的 <em>return</em> 将从包含它的函数返回，而匿名函数中的 <em>return</em> 将从匿名函数自身返回。</p>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Groovy快速入门指南</title>
      <link href="/2019/05/29/Groovy%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/05/29/Groovy%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/Kanghanbin/Kanghanbin.github.io/blob/master/2019/05/29/Groovy%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/1.jpg?raw=true"></p><h3 id="1-Groovy概述"><a href="#1-Groovy概述" class="headerlink" title="1.Groovy概述"></a><strong>1.Groovy概述</strong></h3><p>Groovy是Apache 旗下的一种基于JVM的面向对象编程语言，既可以用于面向对象编程，也可以用作纯粹的脚本语言。在语言的设计上它吸纳了Python、Ruby 和 Smalltalk 语言的优秀特性，比如动态类型转换、闭包和元编程支持。<br>Groovy与 Java可以很好的互相调用并结合编程 ，比如在写 Groovy 的时候忘记了语法可以直接按Java的语法继续写，也可以在 Java 中调用 Groovy 脚本。比起Java，Groovy语法更加的灵活和简洁，可以用更少的代码来实现Java实现的同样功能。</p><h3 id="2-Groovy编写和调试"><a href="#2-Groovy编写和调试" class="headerlink" title="2.Groovy编写和调试"></a><strong>2.Groovy编写和调试</strong></h3><p>Groovy的代码可以在Android Studio和IntelliJ IDEA等IDE中进行编写和调试，缺点是需要配置环境，这里推荐在文本中编写代码并结合命令行进行调试（文本推荐使用Sublime Text）。<br>具体的操作步骤就是：在一个目录中新建build.gradle文件，在build.gradle中新建一个task，在task中编写Groovy代码，用命令行进入这个build.gradle文件所在的目录，运行gradle task名称 等命令行对代码进行调试，本文中的例子都是这样编写和调试的。</p><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a><strong>3.变量</strong></h3><p>Groovy中用def关键字来定义变量，可以不指定变量的类型，默认访问修饰符是public。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">def</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">def</span> c <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span></code></pre><h3 id="4-方法"><a href="#4-方法" class="headerlink" title="4.方法"></a><strong>4.方法</strong></h3><p>方法使用返回类型或def关键字定义，方法可以接收任意数量的参数，这些参数可以不申明类型，如果不提供可见性修饰符，则该方法为public。<br>用def关键字定义方法。</p><pre class=" language-groovy"><code class="language-groovy">task method <span class="token operator">&lt;&lt;</span><span class="token punctuation">{</span>    <span class="token function">add</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    minus <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token comment" spellcheck="true">//1</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  println a<span class="token operator">+</span>b <span class="token comment" spellcheck="true">//3</span><span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token function">minus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//2 </span> println a<span class="token operator">-</span>b<span class="token punctuation">}</span></code></pre><p>如果指定了方法返回类型，可以不需要def关键字来定义方法。</p><pre class=" language-groovy"><code class="language-groovy">task method <span class="token operator">&lt;&lt;</span><span class="token punctuation">{</span>    <span class="token keyword">def</span> number<span class="token operator">=</span>minus <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>    println number<span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">minus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> a<span class="token operator">-</span>b <span class="token punctuation">}</span></code></pre><p>如果不使用return ，方法的返回值为最后一行代码的执行结果。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">int</span> <span class="token function">minus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>   a<span class="token operator">-</span>b <span class="token comment" spellcheck="true">//4</span><span class="token punctuation">}</span></code></pre><p>从上面两段代码中可以发现Groovy中有很多省略的地方：</p><ol><li>语句后面的分号可以省略。</li><li>方法的括号可以省略，比如注释1和注释3处。</li><li>参数类型可以省略，比如注释2处。</li><li>return可以省略掉，比如注释4处。</li></ol><h3 id="5-类"><a href="#5-类" class="headerlink" title="5.类"></a><strong>5.类</strong></h3><p>Groovy类非常类似于Java类。</p><pre class=" language-groovy"><code class="language-groovy">task method <span class="token operator">&lt;&lt;</span><span class="token punctuation">{</span>    <span class="token keyword">def</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token operator">.</span>increaseAge <span class="token number">5</span>    println p<span class="token operator">.</span>age<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>                           String name                          Integer age <span class="token operator">=</span><span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">increaseAge</span><span class="token punctuation">(</span>Integer years<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token operator">.</span>age <span class="token operator">+=</span> years    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行 gradle method打印结果为：<br>15</p><p>Groovy类与Java类有以下的区别：</p><ol><li>默认类的修饰符为public。</li><li>没有可见性修饰符的字段会自动生成对应的setter和getter方法。</li><li>类不需要与它的源文件有相同的名称，但还是建议采用相同的名称。</li></ol><h3 id="6-语句"><a href="#6-语句" class="headerlink" title="6.语句"></a><strong>6.语句</strong></h3><h4 id="6-1-断言"><a href="#6-1-断言" class="headerlink" title="6.1 断言"></a><strong>6.1 断言</strong></h4><p>Groovy断言和Java断言不同，它一直处于开启状态，是进行单元测试的首选方式。</p><pre class=" language-groovy"><code class="language-groovy">task method <span class="token operator">&lt;&lt;</span><span class="token punctuation">{</span>  <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre class=" language-groovy"><code class="language-groovy">Execution failed <span class="token keyword">for</span> task <span class="token string">':method'</span><span class="token operator">.</span><span class="token operator">></span> <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">6</span>          <span class="token operator">|</span>  <span class="token operator">|</span>          <span class="token number">3</span>  <span class="token boolean">false</span></code></pre><p>当断言的条件为false时，程序会抛出异常，不再执行下面的代码，从输出可以很清晰的看到发生错误的地方。</p><h4 id="6-2-for循环"><a href="#6-2-for循环" class="headerlink" title="6.2 for循环"></a><strong>6.2 for循环</strong></h4><p>Groovy支持Java的<code>for(int i=0;i&lt;N;i++)</code>和<code>for(int i :array)</code>形式的循环语句，另外还支持for in loop形式，支持遍历范围、列表、Map、数组和字符串等多种类型。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//遍历范围</span><span class="token keyword">def</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">3</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">+=</span> i<span class="token punctuation">}</span><span class="token keyword">assert</span> x <span class="token operator">==</span> <span class="token number">6</span><span class="token comment" spellcheck="true">//遍历列表</span><span class="token keyword">def</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">+=</span> i<span class="token punctuation">}</span><span class="token keyword">assert</span> x <span class="token operator">==</span> <span class="token number">6</span><span class="token comment" spellcheck="true">//遍历Map中的值</span><span class="token keyword">def</span> map <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span> v <span class="token keyword">in</span> map<span class="token operator">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">+=</span> v<span class="token punctuation">}</span><span class="token keyword">assert</span> x <span class="token operator">==</span> <span class="token number">6</span></code></pre><h4 id="6-3-switch语句"><a href="#6-3-switch语句" class="headerlink" title="6.3 switch语句"></a><strong>6.3 switch语句</strong></h4><p>Groovy中的Switch语句不仅兼容Java代码，还可以处理更多类型的case表达式。</p><pre class=" language-groovy"><code class="language-groovy">task method <span class="token operator">&lt;&lt;</span><span class="token punctuation">{</span><span class="token keyword">def</span> x <span class="token operator">=</span> <span class="token number">16</span><span class="token keyword">def</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">switch</span> <span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"ok"</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token string">"found ok"</span>    <span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token string">"list"</span>        <span class="token keyword">break</span>    <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">..</span><span class="token number">19</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token string">"range"</span>        <span class="token keyword">break</span>    <span class="token keyword">case</span> Integer<span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token string">"integer"</span>        <span class="token keyword">break</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token string">"default"</span><span class="token punctuation">}</span><span class="token keyword">assert</span> result <span class="token operator">==</span> <span class="token string">"range"</span><span class="token punctuation">}</span></code></pre><p>case表达式可以是字符串、列表、范围、Integer等等，因为篇幅原因，这里只列出了一小部分。</p><h3 id="7-数据类型"><a href="#7-数据类型" class="headerlink" title="7. 数据类型"></a><strong>7. 数据类型</strong></h3><p>Groovy中的数据类型主要有以下几种：</p><ul><li>Java中的基本数据类型</li><li>Groovy中的容器类</li><li>闭包</li></ul><h4 id="7-1-字符串"><a href="#7-1-字符串" class="headerlink" title="7.1 字符串"></a><strong>7.1 字符串</strong></h4><p>Groovy中的基本数据类型和Java大同小异，这里主要介绍下字符串类型。在Groovy种有两种字符串类型，普通字符串String（java.lang.String）和插值字符串GString（groovy.lang.GString）。</p><p><strong>单引号字符串</strong><br>在Groovy中单引号字符串和双引号字符串都可以定义一个字符串常量，只不过单引号字符串不支持插值。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token string">'Android进阶解密'</span></code></pre><p><strong>双引号字符串</strong><br>要想插值可以使用双引号字符串，插值指的是替换字符串中的占位符，占位符表达式为<code>${}</code>或者以<code>$</code>为前缀。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> name <span class="token operator">=</span> <span class="token string">'Android进阶之光'</span>println <span class="token string">"hello ${name}"</span>println <span class="token string">"hello $name"</span></code></pre><p><strong>三引号字符串</strong><br>三引号字符串可以保留文本的换行和缩进格式，不支持插值。</p><pre class=" language-groovy"><code class="language-groovy">task method <span class="token operator">&lt;&lt;</span><span class="token punctuation">{</span><span class="token keyword">def</span> name <span class="token operator">=</span> <span class="token string">'''Android进阶之光       Android进阶解密Android进阶？'''</span>println name <span class="token punctuation">}</span></code></pre><p>打印结果为：</p><pre><code>Android进阶之光       Android进阶解密Android进阶？</code></pre><p><strong>GString</strong><br>String是不可变的，GString却是可变的，GString和String即使有相同的字面量，它们的hashCodes的值也可能不同，因此应该避免使用使用GString作为Map的key。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">assert</span> <span class="token string">"one: ${1}"</span><span class="token operator">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"one: 1"</span><span class="token operator">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>当双引号字符串中包含插值表达式时，字符串类型为GString，因此上面的断言为true。</p><h4 id="7-2-List"><a href="#7-2-List" class="headerlink" title="7.2 List"></a><strong>7.2 List</strong></h4><p>Groovy没有定义自己的集合类，它在Java集合类的基础上进行了增强和简化。Groovy的List对应Java中的List接口，默认的实现类为Java中的ArrayList。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>         <span class="token keyword">assert</span> number <span class="token keyword">instanceof</span> <span class="token class-name">List</span>  <span class="token keyword">def</span> linkedList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">as</span> LinkedList    <span class="token keyword">assert</span> linkedList <span class="token keyword">instanceof</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList</span></code></pre><p>可以使用as操作符来显式指定List的实现类为java.util.LinkedList。<br>获取元素同样要比Java要简洁些，使用<code>[]</code>来获取List中具有正索引或负索引的元素。</p><pre class=" language-groovy"><code class="language-groovy">task method <span class="token operator">&lt;&lt;</span><span class="token punctuation">{</span><span class="token keyword">def</span> number  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>   <span class="token keyword">assert</span> number <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token keyword">assert</span> number <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token comment" spellcheck="true">//1  </span>number <span class="token operator">&lt;&lt;</span> <span class="token number">5</span>     <span class="token comment" spellcheck="true">//2             </span><span class="token keyword">assert</span> number <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token keyword">assert</span> number <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">}</span></code></pre><p>注释1处的索引-1是列表末尾的第一个元素。注释2处使用<code>&lt;&lt;</code>运算符在列表末尾追加一个元素。</p><h4 id="7-3-Map"><a href="#7-3-Map" class="headerlink" title="7.3 Map"></a><strong>7.3 Map</strong></h4><p>创建Map同样使用<code>[]</code>，需要同时指定键和值，默认的实现类为java.util.LinkedHashMap。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> name <span class="token operator">=</span> <span class="token punctuation">[</span>one<span class="token punctuation">:</span> <span class="token string">'魏无羡'</span><span class="token punctuation">,</span> two<span class="token punctuation">:</span> <span class="token string">'杨影枫'</span><span class="token punctuation">,</span> three<span class="token punctuation">:</span> <span class="token string">'张无忌'</span><span class="token punctuation">]</span>   <span class="token keyword">assert</span> name<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span>  <span class="token operator">==</span> <span class="token string">'魏无羡'</span> <span class="token keyword">assert</span> name<span class="token operator">.</span>two  <span class="token operator">==</span> <span class="token string">'杨影枫'</span></code></pre><p>Map还有一个键关联的问题：</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> key <span class="token operator">=</span> <span class="token string">'name'</span><span class="token keyword">def</span> person <span class="token operator">=</span> <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token string">'魏无羡'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//1</span><span class="token keyword">assert</span> person<span class="token operator">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span> person <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">'魏无羡'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//2       </span><span class="token keyword">assert</span> person<span class="token operator">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span></code></pre><p>注释1处魏无羡的键值是key这个字符串，而不是key变量的值 name。如果想要以key变量的值为键值，需要像注释2处一样使用(key)，用来告诉解析器我们传递的是一个变量，而不是定义一个字符串键值。</p><h4 id="7-4-闭包（Closure）"><a href="#7-4-闭包（Closure）" class="headerlink" title="7.4 闭包（Closure）"></a><strong>7.4 闭包（Closure）</strong></h4><p>Groovy中的闭包是一个开放的、匿名的、可以接受参数和返回值的代码块。<br><strong>定义闭包</strong><br>闭包的定义遵循以下语法：</p><pre class=" language-groovy"><code class="language-groovy"><span class="token punctuation">{</span> <span class="token punctuation">[</span>closureParameters <span class="token operator">-></span> <span class="token punctuation">]</span> statements <span class="token punctuation">}</span></code></pre><p>闭包分为两个部分，分别是参数列表部分<code>[closureParameters -&gt; ]</code>和语句部分 statements 。<br>参数列表部分是可选的，如果闭包只有一个参数，参数名是可选的，Groovy会隐式指定it作为参数名，如下所示。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token punctuation">{</span> println it <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//使用隐式参数it的闭包</span></code></pre><p>当需要指定参数列表时，需要<code>-&gt;</code>将参数列表和闭包体相分离。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token punctuation">{</span> it <span class="token operator">-></span> println it <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//it是一个显示参数 </span><span class="token punctuation">{</span> String a<span class="token punctuation">,</span> String b <span class="token operator">-></span>                                    println <span class="token string">"${a} is a ${b}"</span><span class="token punctuation">}</span></code></pre><p>闭包是groovy.lang.Cloush类的一个实例，这使得闭包可以赋值给变量或字段，如下所示。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//将闭包赋值给一个变量</span><span class="token keyword">def</span> println <span class="token operator">=</span><span class="token punctuation">{</span> it <span class="token operator">-></span> println it <span class="token punctuation">}</span>     <span class="token keyword">assert</span> println <span class="token keyword">instanceof</span> <span class="token class-name">Closure</span><span class="token comment" spellcheck="true">//将闭包赋值给Closure类型变量</span>Closure <span class="token keyword">do</span><span class="token operator">=</span> <span class="token punctuation">{</span> println <span class="token string">'do!'</span> <span class="token punctuation">}</span></code></pre><p><strong>调用闭包</strong><br>闭包既可以当做方法来调用，也可以显示调用call方法。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> code <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token keyword">assert</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//闭包当做方法调用</span><span class="token keyword">assert</span> code<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//显示调用call方法</span><span class="token keyword">def</span> isOddNumber <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> i <span class="token operator">-></span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">}</span>                           <span class="token keyword">assert</span> <span class="token function">isOddNumber</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">//调用带参数的闭包</span></code></pre><h3 id="8-I-O-操作"><a href="#8-I-O-操作" class="headerlink" title="8. I/O 操作"></a><strong>8. I/O 操作</strong></h3><p>Groovy的 I/O 操作要比Java的更为的简洁。</p><h4 id="8-1-文件读取"><a href="#8-1-文件读取" class="headerlink" title="8.1 文件读取"></a><strong>8.1 文件读取</strong></h4><p>我们可以在PC上新建一个name.txt，在里面输入一些内容，然后用Groovy来读取该文件的内容：</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> filePath <span class="token operator">=</span> <span class="token string">"D:/Android/name.txt"</span><span class="token keyword">def</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token punctuation">;</span>file<span class="token operator">.</span>eachLine <span class="token punctuation">{</span>    println it<span class="token punctuation">}</span></code></pre><p>可以看出Groovy的文件读取是很简洁的，还可以更简洁些：</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> filePath <span class="token operator">=</span> <span class="token string">"D:/Android/name.txt"</span><span class="token keyword">def</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token punctuation">;</span>println file<span class="token operator">.</span>text</code></pre><h4 id="8-2-文件写入"><a href="#8-2-文件写入" class="headerlink" title="8.2 文件写入"></a><strong>8.2 文件写入</strong></h4><p>文件写入同样十分简洁：</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> filePath <span class="token operator">=</span> <span class="token string">"D:/Android/name.txt"</span><span class="token keyword">def</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>file<span class="token operator">.</span>withPrintWriter <span class="token punctuation">{</span>    it<span class="token operator">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三井寿"</span><span class="token punctuation">)</span>    it<span class="token operator">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"仙道彰"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="9-其他"><a href="#9-其他" class="headerlink" title="9. 其他"></a><strong>9. 其他</strong></h3><h4 id="9-1-asType"><a href="#9-1-asType" class="headerlink" title="9.1 asType"></a><strong>9.1 asType</strong></h4><p>asType可以用于数据类型转换：</p><pre class=" language-groovy"><code class="language-groovy">String a <span class="token operator">=</span> <span class="token string">'23'</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token keyword">as</span> <span class="token keyword">int</span><span class="token keyword">def</span> c <span class="token operator">=</span> a<span class="token operator">.</span><span class="token function">asType</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token keyword">assert</span> c <span class="token keyword">instanceof</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer</span></code></pre><h4 id="9-2-判断是否为真"><a href="#9-2-判断是否为真" class="headerlink" title="9.2 判断是否为真"></a><strong>9.2 判断是否为真</strong></h4><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> name<span class="token operator">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>可以替换为</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="9-3-安全取值"><a href="#9-3-安全取值" class="headerlink" title="9.3 安全取值"></a><strong>9.3 安全取值</strong></h4><p>在Java中，要安全获取某个对象的值可能需要大量的if语句来判空：</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">if</span> <span class="token punctuation">(</span>school <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>school<span class="token operator">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>school<span class="token operator">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token operator">.</span>out<span class="token operator">.</span><span class="token function">println</span><span class="token punctuation">(</span>school<span class="token operator">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Groovy中可以使用<code>？.</code>来安全的取值：</p><pre class=" language-groovy"><code class="language-groovy">println school<span class="token operator">?.</span>student<span class="token operator">?.</span>name</code></pre><h4 id="9-4-with操作符"><a href="#9-4-with操作符" class="headerlink" title="9.4 with操作符"></a><strong>9.4 with操作符</strong></h4><p>对同一个对象的属性进行赋值时，可以这么做：</p><pre class=" language-groovy"><code class="language-groovy">task method <span class="token operator">&lt;&lt;</span><span class="token punctuation">{</span>Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">.</span>name <span class="token operator">=</span> <span class="token string">"杨影枫"</span>p<span class="token operator">.</span>age <span class="token operator">=</span> <span class="token number">19</span>p<span class="token operator">.</span>sex <span class="token operator">=</span> <span class="token string">"男"</span>println p<span class="token operator">.</span>name<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>                           String name                          Integer age    String sex<span class="token punctuation">}</span></code></pre><p>使用with来进行简化：</p><pre class=" language-groovy"><code class="language-groovy">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">.</span>with <span class="token punctuation">{</span>   name <span class="token operator">=</span> <span class="token string">"杨影枫"</span>   age<span class="token operator">=</span> <span class="token number">19</span>   sex<span class="token operator">=</span> <span class="token string">"男"</span> <span class="token punctuation">}</span>   println p<span class="token operator">.</span>name</code></pre><h3 id="10-总结"><a href="#10-总结" class="headerlink" title="10.总结"></a><strong>10.总结</strong></h3><p>本文大概的介绍了Groovy的一些语法，包括：变量、方法、数据类型等等，比起Groovy 官方文档来说，介绍的并不多，但不要忘了本系列的目标是学习与Android相关的Gradle，Groovy并不是重点，我们只需要了解本文所介绍的内容就够了，如果碰到哪里不会再去查找Groovy 官方文档和Groovy API文档。</p>]]></content>
      
      
      
        <tags>
            
            <tag> groovy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决Android Studio依赖库版本不一致的问题</title>
      <link href="/2019/05/08/%E8%A7%A3%E5%86%B3Android-Studio%E4%BE%9D%E8%B5%96%E5%BA%93%E7%89%88%E6%9C%AC%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/05/08/%E8%A7%A3%E5%86%B3Android-Studio%E4%BE%9D%E8%B5%96%E5%BA%93%E7%89%88%E6%9C%AC%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="强制指定第三方依赖库内部所依赖的库的版本号"><a href="#强制指定第三方依赖库内部所依赖的库的版本号" class="headerlink" title="强制指定第三方依赖库内部所依赖的库的版本号"></a>强制指定第三方依赖库内部所依赖的库的版本号</h2><h2 id="具体问题"><a href="#具体问题" class="headerlink" title="具体问题"></a>具体问题</h2><p>在项目开发和迭代过程中，我们不得不依赖越来越多的第三方库，有些是为了不重复造轮子，有些是要用别人的功能，比如依赖一些直播平台的库。依赖的库越多，就越容易造成依赖版本冲突的问题。在最近项目上线，空闲下来的时间，准备来解决之前一直没有顾得上解决的一个依赖问题，虽然能编译通过，总感觉有一条红色警告线看着不爽。</p><p>就是它…</p><p><img src="https://ws1.sinaimg.cn/large/a3888eecly1ftjxjqbop3j21q203u77w.jpg" alt="img"></p><p>根据提示，大概意思是说所有com.android.support库所依赖的版本号要一致，多个版本号可能会导致运行崩溃的问题。然后说我的exifinterface库所依赖的版本号是27.1.0，别的support库是用的27.1.1的版本号。</p><p>于是我就整个项目翻了个遍，没有发现我们在gradle配置中有依赖这个库，所以这个库应该是我们依赖的某个第三方库内部所依赖的库。但是要找到这个第三方库，却不是那么容易，于是乎google一下有没有别的解决方案。经过折腾，发现了一个可行的方案。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在项目对应module的gradle中配置如下代码：</p><pre class=" language-groovy"><code class="language-groovy">configurations<span class="token operator">.</span>all <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//循环每个依赖库</span>    resolutionStrategy<span class="token operator">.</span>eachDependency <span class="token punctuation">{</span> DependencyResolveDetails details <span class="token operator">-></span>        <span class="token comment" spellcheck="true">//获取当前循环到的依赖库</span>        <span class="token keyword">def</span> requested <span class="token operator">=</span> details<span class="token operator">.</span>requested        <span class="token comment" spellcheck="true">//如果这个依赖库群组的名字是com.android.support</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requested<span class="token operator">.</span>group <span class="token operator">==</span> <span class="token string">'com.android.support'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//且其名字不是以multidex开头的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requested<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"multidex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这里指定需要统一的依赖版本 比如我的需要配置成27.1.1</span>                details<span class="token operator">.</span>useVersion <span class="token string">'27.1.1'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置完如下代码以后，再同步一下，就完美解决了提示版本号不一致的问题。当然你也可以通过此方法指定某个第三方库中内部的某个依赖库强制依赖你指定的版本号，例如：</p><pre class=" language-groovy"><code class="language-groovy"><span class="token punctuation">...</span><span class="token keyword">if</span> <span class="token punctuation">(</span>requested<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"design"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里指定需要的依赖版本</span>        details<span class="token operator">.</span>useVersion <span class="token string">'27.1.0'</span>  <span class="token punctuation">}</span><span class="token punctuation">...</span></code></pre><p>不过不建议这么干，版本号修改后可能导致第三方库出现不兼容的问题。</p><p>另外想说的一点是：我们在自己编写库的时候，建议使用<strong>implementation</strong>来依赖第三方库，这样别人依赖我们的库时，不会依赖到我们内部依赖的第三方库。</p>]]></content>
      
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>两个recycleview同步滚动</title>
      <link href="/2019/04/16/%E4%B8%A4%E4%B8%AArecycleview%E5%90%8C%E6%AD%A5%E6%BB%9A%E5%8A%A8/"/>
      <url>/2019/04/16/%E4%B8%A4%E4%B8%AArecycleview%E5%90%8C%E6%AD%A5%E6%BB%9A%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>两个recycleview同步滚动网上solo的几种方法如下：</p><p><img src="2.gif" alt=""></p><h3 id="作者-Jorge-Antonio-Diaz-Benito"><a href="#作者-Jorge-Antonio-Diaz-Benito" class="headerlink" title="作者: Jorge Antonio Díaz-Benito"></a>作者: Jorge Antonio Díaz-Benito</h3><p>我相信你了解它的工作原理是相关的，所以我将解释我设计解决方案时所遵循的整个过程。请注意，此示例仅适用于两个RecyclerViews，但使用更多的RecyclerViews就像使用RecyclerViews数组一样简单。</p><p>想到的第一个选项是在两个ScrollViews上监听滚动更改，当其中一个滚动时，在另一个上使用<a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html#scrollBy(int,%20int" target="_blank" rel="noopener">scrollBy（int x，int y）</a>)。不幸的是，以编程方式滚动也会触发侦听器，因此您将最终处于循环中。</p><p>要解决此问题，您需要设置OnItemTouchListener，在触摸RecyclerView时添加正确的ScrollListener，并在滚动停止时将其删除。这几乎完美无缺，但是如果你在一个很长的RecyclerView中快速执行，然后在它完成之前再次滚动它，只会传输第一个滚动。</p><p>要解决此问题，您需要确保仅在RecyclerView空闲时添加OnScrollListener。</p><p>我们来看看来源：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfRemovingOnScrollListener</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>OnScrollListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">onScrollStateChanged</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrollStateChanged</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newState <span class="token operator">==</span> RecyclerView<span class="token punctuation">.</span>SCROLL_STATE_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            recyclerView<span class="token punctuation">.</span><span class="token function">removeOnScrollListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是您需要扩展OnScrollListeners的类。这可确保在需要时将其移除。</p><p>然后我有两个监听器，每个RecyclerView一个：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>OnScrollListener mLeftOSL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelfRemovingOnScrollListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrolled</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrolled</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRightRecyclerView<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mRightOSL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelfRemovingOnScrollListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrolled</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrolled</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        mLeftRecyclerView<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>然后在初始化时，您可以设置OnItemTouchListeners。最好为整个视图设置一个监听器，但RecyclerView不支持这个。OnItemTouchListeners无论如何都不会造成问题：</p><pre class=" language-java"><code class="language-java">    mLeftRecyclerView<span class="token punctuation">.</span><span class="token function">addOnItemTouchListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>OnItemTouchListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> mLastY<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> RecyclerView rv<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span>        MotionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">,</span> <span class="token string">"LEFT: onInterceptTouchEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Boolean ret <span class="token operator">=</span> rv<span class="token punctuation">.</span><span class="token function">getScrollState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RecyclerView<span class="token punctuation">.</span>SCROLL_STATE_IDLE<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>rv<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> RecyclerView rv<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> MotionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">,</span> <span class="token string">"LEFT: onTouchEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> action<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>action <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN <span class="token operator">&amp;&amp;</span> mRightRecyclerView                    <span class="token punctuation">.</span><span class="token function">getScrollState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RecyclerView<span class="token punctuation">.</span>SCROLL_STATE_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mLastY <span class="token operator">=</span> rv<span class="token punctuation">.</span><span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rv<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span>mLeftOSL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP <span class="token operator">&amp;&amp;</span> rv<span class="token punctuation">.</span><span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> mLastY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    rv<span class="token punctuation">.</span><span class="token function">removeOnScrollListener</span><span class="token punctuation">(</span>mLeftOSL<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestDisallowInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> disallowIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">,</span> <span class="token string">"LEFT: onRequestDisallowInterceptTouchEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mRightRecyclerView<span class="token punctuation">.</span><span class="token function">addOnItemTouchListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>OnItemTouchListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> mLastY<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> RecyclerView rv<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span>        MotionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">,</span> <span class="token string">"RIGHT: onInterceptTouchEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Boolean ret <span class="token operator">=</span> rv<span class="token punctuation">.</span><span class="token function">getScrollState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RecyclerView<span class="token punctuation">.</span>SCROLL_STATE_IDLE<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>rv<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> RecyclerView rv<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> MotionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">,</span> <span class="token string">"RIGHT: onTouchEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> action<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>action <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN <span class="token operator">&amp;&amp;</span> mLeftRecyclerView                    <span class="token punctuation">.</span><span class="token function">getScrollState</span>                            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RecyclerView<span class="token punctuation">.</span>SCROLL_STATE_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mLastY <span class="token operator">=</span> rv<span class="token punctuation">.</span><span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rv<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span>mRightOSL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP <span class="token operator">&amp;&amp;</span> rv<span class="token punctuation">.</span><span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> mLastY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    rv<span class="token punctuation">.</span><span class="token function">removeOnScrollListener</span><span class="token punctuation">(</span>mRightOSL<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestDisallowInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> disallowIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">,</span> <span class="token string">"RIGHT: onRequestDisallowInterceptTouchEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>另请注意，在我的特定情况下，RecyclerViews不是第一个接收触摸事件的人，所以我需要拦截它。如果不是这种情况，您可以（应该）将onInterceptTouchEvent（…）中的代码合并到onTouchEvent（…）中。</p><p>最后，如果您的用户尝试同时滚动两个RecyclerViews，这将导致崩溃。这里可能的最佳努力质量解决方案是<code>android:splitMotionEvents=&quot;false&quot;</code>在包含RecyclerViews的直接父级中进行设置。</p><p>您可以<a href="https://github.com/Stoyicker/RecyclerViewSyncDemo" target="_blank" rel="noopener">在此处</a>查看此代码的示例。</p><h3 id="作者-Koen-Van-Looveren"><a href="#作者-Koen-Van-Looveren" class="headerlink" title="作者: Koen Van Looveren"></a>作者: Koen Van Looveren</h3><p>我想我找到了一个非常容易和简短的答案。</p><p>正如JorgeAntonioDíaz-Benito所说：“第一个想到的选择是在ScrollViews上监听滚动更改，当其中一个滚动时，在另一个上使用scrollBy（int x，int y）。不幸的是，以编程方式滚动将也会触发听众，所以你最终会陷入一个循环。“</p><p>所以你需要解决这个问题。如果您只是跟踪谁在滚动它们将不会循环。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfScrolListener</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>OnScrollListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrollStateChanged</span><span class="token punctuation">(</span>RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">int</span> newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrollStateChanged</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newState <span class="token operator">==</span> RecyclerView<span class="token punctuation">.</span>SCROLL_STATE_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            viewIsScrolling <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是您自定义的OnScrollListener，用于检查scrollState是否为IDLE。这是真的 - &gt;没有人滚动。所以`int viewIsScolling = -1</p><p>现在您需要检测是否可以滚动。这是代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> viewIsScrolling <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> firstIsTouched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> secondIsTouched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>SelfScrolListener firstOSL<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelfScrolListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrolled</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrolled</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstIsTouched<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>viewIsScrolling <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 viewIsScrolling <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>viewIsScrolling <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 secondRecyclerView<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>SelfScrolListener secondOSL<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelfScrolListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrolled</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrolled</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>secondIsTouched<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>viewIsScrolling <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 viewIsScrolling <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>viewIsScrolling <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 firstRecyclerView<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>firstRecyclerView<span class="token punctuation">.</span><span class="token function">setOnTouchListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnTouchListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouch</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        firstIsTouched<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>secondRecyclerView<span class="token punctuation">.</span><span class="token function">setOnTouchListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnTouchListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouch</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        secondIsTouched<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>firstRecyclerView<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span>firstOSL<span class="token punctuation">)</span><span class="token punctuation">;</span>secondRecyclerView<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span>secondOSL<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>viewIsScrolling =一个全局int并在开头设置为-1; 没有人滚动的状态。您可以根据需要添加尽可能多的回收视图。</p><h3 id="作者：Aace"><a href="#作者：Aace" class="headerlink" title="作者：Aace"></a>作者：Aace</h3><p>这是我的解决方案。代码越少越好……</p><p>lvDetail和lvDetail2是您希望保持同步的RecyclerView。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>OnScrollListener<span class="token punctuation">[</span><span class="token punctuation">]</span> scrollListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>OnScrollListener</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    scrollListeners<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>OnScrollListener</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrolled</span><span class="token punctuation">(</span>RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrolled</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>            lvDetail2<span class="token punctuation">.</span><span class="token function">removeOnScrollListener</span><span class="token punctuation">(</span>scrollListeners<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lvDetail2<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>            lvDetail2<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span>scrollListeners<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    scrollListeners<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>OnScrollListener</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrolled</span><span class="token punctuation">(</span>RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrolled</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>            lvDetail<span class="token punctuation">.</span><span class="token function">removeOnScrollListener</span><span class="token punctuation">(</span>scrollListeners<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lvDetail<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>            lvDetail<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span>scrollListeners<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    lvDetail<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span>scrollListeners<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lvDetail2<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span>scrollListeners<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/main_bj<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/px_1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/c_line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/rl_table_title<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/dp_80<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/dp_35<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_table_title<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_centerInParent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小区号<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/c_33<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/sp_12<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/px_1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/c_line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/px_1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/c_line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.kanghanbin.mytable.MyHorizontalScrollView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/mhsc_row<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/dp_35<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>overScrollMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>never<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>scrollbars</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/rl_table_title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/ll_row_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.kanghanbin.mytable.MyHorizontalScrollView</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.RecyclerView</span>            <span class="token attr-name"><span class="token namespace">android:</span>scrollbars</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/lv_column<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/dp_80<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/rl_table_title<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>divider</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.v7.widget.RecyclerView</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.kanghanbin.mytable.MyHorizontalScrollView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/mhsc_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>overScrollMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>never<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/rl_table_title<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/lv_column<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.RecyclerView</span>                    <span class="token attr-name"><span class="token namespace">android:</span>scrollbars</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/lv_content<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>divider</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.v7.widget.RecyclerView</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.kanghanbin.mytable.MyHorizontalScrollView</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>刚开始用第一种方法，但是由于我的RecyclerView外面套了个HorizontalScrollView，所以在事件分发上会有问题，所以我用的是第三种方法实现了最终效果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>带你初识Kotlin(三)</title>
      <link href="/2019/04/12/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86Kotlin-%E4%B8%89/"/>
      <url>/2019/04/12/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86Kotlin-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><img src="1.jpg" alt=""></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用kotlin开发android应用，各种新鲜的语法糖层出不穷，真tm香，这篇博文主要记录一些需要重点注意的地方。</p><h3 id="记录点"><a href="#记录点" class="headerlink" title="记录点"></a>记录点</h3><h4 id="1-xxx调用了getXxx-setXxx方法"><a href="#1-xxx调用了getXxx-setXxx方法" class="headerlink" title="1.xxx调用了getXxx()/setXxx方法"></a>1.xxx调用了getXxx()/setXxx方法</h4><pre class=" language-kotlin"><code class="language-kotlin">toolbar <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span><span class="token function">setSupportActionBar</span><span class="token punctuation">(</span>toolbar<span class="token punctuation">)</span><span class="token keyword">val</span> actionBar <span class="token operator">=</span> supportActionBar</code></pre><p>在这里supportActionBar其实时调用了<code>AppCompatActivity</code>的<code>getSupportActionBar()</code>方法。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> decorView <span class="token operator">=</span> window<span class="token punctuation">.</span>decorViewdecorView<span class="token punctuation">.</span>systemUiVisibility <span class="token operator">=</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN <span class="token operator">or</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_STABLEwindow<span class="token punctuation">.</span>statusBarColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>TRANSPARENT</code></pre><p>在这里window其实时调用了<code>Activity</code>的<code>getWindow()</code>方法。</p><h4 id="2-Kotlin-null-safety相关-和-和"><a href="#2-Kotlin-null-safety相关-和-和" class="headerlink" title="2.Kotlin null safety相关 ? 和!!和 ?:"></a>2.Kotlin null safety相关 ? 和!!和 ?:</h4><p>先阐述两个概念：</p><p>“?”加在变量名后，系统在任何情况不会报它的空指针异常。</p><p>“!!”加在变量名后，如果对象为null，那么系统一定会报异常！</p><p>先拿Java代码举个例子</p><pre class=" language-java"><code class="language-java">        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> myList <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//  创建一个null的队列</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"-->> List Size = "</span> <span class="token operator">+</span> myList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个例子中，执行到Log打印队列长度时，大家都知道系统一定会报NullPointerException。然而如果在KT中，在调用myList的时候在它后面加上一个问号<code>myList?.size()</code>，当myList为null的时候直接会打印<code>List Size = null</code>并不会有null异常出现。</p><p>当使用Android Studio把上面那段Java自动转换成KT代码写法后：</p><pre class=" language-kotlin"><code class="language-kotlin">        <span class="token keyword">val</span> myList <span class="token operator">:</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"-->> List Size = <span class="token interpolation"><span class="token delimiter variable">${</span>myList<span class="token operator">!!</span><span class="token punctuation">.</span>size<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span></code></pre><p>编译器为什么自动把<code>myList.size()</code>变成了<code>myList!!.size</code>呢，为什么加上的是感叹号不是问号。</p><p> 这是因为编译器在转化时为了保证代码转化前后的一致性所造成的。换句话说，<strong>在Java上出异常的，转化到KT上，编译器任然会让他保持抛出异常</strong>，NullPointerException也是如此。</p><p> 所以结合上下文可以看得出，!!加上去后好像并没有和之前Java代码有什么区别嘛，该null的地方任然会抛出异常。<strong>所以大多数情况下都会使用?来检测null，轮不到!!出场</strong>。!!只会在你需要对某对象进行非空判断，并且需要抛出异常时才会使用到。</p><p> 那我们接下来着重讲解一下<strong>?</strong>到底怎么用。<br> 在声明对象时，把它跟在类名后面，表示这个类允许为null；<br> 在调用对象时，把它跟在对象后面，表示如果为null程序就会视而不见。<br> 如下列代码：</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token comment" spellcheck="true">// 这是声明一个变量，问号跟在类名后面</span>    <span class="token keyword">var</span> room<span class="token operator">:</span> Room<span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">Room</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">checkRoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 因为加上了问号，所以可以任意的把room变成空</span>        room <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token comment" spellcheck="true">// 因为在调用时加上了问号，所以程序不会抛出异常</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"-->> room name = <span class="token interpolation"><span class="token delimiter variable">${</span>room<span class="token operator">?</span><span class="token punctuation">.</span>roomName<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>再举个不用?的例子：</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token comment" spellcheck="true">// 这样程序就默认的给room加上了!!，从此以后room不允许为null</span>    <span class="token keyword">var</span> room<span class="token operator">:</span> Room <span class="token operator">=</span> <span class="token function">Room</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">checkRoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当把null赋给room时，从编译的时候就已经不通过</span>        room <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token comment" spellcheck="true">// 并且编译器建议把对象后面的问号删除，因为这个对象永远不为空</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"-->> room name = <span class="token interpolation"><span class="token delimiter variable">${</span>room<span class="token punctuation">.</span>roomName<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>所以加上?是一种安全的写法，它体现了Kotlin null safety的特性。<br> KT的语法很灵动，定义参数还可以写成</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">val</span> room<span class="token operator">:</span> Room<span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">Room</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 先实例化一个room，并且room可以为空</span>    <span class="token keyword">val</span> room<span class="token operator">:</span> Room<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// 不实例化了，开始room就是空的</span>    <span class="token keyword">val</span> room<span class="token operator">:</span> Room <span class="token operator">=</span> <span class="token function">Room</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 实例化一个room，并且room永远不能为空</span>    <span class="token keyword">val</span> room <span class="token operator">=</span> <span class="token function">Room</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 和上一行代码一样，是KT最常用的简写语法</span></code></pre><p> 然而加上问号以后程序就万事大吉永远摆脱了NullPointerException的烦恼？我们再看下一段代码：</p><pre class=" language-kotlin"><code class="language-kotlin">        <span class="token keyword">val</span> roomList<span class="token operator">:</span> ArrayList<span class="token operator">&lt;</span>Room<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>roomList<span class="token operator">?</span><span class="token punctuation">.</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"-->> 房间数不是0"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><p>当我们判断list.size的时候，编译器会告诉我们”Operator call corresponds to a dot-qualified call ‘roomList?.size.compareTo(0)’ which is not allowed on a nullable receiver ‘roomList?.size’.”。大概意思是，当roomList为null的时，它的size返回就是”null”，但是”null”不可以和int值比大小，所以编译器建议我们写成<code>roomList?.size!! &gt; 0</code>。</p><p> 没错，经过编译器的建议加上了!!，我们程序运行到这行代码，roomList为null时它一定会报异常。所以是不是必须得在外面套一层<code>if(roomList != null)</code>这种Java常见语句才能避免异常吗？</p><p> 当然Kotlin不会让程序出现这种啰嗦的代码，所以里面提供了<code>对象A ?: 对象B</code>表达式，并且取消了Java中的<code>条件表达式 ? 表达式1 : 表达式2</code>这个三元表达式。</p><p>?:表示的意思是，当对象A值为null的时候，那么它就会返回后面的对象B。</p><pre class=" language-kotlin"><code class="language-kotlin">        <span class="token keyword">val</span> roomList<span class="token operator">:</span> ArrayList<span class="token operator">&lt;</span>Room<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">val</span> mySize<span class="token operator">=</span> roomList<span class="token operator">?</span><span class="token punctuation">.</span>size <span class="token operator">?:</span> <span class="token number">0</span>  </code></pre><p>此时mySize的值就为0，因为roomList?.size为空。</p><p>所以我们可以把上面的代码改成这样：</p><pre class=" language-kotlin"><code class="language-kotlin">        <span class="token keyword">val</span> roomList<span class="token operator">:</span> ArrayList<span class="token operator">&lt;</span>Room<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>roomList<span class="token operator">?</span><span class="token punctuation">.</span>size <span class="token operator">?:</span> <span class="token number">0</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这一行添加了?:</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"-->> 房间数不是0"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><p>就目前为止使，用上面的<strong>?</strong>和<strong>?:</strong>基本上能避免程序中出现的所有NullPointerException</p><h4 id="3-let-with-run-apply-also函数区别"><a href="#3-let-with-run-apply-also函数区别" class="headerlink" title="3.let,with,run,apply,also函数区别"></a>3.let,with,run,apply,also函数区别</h4><p>通过以上几种函数的介绍，可以很方便优化kotlin中代码编写，整体看起来几个函数的作用很相似，但是各自又存在着不同。使用的场景有相同的地方比如run函数就是let和with的结合体。下面一张表格可以清晰对比出他们的不同之处。</p><table><thead><tr><th>函数名</th><th>定义inline的结构</th><th>函数体内使用的对象</th><th>返回值</th><th>是否是扩展函数</th><th>适用的场景</th></tr></thead><tbody><tr><td>let</td><td>fun T.let(block: (T) -&gt; R): R = block(this)</td><td>it指代当前对象</td><td>闭包形式返回</td><td>是</td><td>适用于处理不为null的操作场景</td></tr><tr><td>with</td><td>fun with(receiver: T, block: T.() -&gt; R): R = receiver.block()</td><td>this指代当前对象或者省略</td><td>闭包形式返回</td><td>否</td><td>适用于调用同一个类的多个方法时，可以省去类名重复，直接调用类的方法即可，经常用于Android中RecyclerView中onBinderViewHolder中，数据model的属性映射到UI上</td></tr><tr><td>run</td><td>fun T.run(block: T.() -&gt; R): R = block()</td><td>this指代当前对象或者省略</td><td>闭包形式返回</td><td>是</td><td>适用于let,with函数任何场景。</td></tr><tr><td>also</td><td>fun T.also(block: (T) -&gt; Unit): T { block(this); return this }</td><td>it指代当前对象</td><td>返回this</td><td>是</td><td>适用于let函数的任何场景，一般可用于多个扩展函数链式调用</td></tr><tr><td>apply</td><td>fun T.apply(block: T.() -&gt; Unit): T { block(); return this }</td><td>this指代当前对象或者省略</td><td>返回this</td><td>是</td><td>1、适用于run函数的任何场景，一般用于初始化一个对象实例的时候，操作对象属性，并最终返回这个对象。2、动态inflate出一个XML的View的时候需要给View绑定数据也会用到.3、一般可用于多个扩展函数链式调用</td></tr></tbody></table><p>egg:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">showProgressDialog</span><span class="token punctuation">(</span>title<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>progressDialog <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        progressDialog <span class="token operator">=</span> <span class="token function">ProgressDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>            <span class="token function">setCancelable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    progressDialog<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">closeProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//表示object不为null的条件下，才会去执行let函数体</span>    progressDialog<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>isShowing<span class="token punctuation">)</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Navigation of Jetpack&#39;s Architecture Components</title>
      <link href="/2019/02/26/Navigation-of-Jetpack-s-Architecture-Components/"/>
      <url>/2019/02/26/Navigation-of-Jetpack-s-Architecture-Components/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Navigation 是应用程序设计的重要组成部分。 通过Navigation ，可以设计允许用户在应用内的不同内容区域中移动，移入和移出的交互。说白了其实是用来管理 APP 里页面跳转的。</p><p><img src="0.png" alt=""></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>如果您想使用Android Studio导航，则必须使用Android Studio 3.3或更高版本。<img src="1.png" alt=""></p><p>要向项目添加导航图，请执行以下操作：</p><ol><li><p>在“项目”窗口中，右键单击res目录，然后选择“ <strong>New &gt; Android Resource File</strong>。 出现 <strong>New Resource File</strong> 对话框。</p></li><li><p>在“文件名”字段中键入名称，例如“nav_graph”。</p></li><li><p>从 <strong>Resource type</strong>下拉列表中选择<strong>Navigation</strong>。</p></li><li><p>单击确定。 发生以下情况：</p><p>​    在res目录中创建navigation资源目录。<br>​    在navigation目录中创建nav_graph.xml文件。<br>​    nav_graph.xml文件在导航编辑器中打开。 此XML文件包含导航图。</p></li><li><p>单击 <strong>Text</strong>选项卡以切换到XML文本视图。 您应该看到一个空的导航图，如以下示例所示：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation</span><span class="token punctuation">></span></span></code></pre></li><li><p>单击<strong>Design</strong> 返回“导航编辑器”。</p></li></ol><p><img src="2.png" alt=""></p><h3 id="创建destinations"><a href="#创建destinations" class="headerlink" title="创建destinations"></a>创建<code>destinations</code></h3><ol><li>在导航栏编辑器中, 点击<strong>New Destination</strong> <img src="https://developer.android.google.cn/images/topic/libraries/architecture/navigation-new-destination-icon.png" alt="img">, 然后点击 <strong>Create blank destination</strong>.</li><li><strong>New Android Component</strong> 弹窗出现,  输入一个<strong>Fragment Name</strong>.作为 Fragment类的名字</li><li>要让Android Studio为Fragment创建相应的布局资源文件，请选中Create layout XML旁边的框，然后在Fragment Layout Name字段中输入资源名称。</li><li>在 <strong>Source Language</strong> 下拉框中为类源文件选择 Kotlin 或者 Java 语言。</li><li>点击<strong>Finish</strong>.</li></ol><p>startDestination 代表开始节点</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>startDestination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/blankFragment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/blankFragment<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.cashdog.cashdog.BlankFragment<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fragment_blank<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_blank<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/blankFragment2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.cashdog.cashdog.BlankFragment2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blank2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_blank_fragment2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation</span><span class="token punctuation">></span></span></code></pre><h3 id="连接destinations"><a href="#连接destinations" class="headerlink" title="连接destinations"></a>连接destinations</h3><p>使用action连接两个destinations，如下所示：</p><p>在“设计”选项卡中，将鼠标悬停在您希望用户导航的目标的右侧。目的地上会出现一个圆圈。单击并按住，将光标拖到希望用户导航到的目标上，然后释放。绘制一条线以指示两个目的地之间的导航。相应的会生成xml代码</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>startDestination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/blankFragment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/blankFragment<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.cashdog.cashdog.BlankFragment<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fragment_blank<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_blank<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_blankFragment_to_blankFragment2<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>destination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/blankFragment2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/blankFragment2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.cashdog.cashdog.BlankFragment2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fragment_blank_fragment2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_blank_fragment2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation</span><span class="token punctuation">></span></span></code></pre><p>在谷歌官方demo中，实现了一组fragment之间的关系，在action中可以设置转场动画</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>startDestination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/title_screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/title_screen<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.android.navigationsample.TitleScreen<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fragment_title_screen<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_title_screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_title_screen_to_register<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>destination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/register<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>enterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_right<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>exitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_left<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>popEnterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_left<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>popExitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_right<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_title_screen_to_leaderboard<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>destination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/leaderboard<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>enterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_right<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>exitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_left<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>popEnterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_left<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>popExitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_right<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/register<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.android.navigationsample.Register<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fragment_register<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_register_to_match<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>destination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/match<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>enterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_right<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>exitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_left<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>popEnterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_left<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>popExitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_right<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/leaderboard<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.android.navigationsample.Leaderboard<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fragment_leaderboard<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_leaderboard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_leaderboard_to_userProfile<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>destination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/user_profile<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popEnterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_left<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popExitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_right<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>enterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_right<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>exitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_left<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/match<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.android.navigationsample.Match<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fragment_match<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_match<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_match_to_in_game<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>destination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/in_game<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popEnterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_left<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popExitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_right<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>enterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_right<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>exitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_left<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/user_profile<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.android.navigationsample.UserProfile<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fragment_user_profile<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_user_profile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span>                  <span class="token attr-name"><span class="token namespace">android:</span>defaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>deepLink</span> <span class="token attr-name"><span class="token namespace">app:</span>uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>www.example.com/user/{userName}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/in_game<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.android.navigationsample.InGame<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Game<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_in_game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_in_game_to_resultsWinner<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>destination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/results_winner<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popUpTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/match<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popUpToInclusive</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popEnterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_left<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popExitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_right<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>enterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/fade_in<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>exitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/fade_out<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_in_game_to_gameOver<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>destination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/game_over<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popUpTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/match<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popUpToInclusive</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popEnterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_in_left<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popExitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/slide_out_right<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>enterAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/fade_in<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>exitAnim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/fade_out<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/results_winner<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.android.navigationsample.ResultsWinner<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_results_winner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_results_winner_to_leaderboard<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>destination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/leaderboard<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popUpTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/title_screen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_results_winner_to_match<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popUpTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/match<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_results_winner_to_match2<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>destination</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/match<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/game_over<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.android.navigationsample.GameOver<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fragment_game_over<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/fragment_game_over<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/action_game_over_to_match<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>popUpTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/match<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation</span><span class="token punctuation">></span></span></code></pre><h3 id="修改Activity支持导航"><a href="#修改Activity支持导航" class="headerlink" title="修改Activity支持导航"></a>修改Activity支持导航</h3><p>activity为NavHost中的应用程序提供导航。 NavHost是一个当用户浏览您的应用程序时，目的地会被换入和换出空容器。</p><p>NavHost是一个接口，Navigation组件的默认NavHost实现是NavHostFragment。</p><h4 id="xml实现"><a href="#xml实现" class="headerlink" title="xml实现"></a>xml实现</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:color/background_light<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.android.navigationsample.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/my_nav_host_fragment<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.navigation.fragment.NavHostFragment<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>defaultNavHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>navGraph</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@navigation/navigation<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FrameLayout</span><span class="token punctuation">></span></span></code></pre><p>navGraph 属性就是写刚才我们写的 nagation 文件</p><p>app：defaultNavHost =“true” 属性可确保NavHostFragment拦截系统“后退”按钮。 还可以通过覆盖AppCompatActivity.onSupportNavigateUp（）并调用NavController.navigateUp来实现此行为，如下例所示：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onSupportNavigateUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Navigation<span class="token punctuation">.</span><span class="token function">findNavController</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>nav_host_fragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">navigateUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="当然也可以代码实现"><a href="#当然也可以代码实现" class="headerlink" title="当然也可以代码实现"></a>当然也可以代码实现</h4><pre class=" language-java"><code class="language-java">NavHostFragment finalHost <span class="token operator">=</span> NavHostFragment<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>example_graph<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>nav_host<span class="token punctuation">,</span> finalHost<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">setPrimaryNavigationFragment</span><span class="token punctuation">(</span>finalHost<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this is the equivalent to app:defaultNavHost="true"</span>    <span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="界面跳转"><a href="#界面跳转" class="headerlink" title="界面跳转"></a>界面跳转</h3><p>使用NavController类导航到目标。 可以使用以下静态方法之一检索NavController</p><pre class=" language-java"><code class="language-java">NavHostFragment<span class="token punctuation">.</span><span class="token function">findNavController</span><span class="token punctuation">(</span>Fragment<span class="token punctuation">)</span>Navigation<span class="token punctuation">.</span><span class="token function">findNavController</span><span class="token punctuation">(</span>Activity<span class="token punctuation">,</span> <span class="token annotation punctuation">@IdRes</span> <span class="token keyword">int</span> viewId<span class="token punctuation">)</span>Navigation<span class="token punctuation">.</span><span class="token function">findNavController</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span></code></pre><p>拿到NavController后，使用其navigate（）方法导航到目标。 navigate（）方法接受资源ID。 ID可以是导航图的destination 或action中特定目标的ID。</p><pre class=" language-kotlin"><code class="language-kotlin">  view<span class="token punctuation">.</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>play_btn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            Navigation<span class="token punctuation">.</span><span class="token function">findNavController</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_title_screen_to_register<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        view<span class="token punctuation">.</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>leaderboard_btn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            Navigation<span class="token punctuation">.</span><span class="token function">findNavController</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_title_screen_to_leaderboard<span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Jetpack&#39;s Architecture Components </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>proguard rule 惨痛教训</title>
      <link href="/2018/12/14/proguard-rule-%E6%83%A8%E7%97%9B%E6%95%99%E8%AE%AD/"/>
      <url>/2018/12/14/proguard-rule-%E6%83%A8%E7%97%9B%E6%95%99%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天再给项目配置混淆打release包时，遇到了个很尴尬的问题，项目打正式包下奔溃，打测试包正常运行。下面是打包配置（app下的build.gradle），关于为什么要proguard应用程序，请看这篇文章<a href="https://medium.com/google-developers/troubleshooting-proguard-issues-on-android-bce9de4f8a74" target="_blank" rel="noopener">为什么每个人都应该将ProGuard用于他们的Android应用程序</a></p><pre class=" language-groovy"><code class="language-groovy">android <span class="token punctuation">{</span>    compileSdkVersion rootProject<span class="token operator">.</span>ext<span class="token operator">.</span>android<span class="token operator">.</span>compileSdkVersion    defaultConfig <span class="token punctuation">{</span>        applicationId <span class="token string">"com.kanghanbin.wanandroid"</span>        minSdkVersion rootProject<span class="token operator">.</span>ext<span class="token operator">.</span>android<span class="token operator">.</span>minSdkVersion        targetSdkVersion rootProject<span class="token operator">.</span>ext<span class="token operator">.</span>android<span class="token operator">.</span>targetSdkVersion        versionName rootProject<span class="token operator">.</span>ext<span class="token operator">.</span>android<span class="token operator">.</span>versionName        testInstrumentationRunner <span class="token string">"android.support.test.runner.AndroidJUnitRunner"</span>        ndk <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置支持的SO库架构</span>            abiFilters <span class="token string">'armeabi'</span><span class="token punctuation">,</span> <span class="token string">'x86'</span><span class="token punctuation">,</span> <span class="token string">'armeabi-v7a'</span><span class="token punctuation">,</span> <span class="token string">'x86_64'</span><span class="token punctuation">,</span> <span class="token string">'arm64-v8a'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    signingConfigs <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//RELEASE_KEY_ALIAS等常量放在gradle.properties文件中</span>            keyAlias RELEASE_KEY_ALIAS            keyPassword RELEASE_KEY_PASSWORD            storeFile <span class="token function">file</span><span class="token punctuation">(</span>RELEASE_STORE_FILE<span class="token punctuation">)</span>            storePassword RELEASE_STORE_PASSWORD        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            minifyEnabled <span class="token boolean">true</span>            shrinkResources <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 自动清理无用资源</span>            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>            signingConfig signingConfigs<span class="token operator">.</span>release        <span class="token punctuation">}</span>        debug <span class="token punctuation">{</span>            signingConfig signingConfigs<span class="token operator">.</span>release            minifyEnabled <span class="token boolean">false</span>            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//只需禁用lint警告。有时应用不会发布到Google Play，因此不需要深层链接等：</span>    lintOptions <span class="token punctuation">{</span>        disable <span class="token string">'GoogleAppIndexingWarning'</span>        baseline <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"lint-baseline.xml"</span><span class="token punctuation">)</span>        checkReleaseBuilds <span class="token boolean">false</span>        abortOnError <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我就将<code>buildType</code>为debug时的<code>minifyEnabled</code> 也改为true，在手机上调试</p><pre class=" language-groovy"><code class="language-groovy"> debug <span class="token punctuation">{</span>            signingConfig signingConfigs<span class="token operator">.</span>release            minifyEnabled <span class="token boolean">true</span>            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>        <span class="token punctuation">}</span></code></pre><p>不出意外，来了个NPE<img src="1.png" alt=""></p><p>定位错误是在<code>BaseSubscriber</code>的61行代码报错</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ApiException<span class="token punctuation">)</span> t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Constant<span class="token punctuation">.</span>UN_LOGIN                    <span class="token operator">||</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>UN_LOGIN_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mView<span class="token punctuation">.</span><span class="token function">startLoginActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mView<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>发现就是t.getmessage为空然后我就多加了个判断，BaseSubscriber类的完整代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseSubscriber</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">ResourceSubscriber</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> BaseView mView<span class="token punctuation">;</span>    <span class="token keyword">private</span> String mErrorMsg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isShowErrorState <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BaseSubscriber</span><span class="token punctuation">(</span>BaseView mView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mView <span class="token operator">=</span> mView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BaseSubscriber</span><span class="token punctuation">(</span>BaseView mView<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isShowErrorState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mView <span class="token operator">=</span> mView<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isShowErrorState <span class="token operator">=</span> isShowErrorState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BaseSubscriber</span><span class="token punctuation">(</span>BaseView mView<span class="token punctuation">,</span> String mErrorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mView <span class="token operator">=</span> mView<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mErrorMsg <span class="token operator">=</span> mErrorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BaseSubscriber</span><span class="token punctuation">(</span>BaseView mView<span class="token punctuation">,</span> String mErrorMsg<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isShowErrorState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mView <span class="token operator">=</span> mView<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mErrorMsg <span class="token operator">=</span> mErrorMsg<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isShowErrorState <span class="token operator">=</span> isShowErrorState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mView <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mErrorMsg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>mErrorMsg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mView<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>mErrorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">ApiException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ApiException<span class="token punctuation">)</span> t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Constant<span class="token punctuation">.</span>UN_LOGIN                    <span class="token operator">||</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null                    <span class="token operator">||</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>UN_LOGIN_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mView<span class="token punctuation">.</span><span class="token function">startLoginActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mView<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">HttpException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mView<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>data_fail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mView<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>unknow_error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isShowErrorState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mView<span class="token punctuation">.</span><span class="token function">showFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是我就纳闷为啥会走到onError里，回头一想既然不混淆没问题肯定是混淆规则有问题</p><p>然后我就开始看混淆规则，排查了一遍发现这里用到的retrofit和rxjava2混淆都没问题呢，可是什么导致的一直走onerror。最后发现我只对项目实体类进行了keep</p><pre><code>#-----------处理实体类---------------# 在开发的时候我们可以将所有的实体类放在一个包内，这样我们写一次混淆就行了。-keep class com.kanghanbin.wanandroid.model.bean.**{ *; }</code></pre><p>并没有将自己封装的<code>BaseResponse</code>类进行keep，因为这里的BaseResponse用于http统一响应。BaseResponse完整代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建时间：2018/10/26 * 编写人：kanghb * 功能描述：封装http响应格式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseResponse</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * data : null     * errorCode : -1     * errorMsg : 账号密码不匹配！     */</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> String errorMsg<span class="token punctuation">;</span>    <span class="token keyword">public</span> T <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setErrorCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setErrorMsg</span><span class="token punctuation">(</span>String errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"BaseResponse{"</span> <span class="token operator">+</span>                <span class="token string">"data="</span> <span class="token operator">+</span> data <span class="token operator">+</span>                <span class="token string">", errorCode="</span> <span class="token operator">+</span> errorCode <span class="token operator">+</span>                <span class="token string">", errorMsg='"</span> <span class="token operator">+</span> errorMsg <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>BaseResponse用法举例：</p><pre class=" language-java"><code class="language-java">        <span class="token function">addSubscribe</span><span class="token punctuation">(</span>apiService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>RxUtil<span class="token punctuation">.</span>&lt;BaseResponse<span class="token operator">&lt;</span>UserBean<span class="token operator">>></span><span class="token function">rxFlowableSchedulerHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>RxUtil<span class="token punctuation">.</span>&lt;UserBean<span class="token operator">></span><span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribeWith</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseSubscriber</span><span class="token operator">&lt;</span>UserBean<span class="token operator">></span><span class="token punctuation">(</span>mView<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>UserBean userBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mView<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        mView<span class="token punctuation">.</span><span class="token function">gotoMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        sharePreferencesHelper<span class="token punctuation">.</span><span class="token function">setLoginAccount</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                        sharePreferencesHelper<span class="token punctuation">.</span><span class="token function">setLoginPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                        sharePreferencesHelper<span class="token punctuation">.</span><span class="token function">setLoginStatus</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        RxBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EventLogin</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在proguard-rules.pro中加入完美结局问题，正式包也可以正常运行了</p><pre><code>#-----------处理实体类---------------# 在开发的时候我们可以将所有的实体类放在一个包内，这样我们写一次混淆就行了。-keep class com.kanghanbin.wanandroid.model.bean.**{ *; }-keep class com.kanghanbin.wanandroid.http.BaseResponse{ *; }</code></pre><h3 id="科普一下"><a href="#科普一下" class="headerlink" title="科普一下"></a>科普一下</h3><p>多简化序列化和反序列化这些字段的工具都依赖于反射。GSON，Retrofit，Firebase - 它们都检查数据类中的字段名称，并将它们转换为另一种表示形式（例如:)，<code>{“name”: “Sue”, “age”: 28}</code>用于传输或存储。当他们将数据读入Java对象时会发生同样的事情 - 他们看到一个键值对<code>“name”:”John”</code>并尝试通过查找<code>String name</code>字段将其应用于Java对象。</p><p><strong>结论</strong>：我们不能让ProGuard重命名或删除这些数据类中的任何字段，因为它们必须与序列化格式匹配。可以安全地<code>@Keep</code>在整个类上添加注释或在所有模型上添加通配符规则：</p><pre><code>-keep class com.kanghanbin.wanandroid.model.bean.**{ *; }</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WanAndroid，一款每日推荐优质文章App</title>
      <link href="/2018/11/21/WanAndroid%EF%BC%8C%E4%B8%80%E6%AC%BE%E6%AF%8F%E6%97%A5%E6%8E%A8%E8%8D%90%E4%BC%98%E8%B4%A8%E6%96%87%E7%AB%A0App/"/>
      <url>/2018/11/21/WanAndroid%EF%BC%8C%E4%B8%80%E6%AC%BE%E6%AF%8F%E6%97%A5%E6%8E%A8%E8%8D%90%E4%BC%98%E8%B4%A8%E6%96%87%E7%AB%A0App/</url>
      
        <content type="html"><![CDATA[<h3 id="WanAndroid"><a href="#WanAndroid" class="headerlink" title="WanAndroid"></a>WanAndroid</h3><p>WanAndroid，一款每日推荐优质文章App,项目涉及API均来自鸿洋大神的<a href="http://www.wanandroid.com/" target="_blank" rel="noopener">玩Android</a>，基于Material Design + MVP + RxJava2 + Retrofit + Litepal + Glide</p><p>出于学习的目的做了这款Material Design风格的简洁的阅读应用，玩<em>Android</em>是一个每日推荐20~30篇<em>Android</em>优质文章的站点,提供<em>Android</em>常用工具和常用网站,并以知识体系的形式展现所有的文章分类。目前包括:  </p><ul><li style="list-style: none"><input type="checkbox" checked> 首页模块、banner、常用网站、热门搜索</li><li style="list-style: none"><input type="checkbox" checked> 体系模块</li><li style="list-style: none"><input type="checkbox" checked> 导航模块</li><li style="list-style: none"><input type="checkbox" checked> 项目模块</li><li style="list-style: none"><input type="checkbox" checked> TODO模块，增加，删除，修改</li><li style="list-style: none"><input type="checkbox" checked> 公众号模块，支持搜索</li><li style="list-style: none"><input type="checkbox" checked> 文章详情页</li><li style="list-style: none"><input type="checkbox" checked> 收藏，取消收藏</li><li style="list-style: none"><input type="checkbox" checked> 登录，注册，登出</li><li style="list-style: none"><input type="checkbox" checked> 设置，自动缓存，无图模式，夜间模式，清理缓存</li><li style="list-style: none"><input type="checkbox" checked> 关于</li></ul><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li>本人能力有限，大佬勿喷。发现bug或有好的建议欢迎<a href="https://github.com/Kanghanbin/wanAndroid/issues" target="_blank" rel="noopener">issue</a></li><li>本项目仅做学习交流使用，API数据内容均来自<a href="http://www.wanandroid.com/" target="_blank" rel="noopener">玩Android</a>，感谢大佬</li></ul><h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><div align="center"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/1.jpeg"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/2.jpeg"><br></div><div align="center"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/3.jpeg"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/4.jpeg"><br></div><div align="center"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/5.jpeg"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/6.jpeg"><br></div><div align="center"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/7.jpeg"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/8.jpeg"><br></div><div align="center"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/9.jpeg"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/10.jpeg"><br></div><div align="center"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/11.jpeg"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/12.jpeg"><br></div><div align="center"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/13.jpeg"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/14.jpeg"><br></div><div align="center"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/15.jpeg"><br><img width="40%" height="700" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/16.jpeg"><br></div><div align="center"><br><img width="30%" height="500" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/17.jpeg"><br><img width="30%" height="500" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/18.jpeg"><br><img width="30%" height="500" src="https://raw.githubusercontent.com/Kanghanbin/wanAndroid/master/screenshots/19.jpeg"><br></div><h3 id="DownApk"><a href="#DownApk" class="headerlink" title="DownApk"></a>DownApk</h3><ol><li><p><a href="https://www.pgyer.com/s08Q" target="_blank" rel="noopener">点击下载</a></p></li><li><p>扫码下载</p><p><img src="/01.png" alt="wanandroid"></p></li></ol><h3 id="Third-lirbary"><a href="#Third-lirbary" class="headerlink" title="Third lirbary"></a>Third lirbary</h3><ul><li>com.squareup.retrofit2</li><li>io.reactivex.rxjava2</li><li>com.scwang.smartrefresh</li><li>com.github.bumptech.glide:glide</li><li>com.jakewharton:butterknife</li><li>com.blankj:utilcode</li><li>me.yokeyword:fragmentation</li><li>com.youth.banner:banner</li><li>q.rorbin:VerticalTabLayout</li><li>com.hyman:flowlayout-lib</li><li>org.litepal.android</li></ul><h3 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h3><p>icon素材来自<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a> 提供</p><p>参考了项目<a href="https://github.com/JsonChao/Awesome-WanAndroid" target="_blank" rel="noopener">Awesome-WanAndroid</a>，感谢大神的开源精神</p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>项目地址：<a href="https://github.com/Kanghanbin/wanAndroid" target="_blank" rel="noopener">https://github.com/Kanghanbin/wanAndroid</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>recycleview滚动到指定item，并显示在顶部</title>
      <link href="/2018/11/05/recycleview%E6%BB%9A%E5%8A%A8%E5%88%B0%E6%8C%87%E5%AE%9Aitem%EF%BC%8C%E5%B9%B6%E6%98%BE%E7%A4%BA%E5%9C%A8%E9%A1%B6%E9%83%A8/"/>
      <url>/2018/11/05/recycleview%E6%BB%9A%E5%8A%A8%E5%88%B0%E6%8C%87%E5%AE%9Aitem%EF%BC%8C%E5%B9%B6%E6%98%BE%E7%A4%BA%E5%9C%A8%E9%A1%B6%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<p>项目中要实现这种效果：右边的<code>recycleview</code>需要跟随左边的菜单栏的选择而滚动到指定item，并将该item置顶。其实这种需求很常见。下面来看具体实现代码：</p><p>1.滚动到指定item代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> needScroll<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> postion<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">smoothScrollRecycleviewtoPositionTop</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        postion <span class="token operator">=</span> position<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取第一个和最后一个可见项</span>        <span class="token keyword">int</span> firstItemPosition <span class="token operator">=</span> linearLayoutManager<span class="token punctuation">.</span><span class="token function">findFirstVisibleItemPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lastItemPosition <span class="token operator">=</span> linearLayoutManager<span class="token punctuation">.</span><span class="token function">findLastVisibleItemPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> firstItemPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第一种可能:跳转位置在第一个可见位置之前</span>            rvNav<span class="token punctuation">.</span><span class="token function">smoothScrollToPosition</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;=</span> lastItemPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第二种可能:跳转位置在第一个可见位置之后</span>            rvNav<span class="token punctuation">.</span><span class="token function">smoothScrollBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rvNav<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>position <span class="token operator">-</span> firstItemPosition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第三种可能:跳转位置在最后可见项之后</span>            rvNav<span class="token punctuation">.</span><span class="token function">smoothScrollToPosition</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>            needScroll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>2.将item滚动到顶部</p><pre class=" language-java"><code class="language-java">        rvNav<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>OnScrollListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrollStateChanged</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">int</span> newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrollStateChanged</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>needScroll <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newState <span class="token operator">==</span> RecyclerView<span class="token punctuation">.</span>SCROLL_STATE_IDLE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">scrollRecycleview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                           <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrolled</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrolled</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scrollRecycleview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                needScroll <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> diff <span class="token operator">=</span> postion <span class="token operator">-</span> linearLayoutManager<span class="token punctuation">.</span><span class="token function">findFirstVisibleItemPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> diff <span class="token operator">&lt;</span> rvNav<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rvNav<span class="token punctuation">.</span><span class="token function">smoothScrollBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rvNav<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BottomNavigationView去除动画，大于3项时不显示文字的最新解决方案</title>
      <link href="/2018/10/30/BottomNavigationView%E5%8E%BB%E9%99%A4%E5%8A%A8%E7%94%BB%EF%BC%8C%E5%A4%A7%E4%BA%8E3%E9%A1%B9%E6%98%AF%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%96%87%E5%AD%97%E7%9A%84%E6%9C%80%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2018/10/30/BottomNavigationView%E5%8E%BB%E9%99%A4%E5%8A%A8%E7%94%BB%EF%BC%8C%E5%A4%A7%E4%BA%8E3%E9%A1%B9%E6%98%AF%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%96%87%E5%AD%97%E7%9A%84%E6%9C%80%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>今天在用 <code>BottomNavigationView</code>实现底部导航栏时出现了个小问题，效果如下：</p><p><img src="1.png" alt=""></p><p>当使用<code>BottomNavigationView</code>菜单项多于3个时，去除动画效果，显示菜单项文字。</p><h3 id="初级方案"><a href="#初级方案" class="headerlink" title="初级方案"></a>初级方案</h3><p>在网上看到解决方案是这样：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建时间：2018/10/30 * 编写人：kanghb * 功能描述：当使用BottomNavigationView菜单项多于3个时，去除动画效果，显示菜单项文字 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BottomNavigationViewHelper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token string">"RestrictedApi"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">disableShiftMode</span><span class="token punctuation">(</span>BottomNavigationView view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取子View BottomNavigationMenuView的对象</span>        BottomNavigationMenuView menuView <span class="token operator">=</span> <span class="token punctuation">(</span>BottomNavigationMenuView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置私有成员变量mShiftingMode可以修改</span>            Field shiftingMode <span class="token operator">=</span> menuView<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mShiftingMode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            shiftingMode<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            shiftingMode<span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span>menuView<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            shiftingMode<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> menuView<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                BottomNavigationItemView item <span class="token operator">=</span> <span class="token punctuation">(</span>BottomNavigationItemView<span class="token punctuation">)</span> menuView<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//去除shift效果</span>                item<span class="token punctuation">.</span><span class="token function">setShiftMode</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getItemData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"BNVHelper"</span><span class="token punctuation">,</span> <span class="token string">"没有mShiftingMode这个成员变量"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"BNVHelper"</span><span class="token punctuation">,</span> <span class="token string">"无法修改mShiftingMode的值"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是我引入的是</p><pre class=" language-groovy"><code class="language-groovy">implementation <span class="token string">'com.android.support:appcompat-v7:28.0.0'</span></code></pre><p><code>BottomNavigationItemView</code>里面并没有<code></code>setShiftMode<code>方法，直接报错，我看了下</code>BottomNavigationItemView<code>代码，貌似换成了</code>setShifting<code>方法，于是乎我就开心的换了，然并卵。后来我又发现</code>BottomNavigationMenuView<code>中也没有</code>mShiftingMode`变量，然后一脸懵逼，最后在<a href="https://stackoverflow.com/questions/40176244/how-to-disable-bottomnavigationview-shift-mode" target="_blank" rel="noopener">stackoverflow</a>发现了解决方案，嘻嘻</p><h3 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h3><p>很简单就是在xml中给<code>BottomNavigationView</code>加入这个属性    app:labelVisibilityMode=”labeled”  即可大功告成。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.BottomNavigationView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/botton_navigation<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/ivory<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>elevation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/dp_16<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>labelVisibilityMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>labeled<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>menu</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@menu/menu_bottom_nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.BottomNavigationView</span><span class="token punctuation">></span></span></code></pre><p><img src="2.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>com.android.support冲突的解决办法</title>
      <link href="/2018/10/25/com-android-support%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/10/25/com-android-support%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>今天在项目中引入</p><pre class=" language-groovy"><code class="language-groovy">  implementation <span class="token string">'com.android.support:appcompat-v7:27.0.0'</span></code></pre><p>项目报<strong>All com.android.support libraries must use the exact same version specification (mixing versions can lead to runtime crashes</strong>错误</p><p>看意思大概是引用 com.android.support 包冲突了，版本号要保持一致，但是可能我们自己新建的项目的com.android.support包版本号要高一些，一些第三方的库的com.android.support可能没有及时更新support库，就会出现这个错误。</p><h3 id="网上解决方法：（同样的适用于其他的依赖冲突。）"><a href="#网上解决方法：（同样的适用于其他的依赖冲突。）" class="headerlink" title="网上解决方法：（同样的适用于其他的依赖冲突。）"></a>网上解决方法：（同样的适用于其他的依赖冲突。）</h3><ul><li>修改自己项目中的com.android.support的版本号，与所依赖的库版本号一致，但是当我们依赖的库中的com.android.support版本号有好几个版本就不行了。（不推荐）</li><li>依赖第三方库时候排除掉对com.android.support包的依赖，这样自己的项目随便依赖什么版本都可以，但是这种方法需要你先找到哪些库存在冲突</li></ul><h3 id="寻找问题根源："><a href="#寻找问题根源：" class="headerlink" title="寻找问题根源："></a>寻找问题根源：</h3><p>自行下载插件 <a href="https://plugins.jetbrains.com/plugin/7150-gradle-view" target="_blank" rel="noopener"><code>gradle view</code></a>，或者用AS自带plugs下载插件，使用<code>GradleView</code>面板看冲突版本</p><p><img src="https://github.com/Kanghanbin/Kanghanbin.github.io/blob/master/2018/10/25/com-android-support%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/1.png?raw=true"></p><p>可以看到com.android.support 有两个版本，分别是27.0.0和28.0.0，可想而知这里的的28.0.0版本肯定是第三方依赖添加的。</p><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    implementation <span class="token function">fileTree</span><span class="token punctuation">(</span>include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dir<span class="token punctuation">:</span> <span class="token string">'libs'</span><span class="token punctuation">)</span>    implementation <span class="token string">'com.android.support:appcompat-v7:28.0.0'</span>    testImplementation <span class="token string">'junit:junit:4.12'</span>    androidTestImplementation <span class="token string">'com.android.support.test:runner:1.0.2'</span>    androidTestImplementation <span class="token string">'com.android.support.test.espresso:espresso-core:3.0.2'</span>    <span class="token comment" spellcheck="true">//retrofit</span>    implementation <span class="token string">'com.squareup.retrofit2:retrofit:2.4.0'</span>    implementation <span class="token string">'com.squareup.retrofit2:converter-gson:2.4.0'</span>    implementation <span class="token string">'com.squareup.retrofit2:adapter-rxjava:2.4.0'</span>    implementation <span class="token string">'com.squareup.okhttp3:logging-interceptor:3.11.0'</span>    <span class="token comment" spellcheck="true">//rxjava</span>    implementation <span class="token string">'io.reactivex.rxjava2:rxjava:2.2.2'</span>    implementation <span class="token string">'io.reactivex.rxjava2:rxandroid:2.1.0'</span>    <span class="token comment" spellcheck="true">//util</span>    implementation <span class="token string">'com.blankj:utilcode:1.21.0'</span>    implementation <span class="token string">'me.yokeyword:fragmentation:1.3.6'</span>    <span class="token comment" spellcheck="true">//butterknife</span>    implementation <span class="token string">'com.jakewharton:butterknife:9.0.0-rc1'</span>    annotationProcessor <span class="token string">'com.jakewharton:butterknife-compiler:9.0.0-rc1'</span><span class="token punctuation">}</span></code></pre><p>这里是我项目暂时引用的依赖，猜测可能是<code>utilcode</code>，fragmentation或<code>butterknife</code>中的一种，然后我就在<code>github</code>上分别查看了下项目引用的<code>supportLibrary</code>版本号，<code>butterknife</code>引用的是28.0.0.这就找到了问题的根源。</p><h3 id="最终解决方案："><a href="#最终解决方案：" class="headerlink" title="最终解决方案："></a>最终解决方案：</h3><p>第一种：给dependencies配置transitive为false，这样就会以你当前依赖的版本为准。但是这样使用后可能会导致第三方依赖有问题。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token punctuation">...</span>configurations<span class="token operator">.</span>all <span class="token punctuation">{</span>   transitive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">...</span>dependencies<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>我这样尝试坐了下，发现<code>Butterknife</code>在项目中出现了些问题。所以最好不要这么做</p><p>于是我采用了下面这种方法</p><p>第二种：</p><pre class=" language-groovy"><code class="language-groovy">android <span class="token punctuation">{</span>    compileSdkVersion <span class="token number">28</span>       <span class="token punctuation">...</span><span class="token punctuation">}</span>    <span class="token punctuation">...</span> dependencies <span class="token punctuation">{</span>    <span class="token punctuation">...</span>    implementation <span class="token string">'com.android.support:appcompat-v7:28.0.0'</span>    <span class="token punctuation">...</span>  <span class="token punctuation">}</span></code></pre><p>将support提升至28.0.0完美的解决了问题</p><h3 id="感受："><a href="#感受：" class="headerlink" title="感受："></a>感受：</h3><p>遇到问题不用慌，先找出现问题的根源，凡事有因必有果，有果必有因，然后再一步一步尝试，最后必然能找到解决方案。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一次批量插入数据库上万条记录优化</title>
      <link href="/2018/10/17/%E4%B8%80%E6%AC%A1%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8A%E4%B8%87%E6%9D%A1%E8%AE%B0%E5%BD%95%E4%BC%98%E5%8C%96/"/>
      <url>/2018/10/17/%E4%B8%80%E6%AC%A1%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8A%E4%B8%87%E6%9D%A1%E8%AE%B0%E5%BD%95%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>由于项目涉及到数据库的东西太多太多，基本所有功能都涉及到数据库。在一个移动客户端上只要涉及到网络数据都得保存到本地，数据量小的情况下还好，如果数据量成千上万，那稳定性，速度效率个方面问题层出不穷。</p><p><strong>问题</strong>:上万条数据从服务端下下来，可能会导致程序崩溃？</p><p><strong>解决方案</strong>：</p><p>1.首先这个奔溃问题，我不知道是什么奔溃，然后让业务那边在初选收获功能模块中加一些大数据量我这边好测试，业务分别加成功了4000和9040两种，</p><p>2.运行项目，测试了一下，前两次貌似都报了网络环境异常，查看log是<code>com.android.volley.TimeoutError</code>超时，后来再测几次就没出现，估计网络不稳定造成，下载成功后会保存至数据库，下载过程挺快，然后卡在了保存至数据库，加载框也不转了，静静地等着</p><p><img src="1.jpeg" alt=""></p><p>2.1.如果，在这中间，手指触碰到了安卓事件，系统会弹出ANR对话框，然后强制关闭，系统奔溃。</p><p><img src="2.png" alt=""></p><p>我认为解决方案就是数据库操作在子线程，可有效避免ANR。</p><p>2.2.如果，在这中间，静静地等着数据库插入操作直至完成，下面是测试保存所需等待时间，其实算了操作数据库两个方法。</p><ul><li><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestSucceed</span><span class="token punctuation">(</span>PrimaryHarvestPlotList object<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 存储初选收获小区数据</span>                            <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            harvestPlanPlotDao<span class="token punctuation">.</span><span class="token function">savePrimaryHarvestPlotListBeforeQuery</span><span class="token punctuation">(</span>harvestPlanId<span class="token punctuation">,</span> object<span class="token punctuation">.</span><span class="token function">getHarvestPlanPlotList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            primaryHarvestDao<span class="token punctuation">.</span><span class="token function">updateHarvestPlanPlotNum</span><span class="token punctuation">(</span>harvestPlanId<span class="token punctuation">,</span> object<span class="token punctuation">.</span><span class="token function">getHarvestPlanPlotList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"khb插入耗时："</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">refreshFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">checkLoadingFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            ToastUtil<span class="token punctuation">.</span><span class="token function">toast</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> <span class="token string">"["</span> <span class="token operator">+</span> harvestPlanName                                    <span class="token operator">+</span> <span class="token string">"]小区数据下载成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span></code></pre></li></ul><table><thead><tr><th>数据量</th><th>4000条</th><th>9020条</th></tr></thead><tbody><tr><td>所需时间</td><td>9s</td><td>84s</td></tr></tbody></table><h3 id="大数据量保存优化"><a href="#大数据量保存优化" class="headerlink" title="大数据量保存优化"></a>大数据量保存优化</h3><p>1.使用事物操作，调用userDao.createOrUpdate(userBean)耗时较长，大概为45s左右，userDao.create(userBean)大概为15s左右</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertByShiwu</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UserBean userBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserBean</span><span class="token punctuation">(</span><span class="token string">"khb"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">insertByShiwu</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"khb插入耗时："</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertByShiwu</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>UserBean<span class="token operator">></span> userBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>db<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        db <span class="token operator">=</span> dataBaseHelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    db<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>UserBean userBean <span class="token operator">:</span> userBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>            userDao<span class="token punctuation">.</span><span class="token function">createOrUpdate</span><span class="token punctuation">(</span>userBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        db<span class="token punctuation">.</span><span class="token function">setTransactionSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> db<span class="token punctuation">)</span> <span class="token punctuation">{</span>                db<span class="token punctuation">.</span><span class="token function">endTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用<code>SQLiteStatement</code>，耗时4s左右</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertByStatement</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UserBean userBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserBean</span><span class="token punctuation">(</span><span class="token string">"khb"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">insertByStatement</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"khb插入耗时："</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertByStatement</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>UserBean<span class="token operator">></span> userBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>db<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            db <span class="token operator">=</span> dataBaseHelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        db<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into UserBean (name,sex,age) values (?,?,?)"</span><span class="token punctuation">;</span>        SQLiteStatement stat <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">compileStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>UserBean userBean <span class="token operator">:</span> userBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stat<span class="token punctuation">.</span><span class="token function">bindString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> userBean<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stat<span class="token punctuation">.</span><span class="token function">bindString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> userBean<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stat<span class="token punctuation">.</span><span class="token function">bindLong</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> userBean<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stat<span class="token punctuation">.</span><span class="token function">executeInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            db<span class="token punctuation">.</span><span class="token function">setTransactionSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>db <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                db<span class="token punctuation">.</span><span class="token function">endTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>综上所述，<code>SQLiteStatement</code> 更快一些</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>StaggeredGridLayoutManager瀑布流错乱的解决</title>
      <link href="/2018/09/29/StaggeredGridLayoutManager%E7%80%91%E5%B8%83%E6%B5%81%E9%94%99%E4%B9%B1%E7%9A%84%E8%A7%A3%E5%86%B3-1/"/>
      <url>/2018/09/29/StaggeredGridLayoutManager%E7%80%91%E5%B8%83%E6%B5%81%E9%94%99%E4%B9%B1%E7%9A%84%E8%A7%A3%E5%86%B3-1/</url>
      
        <content type="html"><![CDATA[<p> 使用RecyclerView搭配StaggeredGridLayoutManager实现瀑布流时，一般会在Adapter的onBindViewHolder()方法里给每一个item随机生成一个高度，使得item的排布错落有致，不死板。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token keyword">final</span> ViewHolder holder<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存在记录的高度时先Layout再异步加载图片</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ViewGroup<span class="token punctuation">.</span>LayoutParams layoutParams <span class="token operator">=</span> holder<span class="token punctuation">.</span>ivGirl<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            layoutParams<span class="token punctuation">.</span>height <span class="token operator">=</span> mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">diskCacheStrategy</span><span class="token punctuation">(</span>DiskCacheStrategy<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleTarget</span><span class="token operator">&lt;</span>Bitmap<span class="token operator">></span><span class="token punctuation">(</span>App<span class="token punctuation">.</span>SCREEN_WIDTH <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> App<span class="token punctuation">.</span>SCREEN_WIDTH <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>Bitmap resource<span class="token punctuation">,</span> GlideAnimation<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Bitmap<span class="token operator">></span> glideAnimation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RecyclerView<span class="token punctuation">.</span>NO_POSITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">int</span> width <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">int</span> height <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">int</span> realHeight <span class="token operator">=</span> <span class="token punctuation">(</span>App<span class="token punctuation">.</span>SCREEN_WIDTH <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> height <span class="token operator">/</span> width<span class="token punctuation">;</span>                                mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>realHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>                                ViewGroup<span class="token punctuation">.</span>LayoutParams lp <span class="token operator">=</span> holder<span class="token punctuation">.</span>ivGirl<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                lp<span class="token punctuation">.</span>height <span class="token operator">=</span> realHeight<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            holder<span class="token punctuation">.</span>ivGirl<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>onItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    View shareView <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_girl<span class="token punctuation">)</span><span class="token punctuation">;</span>                    onItemClickListener<span class="token punctuation">.</span><span class="token function">onItemClickListener</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>shareView<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> mAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GirlAdapter</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> mList<span class="token punctuation">)</span><span class="token punctuation">;</span>        mStaggeredGridLayoutManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaggeredGridLayoutManager</span><span class="token punctuation">(</span>SPAN_COUNT<span class="token punctuation">,</span>StaggeredGridLayoutManager<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        rvGirlContent<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span>mStaggeredGridLayoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        rvGirlContent<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>mAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="girl交错.gif" alt=""></p><p>在StaggeredGridLayoutManager瀑布流中,当需要依据图片实际相对高度,不断动态设置ImageView的LayoutParams时,<br>会导致快速滑动状态下产生重新排列,重写getItemViewType并设置StaggeredGridLayoutManager.GAP_HANDLING_NONE解决了这个问题，原因目前未知</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemViewType</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> App<span class="token punctuation">.</span>SCREEN_WIDTH <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">mStaggeredGridLayoutManager<span class="token punctuation">.</span><span class="token function">setGapStrategy</span><span class="token punctuation">(</span>StaggeredGridLayoutManager<span class="token punctuation">.</span>GAP_HANDLING_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果如下：<img src="girlsetGapStrategy.gif" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>评论页面的实现</title>
      <link href="/2018/09/20/%E8%AF%84%E8%AE%BA%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/09/20/%E8%AF%84%E8%AE%BA%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、效果图展示"><a href="#一、效果图展示" class="headerlink" title="一、效果图展示"></a>一、效果图展示</h3><p><img src="https://kanghanbin.github.io/blog/comment.gif" alt=""></p><h3 id="二、思路分析"><a href="#二、思路分析" class="headerlink" title="二、思路分析"></a>二、思路分析</h3><p>首先，上效果图，这样的评论界面很常见，日常新闻，社交等类的app中都有评论功能，今天就来看看怎么实现？</p><p>实现这种效果并不难，首先最外层肯定是<code>Recycleview</code>，然后设置他的Adapter来实现，重点在于Adapter的实现。</p><h3 id="三、准备"><a href="#三、准备" class="headerlink" title="三、准备"></a>三、准备</h3><p>1.首先，得有一个评论<code>javaBean</code>类，用来封装评论信息，当然这些信息在开发中都是从服务器端获取的，这个类为<code>CommentBean</code>，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentBean</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * author : xiaowei     * content : 正解啊，比如中午登机，早上不吃空腹上，到时候飞机餐就算是两个圆圆的小面包都吃得有滋有味！开始怀疑，到底是飞机旅行、真是高大上呀！??哈哈…我见不少人特意留着飞机上发的食物带回去，落地后送人吃，很拽的来一句：飞机食品哦！…笑得不行鸟     * avatar : http://pic1.zhimg.com/da8e974dc_im.jpg     * time : 1413603692     * reply_to : {"content":"习惯就好了。。 国内的航空公司基本都刷过。。 掌握了\u201c让飞机餐变得非常好吃\u201d的秘诀 同学们准备好 秘诀就是〈饿半天肚子登机〉 等到你吃到飞机餐那刻会泪流满面\u2026\u2026 好吧说了那么多其实也就因为六个字 没钱\u2026没钱\u2026没钱 所以，努力当大爷自己买小飞机吧！","status":0,"id":545589,"author":"Samuelback"}     * id : 545838     * likes : 2     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>CommentsBean<span class="token operator">></span> comments<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>CommentsBean<span class="token operator">></span> <span class="token function">getComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> comments<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setComments</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>CommentsBean<span class="token operator">></span> comments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>comments <span class="token operator">=</span> comments<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CommentsBean</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String author<span class="token punctuation">;</span>        <span class="token keyword">private</span> String content<span class="token punctuation">;</span>        <span class="token keyword">private</span> String avatar<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> time<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * content : 习惯就好了。。 国内的航空公司基本都刷过。。 掌握了“让飞机餐变得非常好吃”的秘诀 同学们准备好 秘诀就是〈饿半天肚子登机〉 等到你吃到飞机餐那刻会泪流满面…… 好吧说了那么多其实也就因为六个字 没钱…没钱…没钱 所以，努力当大爷自己买小飞机吧！         * status : 0         * id : 545589         * author : Samuelback         */</span>        <span class="token keyword">private</span> ReplyToBean reply_to<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> likes<span class="token punctuation">;</span>        <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> author<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> content<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> avatar<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAvatar</span><span class="token punctuation">(</span>String avatar<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>avatar <span class="token operator">=</span> avatar<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> time<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> ReplyToBean <span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> reply_to<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReply_to</span><span class="token punctuation">(</span>ReplyToBean reply_to<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reply_to <span class="token operator">=</span> reply_to<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLikes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> likes<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLikes</span><span class="token punctuation">(</span><span class="token keyword">int</span> likes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>likes <span class="token operator">=</span> likes<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReplyToBean</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> String content<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>            <span class="token keyword">private</span> String author<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> expandState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getExpandState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> expandState<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setExpandState</span><span class="token punctuation">(</span><span class="token keyword">int</span> expandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>expandState <span class="token operator">=</span> expandState<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> content<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> id<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> author<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.然后，开始编写<code>itme_comment.xml</code>文件，用来提供给Adapter的每一个item</p><p><img src="https://kanghanbin.github.io/blog/comment1.png" alt=""></p><p>xml代码如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>paddingTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.codeest.geeknews.widget.CircleImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/civ_comment_face<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginEnd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/comment_face_size<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/comment_face_size<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_comment_name<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">bold</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_comment_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/comment_text<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>14sp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>lineSpacingMultiplier</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.3<span class="token punctuation">"</span></span>            <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_comment_reply<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/comment_reply<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>ellipsize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>end<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/reply_bg<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>paddingStart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>lineSpacingMultiplier</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.2<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12dp<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_comment_time<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentStart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/comment_btn<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_centerVertical</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_toEndOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/tv_comment_time<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginStart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_comment_expand<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/comment_expand<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_centerVertical</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/comment_btn<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_comment_like<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentEnd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_centerVertical</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginEnd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/comment_btn<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>drawableLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_daily_like<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>drawablePadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/comment_line<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><h3 id="四，重点CommentAdapter"><a href="#四，重点CommentAdapter" class="headerlink" title="四，重点CommentAdapter"></a>四，重点CommentAdapter</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token operator">&lt;</span>CommentAdapter<span class="token punctuation">.</span>ViewHolder<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> LayoutInflater inflater<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>CommentBean<span class="token punctuation">.</span>CommentsBean<span class="token operator">></span> mList<span class="token punctuation">;</span>    <span class="token keyword">private</span> Context mContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATE_NULL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//未知</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATE_NONE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无需展开</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATE_EXPAND <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//已展开</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATE_SHRINK <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//已收缩</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_LINE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//起始最多显示2行</span>    <span class="token keyword">public</span> <span class="token function">CommentAdapter</span><span class="token punctuation">(</span>Context mContext<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>CommentBean<span class="token punctuation">.</span>CommentsBean<span class="token operator">></span> mList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mList <span class="token operator">=</span> mList<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mContext <span class="token operator">=</span> mContext<span class="token punctuation">;</span>        inflater <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ViewHolder <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>ViewGroup parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ViewHolder</span><span class="token punctuation">(</span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_comment<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token keyword">final</span> ViewHolder holder<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CommentBean<span class="token punctuation">.</span>CommentsBean info <span class="token operator">=</span> mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        ImageLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span>info<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>holder<span class="token punctuation">.</span>civFace<span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>tvName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>tvContent<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>tvTime<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">formatTime2String</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>tvLike<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getLikes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> info<span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            SpannableString ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpannableString</span><span class="token punctuation">(</span><span class="token string">"@"</span> <span class="token operator">+</span> info<span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> info<span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ss<span class="token punctuation">.</span><span class="token function">setSpan</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ForegroundColorSpan</span><span class="token punctuation">(</span>ContextCompat<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span>R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>comment_at<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>info<span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">,</span> Spanned<span class="token punctuation">.</span>SPAN_INCLUSIVE_INCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            holder.tvReply.setText(String.format("@%s: %s",info.getReply_to().getAuthor(),info.getReply_to().getContent()));</span>            holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpandState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> STATE_NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//未知</span>                holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">.</span><span class="token function">getLineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> MAX_LINE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>MAX_LINE<span class="token punctuation">)</span><span class="token punctuation">;</span>                            holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                            holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"展开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExpandState</span><span class="token punctuation">(</span>STATE_SHRINK<span class="token punctuation">)</span><span class="token punctuation">;</span>                            holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnStateClickListener</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>                            mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExpandState</span><span class="token punctuation">(</span>STATE_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpandState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> STATE_NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//无需展开</span>                holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpandState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> STATE_EXPAND<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//已展开</span>                holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"收起"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnStateClickListener</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//已收缩</span>                holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>MAX_LINE<span class="token punctuation">)</span><span class="token punctuation">;</span>                holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"展开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnStateClickListener</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getAdapterPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            holder<span class="token punctuation">.</span>tvReply<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            holder<span class="token punctuation">.</span>tvExpand<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">OnStateClickListener</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> <span class="token punctuation">{</span>        TextView replyView<span class="token punctuation">;</span>        <span class="token keyword">int</span> position<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">OnStateClickListener</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span>TextView replyView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>replyView <span class="token operator">=</span> replyView<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TextView tv <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> view<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpandState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> STATE_SHRINK<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"收起"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                replyView<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                replyView<span class="token punctuation">.</span><span class="token function">setEllipsize</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExpandState</span><span class="token punctuation">(</span>STATE_EXPAND<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"展开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                replyView<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>MAX_LINE<span class="token punctuation">)</span><span class="token punctuation">;</span>                replyView<span class="token punctuation">.</span><span class="token function">setEllipsize</span><span class="token punctuation">(</span>TextUtils<span class="token punctuation">.</span>TruncateAt<span class="token punctuation">.</span>END<span class="token punctuation">)</span><span class="token punctuation">;</span>                mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReply_to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExpandState</span><span class="token punctuation">(</span>STATE_SHRINK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ViewHolder</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>civ_comment_face<span class="token punctuation">)</span>        CircleImageView civFace<span class="token punctuation">;</span>        <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_comment_name<span class="token punctuation">)</span>        TextView tvName<span class="token punctuation">;</span>        <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_comment_content<span class="token punctuation">)</span>        TextView tvContent<span class="token punctuation">;</span>        <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_comment_time<span class="token punctuation">)</span>        TextView tvTime<span class="token punctuation">;</span>        <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_comment_expand<span class="token punctuation">)</span>        TextView tvExpand<span class="token punctuation">;</span>        <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_comment_like<span class="token punctuation">)</span>        TextView tvLike<span class="token punctuation">;</span>        <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_comment_reply<span class="token punctuation">)</span>        TextView tvReply<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ViewHolder</span><span class="token punctuation">(</span>View itemView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>itemView<span class="token punctuation">)</span><span class="token punctuation">;</span>            ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>itemView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后，常规操作调用</p><pre class=" language-java"><code class="language-java">         mList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommentAdapter</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span>mList<span class="token punctuation">)</span><span class="token punctuation">;</span>        rvCommentList<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinearLayoutManager</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rvCommentList<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>mAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>完成。。。</p><p><img src="https://kanghanbin.github.io/blog/comment.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CoordinatorLayout打造折叠悬浮效果</title>
      <link href="/2018/09/18/CoordinatorLayout%E6%89%93%E9%80%A0%E6%8A%98%E5%8F%A0%E6%82%AC%E6%B5%AE%E6%95%88%E6%9E%9C/"/>
      <url>/2018/09/18/CoordinatorLayout%E6%89%93%E9%80%A0%E6%8A%98%E5%8F%A0%E6%82%AC%E6%B5%AE%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="一、CoordinatorLayout"><a href="#一、CoordinatorLayout" class="headerlink" title="一、CoordinatorLayout"></a>一、CoordinatorLayout</h3><p> 是一个<code>ViewGroup</code>，遵循Material 风格，包含在 support Library中，结合<code>AppbarLayout</code>, <code>CollapsingToolbarLayout</code>等 可 产生各种炫酷的折叠悬浮效果。 </p><h3 id="二、AppBarLayout"><a href="#二、AppBarLayout" class="headerlink" title="二、AppBarLayout"></a>二、AppBarLayout</h3><p> 是一个vertical的<code>LinearLayout</code>，其子View应通过下面两种方式来提供他们的<code>Behavior</code>。 </p><p>1.代码方式：</p><pre class=" language-java"><code class="language-java"><span class="token function">setScrollFlags</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></code></pre><p>2.xmL方式:</p><pre class=" language-xml"><code class="language-xml">app:layout_scrollFlags</code></pre><p>具体的<code>app:layout_scrollFlags</code>有这么几个： <code>scroll</code>, <code>exitUntilCollapsed</code>, <code>enterAlways</code>, <code>enterAlwaysCollapsed</code>, snap </p><table><thead><tr><th>常量</th><th>常数值</th><th>解释</th></tr></thead><tbody><tr><td>SCROLL_FLAG_ENTER_ALWAYS</td><td>4（0x00000004）</td><td>当进入（在屏幕上滚动）时，无论滚动视图是否也在滚动，视图都将滚动任何向下滚动事件。这通常被称为“快速返回”模式。</td></tr><tr><td>SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED</td><td>8（0x00000008）</td><td><code>enterAlways</code>的另一个标志，它修改返回的视图，最初只回滚到它的折叠高度。一旦滚动视图到达其滚动范围的末尾，该视图的其余部分将滚动到视图中。折叠高度由视图的最小高度定义。</td></tr><tr><td>SCROLL_FLAG_EXIT_UNTIL_COLLAPSED</td><td>2（0x00000002）</td><td>退出（滚动屏幕）时，视图将滚动直到“折叠”。折叠高度由视图的最小高度定义。</td></tr><tr><td>SCROLL_FLAG_SCROLL</td><td>1（0x00000001）</td><td>视图将滚动与滚动事件直接相关。需要设置此标志才能使任何其他标志生效。如果在此之前的任何兄弟视图没有此标志，则此值无效</td></tr><tr><td>SCROLL_FLAG_SNAP</td><td>16（0x00000010）</td><td>在滚动结束时，如果视图仅部分可见，则它将被捕捉并滚动到其最近的边缘。例如，如果视图仅显示其底部25％，则它将完全滚出屏幕。相反，如果它的底部75％是可见的，那么它将完全滚动到视图中。</td></tr></tbody></table><p>上面解释是官方翻译的，不好理解，可以直接看运行效果演示gif。</p><p>他必须严格地是<code>CoordinatorLayout</code>的子View，不然他一点作用都发挥不出来。</p><h3 id="三、AppBarLayout下方的滑动控件"><a href="#三、AppBarLayout下方的滑动控件" class="headerlink" title="三、AppBarLayout下方的滑动控件"></a>三、AppBarLayout下方的滑动控件</h3><p>比如<code>RecyclerView</code>，<code>NestedScrollView</code>（与<code>AppBarLayout</code>同属于<code>CoordinatorLayout</code>的子View,并列的关系）,必须严格地通过在xml中指出其滑动<code>Behavior</code>来与<code>AppBarLayout</code>进行绑定。通常这样：</p><pre class=" language-xml"><code class="language-xml">app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" </code></pre><h3 id="四、CollapsingToolbarLayout"><a href="#四、CollapsingToolbarLayout" class="headerlink" title="四、CollapsingToolbarLayout"></a>四、CollapsingToolbarLayout</h3><p>是一个专门用来包裹<code>Toolbar</code>的控件，里面可以放置一个<code>imageView</code>和一个<code>toolbar</code>然后轻松地实现：随着滑动，图片和toolbar的标题也有动画。 </p><p>内部的子View一般都要加上属性：</p><pre class=" language-xml"><code class="language-xml">app:layout_collapseMode=""</code></pre><p>常用的是parallax，pin。</p><p>parallax是视差滚动，用在<code>imageView</code>, pin是固定，用在toolbar。 </p><p>用<code>setContentScrimColor(int)</code>或者<code>setContentScrim(drawable)</code>来设置内容纱布，就是当折叠到只剩下Toolbar的时候，用一个另外的图片或者颜色来设置toolbar的背景。 </p><h3 id="五、Toolbar"><a href="#五、Toolbar" class="headerlink" title="五、Toolbar"></a>五、Toolbar</h3><p>他的title如果需要带有<code>CollapsingToolbarLayout</code>的动画的话，就要用<code>collapsingToolbarLayout.setTitle()</code>; 否则是没有动画的，其他的和toolbar平时一样。</p><h3 id="六、代码"><a href="#六、代码" class="headerlink" title="六、代码"></a>六、代码</h3><p>下面通过代码的方式看看效果</p><p>首先看看xml布局</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.CoordinatorLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.AppBarLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/appbar<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.CollapsingToolbarLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/collapsingToolbar<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>contentScrim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorPrimary<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>statusBarScrim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorPrimary<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_scrollFlags</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll|exitUntilCollapsed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>250dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>scaleType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>centerCrop<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/kobe<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_collapseMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parallax<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.Toolbar</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/toolbar<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>?attr/actionBarSize<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>minHeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>?attr/actionBarSize<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>科比<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>titleTextColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorPrimary<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_collapseMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pin<span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.v7.widget.Toolbar</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.CollapsingToolbarLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.AppBarLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v4.widget.NestedScrollView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/rv_main<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_behavior</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/appbar_scrolling_view_behavior<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/textContent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.v4.widget.NestedScrollView</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.CoordinatorLayout</span><span class="token punctuation">></span></span></code></pre><p>activity里面</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Toolbar toolbar<span class="token punctuation">;</span>    <span class="token keyword">private</span> CollapsingToolbarLayout collapsingToolbarLayout<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param savedInstanceState     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        toolbar <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>        collapsingToolbarLayout <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>collapsingToolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>        toolbar<span class="token punctuation">.</span><span class="token function">setNavigationIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>back<span class="token punctuation">)</span><span class="token punctuation">;</span>        collapsingToolbarLayout<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"科比背打科比哈哈哈哈哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="七、运行效果"><a href="#七、运行效果" class="headerlink" title="七、运行效果"></a>七、运行效果</h3><ol><li><p>app:layout_scrollFlags=”scroll|exitUntilCollapsed”</p><p><img src="https://kanghanbin.github.io/blog/exitunticollapsed.gif" alt=""></p></li><li><p>app:layout_scrollFlags=”scroll|enterAlways”</p><p><img src="https://kanghanbin.github.io/blog/enteralways.gif" alt=""></p></li><li><p>app:layout_scrollFlags=”scroll|enterAlwaysCollapsed”</p><p><img src="https://kanghanbin.github.io/blog/enteralwayscollapsed.gif" alt=""></p></li><li><p>app:layout_scrollFlags=”scroll|snap”</p><p><img src="https://kanghanbin.github.io/blog/snap.gif" alt=""></p></li></ol><p>最后，附上Demo地址：<a href="https://github.com/Kanghanbin/CoordinatorLayoutDemo" target="_blank" rel="noopener">https://github.com/Kanghanbin/CoordinatorLayoutDemo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Material Design </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于recycleview的快速添加弹窗不关闭，列表数据实时展示问题</title>
      <link href="/2018/09/04/%E5%85%B3%E4%BA%8Erecycleview%E7%9A%84%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0%E5%BC%B9%E7%AA%97%E4%B8%8D%E5%85%B3%E9%97%AD%EF%BC%8C%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E5%B1%95%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2018/09/04/%E5%85%B3%E4%BA%8Erecycleview%E7%9A%84%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0%E5%BC%B9%E7%AA%97%E4%B8%8D%E5%85%B3%E9%97%AD%EF%BC%8C%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E5%B1%95%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="需求来源"><a href="#需求来源" class="headerlink" title="需求来源"></a>需求来源</h3><p>目前做的是一个采集的App，配合金种子云平台的安卓采集端，有个界面是需要实现快速采集，每次采集完成后采集弹框不消失，还要动态去更新背后的<code>recycleview</code>，然而弹框  + 软键盘的展示使得<code>Recycleview</code>的可见区域很小。</p><h3 id="初步实现"><a href="#初步实现" class="headerlink" title="初步实现"></a>初步实现</h3><p>界面展示：</p><p><img src="https://kanghanbin.github.io/blog/14.jpg" alt=""></p><p>动态效果：</p><p><img src="https://kanghanbin.github.io/blog/%E6%BB%91%E5%8A%A8.gif" alt=""></p><p>具体实现对应xml代码如下，不多做解释：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/root_layout<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/tabbgcolor2<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.nercita.commoncustomview.SearchTopBar</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/searchTopbar<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>isShowSearchEditText</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>searchText</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入要查找的小区号<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>searchisShowLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>searchisShowRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>searchleftSrc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/icon_white_back<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>searchleftTopText</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>返回<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>searchrightSrc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/icon_saoma<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>searchrightTopText</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>扫码<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/top_liner<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_name<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>35dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/layout_name_bgcolor<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>drawableRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/pulldown<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center|left<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/txt_color<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/bt_insert<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>27dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/btn_shape_name<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>drawableLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/edit<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>paddingBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>paddingTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>插入<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/bt_delete<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>27dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/btn_shape_name<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>drawableLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/deletewhite<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>paddingBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>paddingTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>删除<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>45dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_sortNum<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/distance_100<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/shape_plan_hearder<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>序号<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/text_color<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">bold</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_plotCode<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/shape_plan_hearder<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小区号<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/text_color<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">bold</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_totalRows<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/shape_plan_hearder<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>行数<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/text_color<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">bold</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_sortOrder<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/shape_plan_hearder<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>方向<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/text_color<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span>                        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">bold</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.RecyclerView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/rv_compile<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.v7.widget.RecyclerView</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>45dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/fragment_bottom_bg<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_vertical<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_last<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>drawableLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/icon_left<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上一列<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_sub<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/subblack<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_current<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_total<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_add<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/addblack<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_next<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>drawableRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/icon_right<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>下一列<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>有弹窗弹出，弹窗用<code>DialogFragment</code>，弹窗弹出/收起对应<code>top_liner</code>的隐藏/显示，这样做的目的是为<code>recycleview</code>腾出点空间，不然<code>recycleview</code>更矮的可怜。</p><p><img src="https://kanghanbin.github.io/blog/%E5%BC%B9%E7%AA%97.png" alt=""></p><p>可以看出<code>recycleview</code>的可见区域变小了，被软键盘+弹窗给遮挡了，恰巧我们这里需求是：每次保存没必要关闭弹窗。所以新增的数据在<code>recycleview</code>的可见区域里也看不到，这样的话用户就不知道到底有没有添加进去，导致用户体验不好</p><h3 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h3><p>1.弹窗弹出/收起对应<code>top_liner</code>的隐藏/显示</p><p>2.软键盘弹出时（），让<code>recycleview</code>高度缩小，软键盘收起时，恢复原样</p><p>3.每次保存或修改数据后，让弹窗背后的<code>recycleview</code>滑动到当前修改行，让用户可以看到</p><h3 id="优化方案实现"><a href="#优化方案实现" class="headerlink" title="优化方案实现"></a>优化方案实现</h3><p>1.添加四个方法：</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * @param row      * 滑动到指定行     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>        row<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        rvCompile<span class="token punctuation">.</span><span class="token function">scrollToPosition</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置缩小高度     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setShortHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDimensionPixelOffset</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>distance_40<span class="token punctuation">)</span><span class="token punctuation">;</span>        LinearLayout<span class="token punctuation">.</span>LayoutParams linearParams <span class="token operator">=</span> <span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> rvCompile<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linearParams<span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>        rvCompile<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>linearParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 保存原始高度     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveNormalHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>normalHeight <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LinearLayout<span class="token punctuation">.</span>LayoutParams linearParams <span class="token operator">=</span> <span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> rvCompile<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             normalHeight <span class="token operator">=</span> linearParams<span class="token punctuation">.</span>height<span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"存储正常高度:"</span> <span class="token operator">+</span> normalHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置正常高度     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNormalHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinearLayout<span class="token punctuation">.</span>LayoutParams linearParams <span class="token operator">=</span> <span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> rvCompile<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linearParams<span class="token punctuation">.</span>height <span class="token operator">=</span> normalHeight<span class="token punctuation">;</span>        rvCompile<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>linearParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.在<code>onCreate（）</code>里调用<code>saveNormalHeight</code>()保存原始高度，在<code>onResume()</code>中实现软键盘监听，然后控制<code>recycleview</code>高度和定位行，只贴出相代码</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ····        KeyboardStautusDetectorUtil keyboardStautusDetectorUtil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyboardStautusDetectorUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyboardStautusDetectorUtil<span class="token punctuation">.</span><span class="token function">setmVisibilityListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyboardStautusDetectorUtil<span class="token punctuation">.</span>KeyboardVisibilityListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onVisibilityChanged</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> keyboardVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>keyboardVisible <span class="token operator">&amp;&amp;</span> dialogIsDiss<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setShortHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mCurrentRow <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dialogIsDiss<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">scrollTo</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">scrollTo</span><span class="token punctuation">(</span>mCurrentRow<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">setNormalHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyboardStautusDetectorUtil<span class="token punctuation">.</span><span class="token function">registerActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ···    <span class="token punctuation">}</span></code></pre><p>关于  if (keyboardVisible &amp;&amp; dialogIsDiss) 判断条件加了个dialogIsDiss是因为要排除搜索框中的软键盘弹出</p><p>3.添加弹窗的监听事件，显示隐藏<code>top_liner</code></p><pre class=" language-java"><code class="language-java">     <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dialogDismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                topLiner<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                dialogIsDiss <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dialogShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dialogIsDiss <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                topLiner<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://kanghanbin.github.io/blog/%E5%AE%8C%E6%95%B4demo.gif" alt=""></p><h3 id="遇到的坑："><a href="#遇到的坑：" class="headerlink" title="遇到的坑："></a>遇到的坑：</h3><p>在监听软键盘弹出隐藏时，刚开始打算用给跟布局添加<code>addOnLayoutChangeListener</code> 方法实现，然而发现不会成功，打断点调试时候发现bottom和oldBottom 不为0的情况下始终是相等的，但是网上却说这个方法确实能监听到。我猜测是我用了DialogFragment原因</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLayoutChange</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span>                               <span class="token keyword">int</span> bottom<span class="token punctuation">,</span> <span class="token keyword">int</span> oldLeft<span class="token punctuation">,</span> <span class="token keyword">int</span> oldTop<span class="token punctuation">,</span> <span class="token keyword">int</span> oldRight<span class="token punctuation">,</span> <span class="token keyword">int</span> oldBottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// old是改变前的左上右下坐标点值，没有old的是改变后的左上右下坐标点值</span>        <span class="token comment" spellcheck="true">// 现在认为只要控件将Activity向上推的高度超过了1/3屏幕高，就认为软键盘弹起</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldBottom <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>oldBottom <span class="token operator">-</span> bottom <span class="token operator">></span> keyHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ToastUtil.toast(CompileActivity.this, "监听到软键盘弹起...");</span>            <span class="token function">setShortHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mCurrentRow <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dialogIsDiss<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">scrollTo</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">scrollTo</span><span class="token punctuation">(</span>mCurrentRow<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldBottom <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">!=</span> <span class="token number">0</span>                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bottom <span class="token operator">-</span> oldBottom <span class="token operator">></span> keyHeight<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// ToastUtil.toast(CompileActivity.this, "监听到软件盘关闭...");</span>             <span class="token function">setNormalHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><a href="https://www.zhihu.com/question/44269936" target="_blank" rel="noopener">后来用了知乎上这种方法</a></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建时间：2018/8/31 * 编写人：kanghb * 功能描述： */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyboardStautusDetectorUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SOFT_KEY_BOARD_MIN_HEIGHT <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> KeyboardVisibilityListener mVisibilityListener<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> keyboardVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerFragment</span><span class="token punctuation">(</span>Fragment f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">registerView</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerActivity</span><span class="token punctuation">(</span>Activity a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">registerView</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> KeyboardStautusDetectorUtil <span class="token function">registerView</span><span class="token punctuation">(</span><span class="token keyword">final</span> View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewTreeObserver<span class="token punctuation">.</span>OnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Rect r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                v<span class="token punctuation">.</span><span class="token function">getWindowVisibleDisplayFrame</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> heightDiff <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">getRootView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>bottom <span class="token operator">-</span> r<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>heightDiff <span class="token operator">></span> SOFT_KEY_BOARD_MIN_HEIGHT<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// if more than 100 pixels, its probably a keyboard...</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyboardVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        keyboardVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>mVisibilityListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            mVisibilityListener<span class="token punctuation">.</span><span class="token function">onVisibilityChanged</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>keyboardVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        keyboardVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>mVisibilityListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            mVisibilityListener<span class="token punctuation">.</span><span class="token function">onVisibilityChanged</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> KeyboardStautusDetectorUtil <span class="token function">setmVisibilityListener</span><span class="token punctuation">(</span>KeyboardVisibilityListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mVisibilityListener <span class="token operator">=</span> listener<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">KeyboardVisibilityListener</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onVisibilityChanged</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> keyboardVisible<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>目前没发现什么问题，也解决了我所遇到的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>神兵利器Dragger2学习篇</title>
      <link href="/2018/08/23/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8Dragger2%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
      <url>/2018/08/23/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8Dragger2%E5%AD%A6%E4%B9%A0%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/Kanghanbin/Kanghanbin.github.io/blob/master/blog/11.jpg?raw=true" alt=""></p><p>Dagger ，早有耳闻，但一直没有与他正真的认识过。Dagger 英文翻译为“匕首”，这可能就是把它称作神兵利器的原因。当我看一些开源项目在使用<code>dagger2</code> 时，我停止了前进的步伐，查阅了网上一些层差不齐的资料后，感觉还是懵逼状态，正当我感受到了从入门到放弃的状态时，<a href="https://www.jianshu.com/p/cd2c1c9f68d4" target="_blank" rel="noopener">看到了一篇相对好理解一写的博文</a>，我又开始踏上了从放弃到入门之路。</p><h3 id="背景（日常念经，了解一下）"><a href="#背景（日常念经，了解一下）" class="headerlink" title="背景（日常念经，了解一下）"></a>背景（日常念经，了解一下）</h3><p>Dagger ，鼎鼎大名的Square公司 开发的，光听Square，就知道肯定不简单(<code>okhttp</code>，Picasso，<code>leakcanary</code>，等等等等）起初Square公司受到<code>Guice</code>的启发而开发了Dagger，但是Dagger这种半静态半运行时的框架还是有些性能问题（虽说依赖注入是完全静态的，但是其有向无环图(Directed Acyclic Graph)还是基于反射来生成的，这无论在大型的服务端应用还是在Android应用上都不是最优方案）。因此Google工程师Fork了Dagger项目，对它进行了改造。于是变演变出了今天我们要讨论的Dagger2，所以说Dagger2其实就是高配版的Dagger。 </p><p>Dagger2 基于Java注解来实现的完全在编译阶段完成<strong>依赖注入</strong>的开源库，主要用于模块间解耦、提高代码的健壮性和可维护性。Dagger2在编译阶段通过apt利用Java注解自动生成Java代码，然后结合手写的代码来自动帮我们完成依赖注入的工作。 </p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>上文中提到了Dagger2 是解决Android或java中依赖注入的一个类库（Dependency Injection类库） ，通过注解在编译期生成代码的方式实现注入。那为什么要用依赖注入呢？首先看个例子</p><p><img src="https://Kanghanbin.github.io/blog/11.png" alt=""></p><p><img src="https://Kanghanbin.github.io/blog/12.png" alt=""></p><p>上面两张图很形象的说明了使用依赖的差别，只不过用的是构造函数传参给成员变量赋值，实现注入（后面简称构造注入）。前者在编码中肯定不提倡，因为Major和 Student耦合性太高。当然，除了构造函数注入还有接口注入：实现接口方法，同样以传参的方式实现注入。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Injection</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Injection</span><span class="token operator">&lt;</span>Engine<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Major major<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>Major major<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>重点来了</strong>当然，前两者注入方式需要编写大量代码，Dagger2是通过Java注解在编译期来实现依赖注入的 </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建时间：2018/8/23 * 编写人：kanghb * 功能描述：学生 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Inject</span>    Major major<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"major="</span> <span class="token operator">+</span> major <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Dagger2注解"><a href="#Dagger2注解" class="headerlink" title="Dagger2注解"></a>Dagger2注解</h3><p>Dagger2是基于Java注解来实现依赖注入的，那么在正式使用之前我们需要先了解下Dagger2中的注解。Dagger2使用过程中我们通常接触到的注解主要包括：@Inject, @Module, @Provides, @Component, @Qulifier, @Scope, @Singleten。 </p><ul><li><p>@Inject：@Inject有两个作用，一是用来标记需要依赖的变量，以此告诉Dagger2为它提供依赖；二是用来标记构造函数，Dagger2通过@Inject注解可以在需要这个类实例的时候来找到这个构造函数并把相关实例构造出来，以此来为被@Inject标记了的变量提供依赖；</p></li><li><p>@Module：@Module用于标注提供依赖的类。你可能会有点困惑，上面不是提到用@Inject标记构造函数就可以提供依赖了么，为什么还需要@Module？很多时候我们需要提供依赖的构造函数是第三方库的，我们没法给它加上@Inject注解，又比如说提供以来的构造函数是带参数的，如果我们之所简单的使用@Inject标记它，那么他的参数又怎么来呢？@Module正是帮我们解决这些问题的。</p></li><li><p>@Provides：@Provides用于标注Module所标注的类中的方法，该方法在需要提供依赖时被调用，从而把预先提供好的对象当做依赖给标注了@Inject的变量赋值；</p></li><li><p>@Component：@Component用于标注接口，是依赖需求方和依赖提供方之间的桥梁。被Component标注的接口在编译时会生成该接口的实现类（如果@Component标注的接口为StudentComponent，则编译期生成的实现类为DaggerStudentComponent）,我们通过调用这个实现类的方法完成注入；</p></li><li><p>@Qulifier：@Qulifier用于自定义注解，也就是说@Qulifier就如同Java提供的几种基本元注解一样用来标记注解类。我们在使用@Module来标注提供依赖的方法时，方法名我们是可以随便定义的（虽然我们定义方法名一般以provide开头，但这并不是强制的，只是为了增加可读性而已）。那么Dagger2怎么知道这个方法是为谁提供依赖呢？答案就是返回值的类型，Dagger2根据返回值的类型来决定为哪个被@Inject标记了的变量赋值。但是问题来了，一旦有多个一样的返回类型Dagger2就懵逼了。@Qulifier的存在正式为了解决这个问题，我们使用@Qulifier来定义自己的注解，然后通过自定义的注解去标注提供依赖的方法和依赖需求方（也就是被@Inject标注的变量），这样Dagger2就知道为谁提供依赖了。—-一个更为精简的定义：当类型不足以鉴别一个依赖的时候，我们就可以使用这个注解标示；</p></li><li><p>@Scope：@Scope同样用于自定义注解，我能可以通过@Scope自定义的注解来限定注解作用域，实现局部的单例；</p></li><li><p>@Singleton：@Singleton其实就是一个通过@Scope定义的注解，我们一般通过它来实现全局单例。但实际上它并不能t体现全局单例，是否能提供全局单例还要取决于对应的Component是否为一个全局对象。</p></li></ul><p>  我们提到@Inject和@Module都可以提供依赖，那如果我们即在构造函数上通过标记@Inject提供依赖，有通过@Module提供依赖Dagger2会如何选择呢？具体规则如下： </p><h3 id="Dagger2使用"><a href="#Dagger2使用" class="headerlink" title="Dagger2使用"></a>Dagger2使用</h3><h4 id="一、-inject标注构造方法提供依赖"><a href="#一、-inject标注构造方法提供依赖" class="headerlink" title="一、@inject标注构造方法提供依赖"></a>一、@inject标注构造方法提供依赖</h4><p>1.添加依赖</p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// Add Dagger dependencies</span>dependencies <span class="token punctuation">{</span>  compile <span class="token string">'com.google.dagger:dagger:2.x'</span>  annotationProcessor <span class="token string">'com.google.dagger:dagger-compiler:2.x'</span><span class="token punctuation">}</span></code></pre><p>关于Dagger2的依赖配置就不在这里占用篇幅去描述了，大家可以到它的github主页下去查看官方教程<a href="https://github.com/google/dagger" target="_blank" rel="noopener">https://github.com/google/dagger</a>。接下来我们还是拿前面的Car和Engine来举例。</p><p>2.Student类是依赖需求方，依赖了Major类；因此我们需要在类变量Major上添加@Inject来告诉Dagger2来为自己提供依赖。 </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建时间：2018/8/23 * 编写人：kanghb * 功能描述：学生（依赖需求方） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Inject</span>    Major major<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"major="</span> <span class="token operator">+</span> major <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.Major类是依赖提供方，因此我们需要在它的构造函数上添加@Inject </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建时间：2018/8/23 * 编写人：kanghb * 功能描述：专业（依赖提供方） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Major</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Inject</span>    <span class="token keyword">public</span> <span class="token function">Major</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是Major的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.创建一个用@Component标注的接口<code>StudentComponent</code>，这个<code>StudentComponent</code>其实就是一个注入器，这里用来将Major注入到Student中。 </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建时间：2018/8/24 * 编写人：kanghb * 功能描述： */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>注意：看一些文档里这里bind方法命名都是用inject的，我不知道是不是强制必须inject，所以写了bind看看测试一下，稍后揭晓结果。</strong></p><p>5.上述操作完成后Build下项目，让Dagger2帮我们生成相关的Java类。</p><p><img src="https://github.com/Kanghanbin/Kanghanbin.github.io/blob/master/blog/13.png?raw=true" alt="生成三个Java类"></p><p>6.Student的构造函数中调用Dagger2生成的<code>DaggerStudentComponent</code>来实现注入。</p><p>Student类完整代码如下</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建时间：2018/8/23 * 编写人：kanghb * 功能描述：学生（需求依赖方） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Inject</span>    Major major<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DaggerStudentComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"major="</span> <span class="token operator">+</span> major <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Major <span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> major<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>7.查看运行结果如下，证明我们前面说的inject方法不是强制的但有益于提升代码的可读性） </p><pre class=" language-java"><code class="language-java"> Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">08</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">58.035</span> <span class="token number">2459</span><span class="token operator">-</span><span class="token number">2459</span><span class="token operator">/</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>dagger2demo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> 我是Major的方法</code></pre><h4 id="二、-Module-Provide标注构造方法提供依赖"><a href="#二、-Module-Provide标注构造方法提供依赖" class="headerlink" title="二、@Module +@Provide标注构造方法提供依赖"></a>二、@Module +@Provide标注构造方法提供依赖</h4><p>如果创建Major的构造函数是带参数的呢？比如说制造一各专业是需要教师(teacher)的。或者Major类是我们无法修改的呢(依赖第三方，无法修改构造函数)？这时候就需要@Module和@Provide上场了。</p><p>1.在Student类的成员变量Major上加上@Inject表示自己需要Dagger2为自己提供依赖；Major类的构造函数上的@Inject也需要去掉，因为现在不需要通过构造函数上的@Inject来提供依赖了。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Inject</span>    Major major<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DaggerStudentComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeMajorModule</span><span class="token punctuation">(</span><span class="token keyword">new</span>                                 <span class="token class-name">MakeMajorModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"major="</span> <span class="token operator">+</span> major <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Major <span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> major<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.新建个Module类来生成依赖对象。前面介绍的@Module就是用来标准这个类的，而@Provide则是用来标注具体提供依赖对象的方法（这里有个不成文的规定，被@Provide标注的方法命名我们一般以provide开头，这并不是强制的但有益于提升代码的可读性） </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MakeMajorModule</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MakeMajorModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token keyword">public</span> Major <span class="token function">provideMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"kanghanbin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.对StudentComponent进行一点点修改，之前的@Component注解是不带参数的，现在我们需要加上<code>modules = {MakeMajorModule.class}</code>，用来告诉Dagger2提供依赖的是<code>MakeMajorModule</code>这个类。 </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>MakeMajorModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.Student类的构造函数我们也需要修改，相比之前多了个<code>markCarModule(new MarkCarModule())</code>方法，这就相当于告诉了注入器<code>DaggerStudentComponent</code>把<code>MakeMajorModule</code>提供的依赖注入到了Student类中 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    DaggerStudentComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeMajorModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MakeMajorModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>注意：其实这里加不加 <code>makeMajorModule(new MakeMajorModule())</code>方法，都能顺利执行，为什么呢，打开<code>DaggerStudentComponent</code>一探究竟，发现就算不使用 <code>makeMajorModule(new MakeMajorModule())</code>方法，在调用build方法时，也直接 new MakeMajorModule（）。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> MakeMajorModule makeMajorModule<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> StudentComponent <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>makeMajorModule <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>makeMajorModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeMajorModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DaggerStudentComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Builder <span class="token function">makeMajorModule</span><span class="token punctuation">(</span>MakeMajorModule makeMajorModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>makeMajorModule <span class="token operator">=</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>makeMajorModule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.执行结果同样是</p><pre class=" language-java"><code class="language-java"><span class="token number">08</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">58.035</span> <span class="token number">2459</span><span class="token operator">-</span><span class="token number">2459</span><span class="token operator">/</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>dagger2demo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> 我是Major的方法</code></pre><h4 id="三、-Qualifier实现一个类中有两个相同类型不同对象"><a href="#三、-Qualifier实现一个类中有两个相同类型不同对象" class="headerlink" title="三、@Qualifier实现一个类中有两个相同类型不同对象"></a>三、@Qualifier实现一个类中有两个相同类型不同对象</h4><p>Dagger2根据返回值的类型来决定为哪个被@Inject标记了的变量赋值。但是问题来了，一旦有多个一样的返回类型Dagger2就懵逼了。@<code>Qulifier</code>的存在正式为了解决这个问题，我们使用@<code>Qulifier</code>来定义自己的注解，然后通过自定义的注解去标注提供依赖的方法和依赖需求方。</p><p>1.使用<code>Qulifier</code>定义两个注解： </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">QualifierA</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">QualifierB</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>2.对依赖提供方做出修改</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MakeMajorModule</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MakeMajorModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@QualifierA</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token keyword">public</span> Major <span class="token function">provideMajorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"kanghanbin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@QualifierB</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token keyword">public</span> Major <span class="token function">provideMajorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"fenglin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.对依赖需求方做出修改</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@QualifierA</span>    <span class="token annotation punctuation">@Inject</span>    Major major<span class="token punctuation">;</span>    <span class="token annotation punctuation">@QualifierB</span>    <span class="token annotation punctuation">@Inject</span>    Major major2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DaggerStudentComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeMajorModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MakeMajorModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"major="</span> <span class="token operator">+</span> major <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Major <span class="token function">getMajorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> major<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Major <span class="token function">getMajorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> major2<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.添加测试代码查看运行结果</p><pre class=" language-java"><code class="language-java">  Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">getMajorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">getMajorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">08</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">20.678</span> <span class="token number">7632</span><span class="token operator">-</span><span class="token number">7632</span><span class="token operator">/</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>dagger2demo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> 我是teacher为kanghanbinMajor的方法<span class="token number">08</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">20.679</span> <span class="token number">7632</span><span class="token operator">-</span><span class="token number">7632</span><span class="token operator">/</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>dagger2demo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> 我是teacher为fenglinMajor的方法</code></pre><h4 id="四、-Scope限定作用域"><a href="#四、-Scope限定作用域" class="headerlink" title="四、@Scope限定作用域"></a>四、@Scope限定作用域</h4><p>1.首先我们需要通过@Scope定义一个<code>StudentScope</code>注解： </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Scope</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">StudentScope</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>2.接着我们需要用这个<code>@StudentScope</code>去标记依赖提供方<code>MakeMajorModule</code>。 </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@StudentScope</span><span class="token annotation punctuation">@Provides</span><span class="token keyword">public</span> Major <span class="token function">provideMajorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"kanghanbin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.用<code>@StudentScope</code>去标注注入器 <code>StudentComponent</code> </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@StudentScope</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>MakeMajorModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.Student类改为</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Inject</span>Major major<span class="token punctuation">;</span><span class="token annotation punctuation">@Inject</span>Major major2<span class="token punctuation">;</span></code></pre><p>5.Major类改为</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Major</span><span class="token punctuation">(</span>String teacher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>teacher <span class="token operator">=</span> teacher<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Create a Major"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是teacher为"</span><span class="token operator">+</span> teacher <span class="token operator">+</span> <span class="token string">"Major的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>Create a Major</code></pre><p>但是如果我么不加<code>@StudentScope</code>，就打印出两次</p><pre class=" language-java"><code class="language-java">Create a MajorCreate a Major</code></pre><p>所以，通过@Scope实现了局部的单例。 </p><h3 id="dagger2原理分析"><a href="#dagger2原理分析" class="headerlink" title="dagger2原理分析"></a>dagger2原理分析</h3><h4 id="1-MakeMajorModule和MakeMajorModule-ProvideMajorAFactory"><a href="#1-MakeMajorModule和MakeMajorModule-ProvideMajorAFactory" class="headerlink" title="1.MakeMajorModule和MakeMajorModule_ProvideMajorAFactory"></a>1.<code>MakeMajorModule</code>和<code>MakeMajorModule_ProvideMajorAFactory</code></h4><blockquote><pre class=" language-java"><code class="language-java">自己写的类<span class="token annotation punctuation">@Module</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MakeMajorModule</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MakeMajorModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    @QualifierA</span>    <span class="token annotation punctuation">@StudentScope</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token keyword">public</span> Major <span class="token function">provideMajorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"kanghanbin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> Dagger2生成的工厂类<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MakeMajorModule_ProvideMajorAFactory</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token operator">&lt;</span>Major<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> MakeMajorModule module<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">MakeMajorModule_ProvideMajorAFactory</span><span class="token punctuation">(</span>MakeMajorModule module<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">assert</span> module <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>module <span class="token operator">=</span> module<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Major <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>        module<span class="token punctuation">.</span><span class="token function">provideMajorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Cannot return null from a non-@Nullable @Provides method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Factory<span class="token operator">&lt;</span>Major<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>MakeMajorModule module<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MakeMajorModule_ProvideMajorAFactory</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></blockquote><p>可以看到dagger2依据我们写的类给我们提供了一个工厂类，get（）方法调用了<code>MakeMajorModule</code>的<code>provideMajorA</code>()拿到了Major，create(MakeMajorModule module)通过传进来的MakeMajorModule 创建工厂类实例。</p><h4 id="2-StudentComponent-和DaggerStudentComponent"><a href="#2-StudentComponent-和DaggerStudentComponent" class="headerlink" title="2.StudentComponent 和DaggerStudentComponent"></a>2.StudentComponent 和<code>DaggerStudentComponent</code></h4><blockquote><pre class=" language-java"><code class="language-java">自己写的类<span class="token annotation punctuation">@StudentScope</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>MakeMajorModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> Dagger2生成的StudentComponent的实现类 <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerStudentComponent</span> <span class="token keyword">implements</span> <span class="token class-name">StudentComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Provider<span class="token operator">&lt;</span>Major<span class="token operator">></span> provideMajorAProvider<span class="token punctuation">;</span>  <span class="token keyword">private</span> MembersInjector<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentMembersInjector<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">DaggerStudentComponent</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">assert</span> builder <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token function">initialize</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Builder <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> StudentComponent <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">final</span> Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>provideMajorAProvider <span class="token operator">=</span>        DoubleCheck<span class="token punctuation">.</span><span class="token function">provider</span><span class="token punctuation">(</span>MakeMajorModule_ProvideMajorAFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>makeMajorModule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>studentMembersInjector <span class="token operator">=</span> Student_MembersInjector<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>provideMajorAProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token punctuation">{</span>    studentMembersInjector<span class="token punctuation">.</span><span class="token function">injectMembers</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MakeMajorModule makeMajorModule<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> StudentComponent <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>makeMajorModule <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>makeMajorModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeMajorModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DaggerStudentComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Builder <span class="token function">makeMajorModule</span><span class="token punctuation">(</span>MakeMajorModule makeMajorModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>makeMajorModule <span class="token operator">=</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>makeMajorModule<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><p><code>DaggerStudentComponent</code>就是<code>StudentComponent</code> 的实现类，通过builder()方法返回了Builder对象，然后build创建了一个<code>DaggerStudentComponent</code>对象。在构造函数中初始化了<code>provideMajorAProvider</code> 和 <code>studentMembersInjector</code>。当调用inject时候，执行 <code>studentMembersInjector.injectMembers(student)</code>。</p><ol start="3"><li><h4 id="分析上一步提到的Student-MembersInjector"><a href="#分析上一步提到的Student-MembersInjector" class="headerlink" title="分析上一步提到的Student_MembersInjector"></a>分析上一步提到的Student_MembersInjector</h4></li></ol><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Student_MembersInjector</span> <span class="token keyword">implements</span> <span class="token class-name">MembersInjector</span><span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Provider<span class="token operator">&lt;</span>Major<span class="token operator">></span> majorAndMajor2Provider<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Student_MembersInjector</span><span class="token punctuation">(</span>Provider<span class="token operator">&lt;</span>Major<span class="token operator">></span> majorAndMajor2Provider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">assert</span> majorAndMajor2Provider <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>majorAndMajor2Provider <span class="token operator">=</span> majorAndMajor2Provider<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> MembersInjector<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>Provider<span class="token operator">&lt;</span>Major<span class="token operator">></span> majorAndMajor2Provider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student_MembersInjector</span><span class="token punctuation">(</span>majorAndMajor2Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectMembers</span><span class="token punctuation">(</span>Student instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Cannot inject members into a null reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    instance<span class="token punctuation">.</span>major <span class="token operator">=</span> majorAndMajor2Provider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    instance<span class="token punctuation">.</span>major2 <span class="token operator">=</span> majorAndMajor2Provider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">injectMajor</span><span class="token punctuation">(</span>Student instance<span class="token punctuation">,</span> Provider<span class="token operator">&lt;</span>Major<span class="token operator">></span> majorProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    instance<span class="token punctuation">.</span>major <span class="token operator">=</span> majorProvider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">injectMajor2</span><span class="token punctuation">(</span>Student instance<span class="token punctuation">,</span> Provider<span class="token operator">&lt;</span>Major<span class="token operator">></span> major2Provider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    instance<span class="token punctuation">.</span>major2 <span class="token operator">=</span> major2Provider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><p>create方法在<code>DaggerStudentComponent</code>中被调用用来创建一个<code>Student_MembersInjector</code>对象，<code>injectMembers</code>（）方法也是在<code>DaggerStudentComponent</code>的inject中被调用初始化，用majorAndMajor2Provider.get()来初始化Student中的两个Major对象，从而Student依赖需求方就得到了major和major2的实例。而这里的majorAndMajor2Provider.get()就是<code>MakeMajorModule_ProvideMajorAFactory</code>里面的get方法。</p><h4 id="换一种角度去思考（结合方法调用顺序再来一波分析）"><a href="#换一种角度去思考（结合方法调用顺序再来一波分析）" class="headerlink" title="换一种角度去思考（结合方法调用顺序再来一波分析）"></a>换一种角度去思考（结合方法调用顺序再来一波分析）</h4><p>首先Major构造方法是在<code>provideMajor</code>被调用的，然后看看是谁调用了<code>provideMajor</code>这个方法，发现是被<code>MakeMajorModule_ProvideMajorFactory</code>类里的get方法调用，再看看是谁调用了get方法，看到了是由<code>Student_MembersInjector</code>的<code>injectMembers</code>方法调用，而<code>injectMembers</code>正是在<code>DaggerStudentComponent</code>的inject方法中执行的，瞬间恍然大悟，从后往前看更容易理解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Provides</span><span class="token keyword">public</span> Major <span class="token function">provideMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"kanghanbin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Major <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>        module<span class="token punctuation">.</span><span class="token function">provideMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Cannot return null from a non-@Nullable @Provides method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectMembers</span><span class="token punctuation">(</span>Student instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Cannot inject members into a null reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//都调用的是</span>    instance<span class="token punctuation">.</span>major <span class="token operator">=</span> majorAndMajor2Provider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    instance<span class="token punctuation">.</span>major2 <span class="token operator">=</span> majorAndMajor2Provider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token punctuation">{</span>    studentMembersInjector<span class="token punctuation">.</span><span class="token function">injectMembers</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文只是简单的对dagger2分析了一下，没有真正在安卓项目中去运用，在开发安卓App过程中会遇到的比这更复杂，但是相信掌握了本篇所讲内容，再去结合实际开发去用它就没有那么难了。</p><p><img src="https://upload-images.jianshu.io/upload_images/1504173-0b81f8a57768a703.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/819/format/webp" alt="最后盗个图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 依赖注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>aidl的学习记录</title>
      <link href="/2018/08/14/aidl%E7%9A%84l%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/08/14/aidl%E7%9A%84l%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、aidl简介"><a href="#一、aidl简介" class="headerlink" title="一、aidl简介"></a>一、aidl简介</h3><p><code>aidl</code>（Android Interface Definition Language ）,安卓接口定义语言，在 Android 中，每一个进程都有自己的<code>Dalvik</code> VM实例，都有自己的一块独立的内存，都在自己的内存上存储自己的数据，执行着自己的操作，都在自己的那片狭小的空间里过完自己的一生。每个进程之间都你不知我，我不知你，就像是隔江相望的两座小岛一样，都在同一个世界里，但又各自有着自己的世界  ，AIDL就像是两座小岛之间的桥梁，用它可以的一种进程间通信 (IPC) 。 </p><p>设计这门语言的目的是为了<strong>实现进程间通信，尤其是在涉及多进程并发情况下的进程间通信</strong>。 </p><h3 id="二、支持的数据类型"><a href="#二、支持的数据类型" class="headerlink" title="二、支持的数据类型"></a>二、支持的数据类型</h3><p>1.java八种基本数据类型包括byte，short，int，long，float，double，boolean，char,.String类型,CharSequence类型</p><p>2.List 和 Map </p><ul><li>元素必须是 AIDL 支持的数据类型</li><li>Server 端具体的类里则必须是 ArrayList 或者 HashMap</li></ul><p>3.其他 AIDL 生成的接口</p><p>4.实现 Parcelable 的实体</p><h3 id="三、tag标识"><a href="#三、tag标识" class="headerlink" title="三、tag标识"></a>三、tag标识</h3><p>AIDL中的定向 tag 表示了在跨进程通信中数据的流向，其中 in 表示数据只能由客户端流向服务端， out 表示数据只能由服务端流向客户端，而 inout 则表示数据可在服务端与客户端之间双向流通。其中，数据流向是针对在客户端中的那个传入方法的对象而言的。in 为定向 tag 的话表现为服务端将会接收到一个那个对象的完整数据，但是客户端的那个对象不会因为服务端对传参的修改而发生变动；out 的话表现为服务端将会接收到那个对象的参数为空的对象，但是在服务端对接收到的空对象有任何修改之后客户端将会同步变动；inout 为定向 tag 的情况下，服务端将会接收到客户端传来对象的完整信息，并且客户端将会同步服务端对该对象的任何变动。 </p><h3 id="四、学习目的"><a href="#四、学习目的" class="headerlink" title="四、学习目的"></a>四、学习目的</h3><p>实现进程间通信，尤其是在涉及多进程并发情况下的进程间通信。</p><h3 id="五、项目概括"><a href="#五、项目概括" class="headerlink" title="五、项目概括"></a>五、项目概括</h3><p>学习<code>Aidl</code>时，写的demo。项目包含客户端<code>aidlTestClient</code>和服务端<code>aidlTestServer</code>，通过学习<code>aidl</code>实现<code>aidlTestClient</code>和<code>aidlTestServer</code>之间的通讯，也就是跨进程通讯。客户端和服务端分别是两个安卓app</p><h3 id="六、项目实战"><a href="#六、项目实战" class="headerlink" title="六、项目实战"></a>六、项目实战</h3><ul><li>创建 AIDL  </li></ul><p>1.首先，新建一个实体类Book，实现 <code>Parcelable</code> 接口，以便序列化/反序列化 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcelable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 创建时间：2018/8/10 * 编写人：kanghb * 功能描述： */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">Book</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Creator<span class="token operator">&lt;</span>Book<span class="token operator">></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token operator">&lt;</span>Book<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Book <span class="token function">createFromParcel</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Book<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>Parcel dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 参数是一个Parcel,用它来存储与传输数据     * @param dest     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFromParcel</span><span class="token punctuation">(</span>Parcel dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注意，此处的读值顺序应当是和writeToParcel()方法中一致的</span>        price <span class="token operator">=</span> dest<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> dest<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Book{"</span> <span class="token operator">+</span>                <span class="token string">"price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.在src/main目录下新建aidl文件(包含实体类的映射aidl文件和接口aidl文件)，Androidstudio创建很简单，自动生成aidl文件夹。</p><p>实体类映射文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Book.aidl</span><span class="token comment" spellcheck="true">//第一类AIDL文件的例子</span><span class="token comment" spellcheck="true">//这个文件的作用是引入了一个序列化对象 Book 供其他的AIDL文件使用</span><span class="token comment" spellcheck="true">//注意：Book.aidl与Book.java的包名应当是一样的</span><span class="token keyword">package</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意parcelable是小写</span>parcelable Book<span class="token punctuation">;</span></code></pre><p>接口 aidl 文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// AidlBookManager.aidl</span><span class="token keyword">package</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Declare any non-default types here with import statements</span><span class="token keyword">import</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">AidlBookManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Demonstrates some basic types that you can use as parameters     * and return values in AIDL.     */</span>  <span class="token comment" spellcheck="true">//所有的返回值前都不需要加任何东西，不管是什么数据类型</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//传参时除了Java基本类型以及String，CharSequence之外的类型</span>    <span class="token comment" spellcheck="true">//其他类型的参数都需要标上方向类型：in(输入), out(输出), inout(输入输出)，具体加什么量需而定</span>    <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>in Book book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在接口 aidl 文件中定义将来要在跨进程进行的操作，上面的接口中定义了两个方法：</p><ul><li>addBook: 添加 Book</li><li>getBooks：获取 Book列表</li></ul><p><strong>需要注意的是</strong>：非默认支持数据类型需要导入包，传参是，除了基本数据类型外，其他都要表明方向类型tag</p><p>3.build project，生成java文件</p><p>点击 <code>Build</code> -&gt; <code>Make Project</code>，然后等待构建完成。</p><p>然后就会在 <code>build/generated/source/aidl/你的 flavor/</code> 下生成一个 Java 文件。代码自动生成，aidl强大之处</p><p><img src="https://raw.githubusercontent.com/Kanghanbin/Aidl/master/img/1.png" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * This file is auto-generated.  DO NOT MODIFY. * Original file: D:\\workspace\\aidlTestClient\\app\\src\\main\\aidl\\kanghb\\com\\aidltest\\AidlBookManager.aidl */</span><span class="token keyword">package</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AidlBookManager</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Local-side IPC implementation stub class.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Binder</span> <span class="token keyword">implements</span> <span class="token class-name">kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>AidlBookManager</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String DESCRIPTOR <span class="token operator">=</span> <span class="token string">"kanghb.com.aidltest.AidlBookManager"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Construct the stub at attach it to the interface.         */</span>        <span class="token keyword">public</span> <span class="token function">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Cast an IBinder object into an kanghb.com.aidltest.AidlBookManager interface,         * generating a proxy if needed.         */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>AidlBookManager <span class="token function">asInterface</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface iin <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iin <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>iin <span class="token keyword">instanceof</span> <span class="token class-name">kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>AidlBookManager</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>AidlBookManager<span class="token punctuation">)</span> iin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>AidlBookManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel data<span class="token punctuation">,</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> INTERFACE_TRANSACTION<span class="token operator">:</span> <span class="token punctuation">{</span>                    reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> TRANSACTION_getBooks<span class="token operator">:</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token operator">&lt;</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book<span class="token operator">></span> _result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    reply<span class="token punctuation">.</span><span class="token function">writeTypedList</span><span class="token punctuation">(</span>_result<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> TRANSACTION_addBook<span class="token operator">:</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book _arg0<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> data<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        _arg0 <span class="token operator">=</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>CREATOR<span class="token punctuation">.</span><span class="token function">createFromParcel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        _arg0 <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>_arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>                    reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>AidlBookManager</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder mRemote<span class="token punctuation">;</span>            <span class="token function">Proxy</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mRemote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> DESCRIPTOR<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**             * Demonstrates some basic types that you can use as parameters             * and return values in AIDL.             */</span><span class="token comment" spellcheck="true">//所有的返回值前都不需要加任何东西，不管是什么数据类型</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token operator">&lt;</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException <span class="token punctuation">{</span>                android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _data <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _reply <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token operator">&lt;</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book<span class="token operator">></span> _result<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>Stub<span class="token punctuation">.</span>TRANSACTION_getBooks<span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _result <span class="token operator">=</span> _reply<span class="token punctuation">.</span><span class="token function">createTypedArrayList</span><span class="token punctuation">(</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>CREATOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _result<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//传参时除了Java基本类型以及String，CharSequence之外的类型</span><span class="token comment" spellcheck="true">//都需要在前面加上定向tag，具体加什么量需而定</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book book<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException <span class="token punctuation">{</span>                android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _data <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _reply <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>book <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        _data<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        book<span class="token punctuation">.</span><span class="token function">writeToParcel</span><span class="token punctuation">(</span>_data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        _data<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>Stub<span class="token punctuation">.</span>TRANSACTION_addBook<span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TRANSACTION_getBooks <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TRANSACTION_addBook <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Demonstrates some basic types that you can use as parameters     * and return values in AIDL.     */</span><span class="token comment" spellcheck="true">//所有的返回值前都不需要加任何东西，不管是什么数据类型</span>    <span class="token keyword">public</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token operator">&lt;</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传参时除了Java基本类型以及String，CharSequence之外的类型</span><span class="token comment" spellcheck="true">//都需要在前面加上定向tag，具体加什么量需而定</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book book<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2.编写服务端<code>aidlTestServer</code></li></ul><p>创建 Service，在其中创建上面生成的 Binder 对象实例，实现接口定义的方法；然后在 onBind() 中返回</p><p>创建将来要运行在另一个进程的 Service，在其中实现了 AIDL 接口中定义的方法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Nullable<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 创建时间：2018/8/13 * 编写人：kanghb * 功能描述： */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AIDLService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//包含Book对象的list</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//由AIDL文件生成的AidlbookManager，文件目录在app\build\generated\source\aidl\debug\kanghb\com\aidltest\AidlBookManager.java</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AidlBookManager<span class="token punctuation">.</span>Stub bookManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AidlBookManager<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"invoking getBooks() method , now the list is : "</span> <span class="token operator">+</span> books<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>books <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> books<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>books <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>book <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"addBook: Book is null in In"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//尝试修改客户端传过来book参数，观察到客户端的反馈</span>                book<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>books<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//打印mBooks列表，观察客户端传过来的值</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"invoking addBooks() method , now the list is : "</span> <span class="token operator">+</span> books<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Book book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Android开发艺术探索"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码中，创建的对象是一个 <code>IMyAidl.Stub()</code> ，它是一个 Binder 。</p><p><strong>在 Manifest 文件中声明：</strong></p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.AIDLService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                &lt;action android:name = "com.khb.aidl.server"/>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span></code></pre><p><strong>这里需要注意</strong>：因为我的服务端和客户端分别是两个app所以是两个进程，如果在一个项目里跨进程service可以这样声明：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AIDLService<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>enabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:aidl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>3.编写客户端<code>aidlTestClient</code></li></ul><p>在<code>MainActivity</code>中放入一个send按钮，点击实现跨进程通信</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltestclient<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>ComponentName<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>ServiceConnection<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>AidlBookManager<span class="token punctuation">;</span><span class="token keyword">import</span> kanghb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>aidltest<span class="token punctuation">.</span>Book<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//由AIDL文件生成的Java类</span>    <span class="token keyword">private</span> AidlBookManager aidlBookManager <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//标志当前与服务端连接状况的布尔值，false为未连接，true为连接中</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mBound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> booklist<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果与服务端的连接处于未连接状态，则尝试连接</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">attemptToBindService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"当前与服务端处于未连接状态，正在尝试重连，请稍后再试"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>aidlBookManager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Book book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"APP研发录In"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            aidlBookManager<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token function">getLocalClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 尝试与服务端建立连接     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attemptToBindService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"com.khb.aidl.server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setPackage</span><span class="token punctuation">(</span><span class="token string">"kanghb.com.aidltest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> serviceConnection<span class="token punctuation">,</span> Context<span class="token punctuation">.</span>BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">attemptToBindService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">unbindService</span><span class="token punctuation">(</span>serviceConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>            mBound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ServiceConnection serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">,</span> IBinder service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token function">getLocalClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"service connected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            aidlBookManager <span class="token operator">=</span> AidlBookManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>            mBound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>aidlBookManager <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    booklist <span class="token operator">=</span> aidlBookManager<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token function">getLocalClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> booklist<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token function">getLocalClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"service disconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mBound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行两个app至手机上，查看log日志，分析夸进程通讯</p><p>客户端点击send</p><p><img src="https://raw.githubusercontent.com/Kanghanbin/Aidl/master/img/2.png" alt=""></p><p>服务端接受：</p><p><img src="https://raw.githubusercontent.com/Kanghanbin/Aidl/master/img/3.png" alt=""></p><h3 id="七、采坑记录"><a href="#七、采坑记录" class="headerlink" title="七、采坑记录"></a>七、采坑记录</h3><p>①.默认生成的模板类的对象只支持为 in 的定向 tag</p><p>因为默认生成的类里面只有 <em>writeToParcel()</em> 方法，而如果要支持为 out 或者 inout 的定向 tag 的话，还需要实现 <em>readFromParcel()</em> 方法 </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 参数是一个Parcel,用它来存储与传输数据 * @param dest */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFromParcel</span><span class="token punctuation">(</span>Parcel dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注意，此处的读值顺序应当是和writeToParcel()方法中一致的</span>    name <span class="token operator">=</span> dest<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    price <span class="token operator">=</span> dest<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>②.Book.aidl必须和Book.java的名字，刚开始我申明为<code>AidlBook.aidl</code>,发现会build’出错</p><p>③.Book.aidl和Book.java 包名必须一致，为了方便移植aidl我把Book.java也移到了aidl目录中，这样移植只需要copy<code>aidl</code>即可以，但是这样会有个问题。Androidstudio找不到Book，因为。Gradle 默认是将 java 代码的访问路径设置在 java 包下的 可以通过下面方法解决：</p><ul><li>修改 build.gradle 文件：在 android{} 中间加上下面的内容：</li></ul><pre class=" language-groovy"><code class="language-groovy">sourceSets <span class="token punctuation">{</span>    main <span class="token punctuation">{</span>        java<span class="token operator">.</span>srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'src/main/java'</span><span class="token punctuation">,</span> <span class="token string">'src/main/aidl'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后，贴上github项目地址：<a href="https://github.com/Kanghanbin/Aidl" target="_blank" rel="noopener">https://github.com/Kanghanbin/Aidl</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> aidl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Adroid Binder的理解</title>
      <link href="/2018/08/10/%E5%85%B3%E4%BA%8EAdroid-Binder%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/08/10/%E5%85%B3%E4%BA%8EAdroid-Binder%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a><strong>一. 前言</strong></h2><p>这篇文章我酝酿了很久，参考了很多资料，读了很多源码，却依旧不敢下笔。生怕自己理解上还有偏差，对大家造成误解，贻笑大方。又怕自己理解不够透彻，无法用清晰直白的文字准确的表达出 Binder 的设计精髓。直到今天提笔写作时还依旧战战兢兢。</p><p>Binder 之复杂远远不是一篇文章就能说清楚的，本文想站在一个更高的维度来俯瞰 Binder 的设计，最终帮助大家形成一个完整的概念。对于应用层开发的同学来说，理解到本文这个程度也就差不多了。希望更加深入理解 Binder 实现机制的，可以阅读文末的参考资料以及相关源码。</p><h2 id="二-Binder-概述"><a href="#二-Binder-概述" class="headerlink" title="二. Binder 概述"></a><strong>二. Binder 概述</strong></h2><p>简单介绍下什么是 Binder。Binder 是一种进程间通信机制，基于开源的 OpenBinder 实现；OpenBinder 起初由 Be Inc. 开发，后由 Plam Inc. 接手。从字面上来解释 Binder 有胶水、粘合剂的意思，顾名思义就是粘和不同的进程，使之实现通信。对于 Binder 更全面的定义，等我们介绍完 Binder 通信原理后再做详细说明。</p><h2 id="2-1-为什么必须理解-Binder-？"><a href="#2-1-为什么必须理解-Binder-？" class="headerlink" title="2.1 为什么必须理解 Binder ？"></a>2.1 为什么必须理解 Binder ？</h2><p>作为 Android 工程师的你，是不是常常会有这样的疑问：</p><ul><li>为什么 Activity 间传递对象需要序列化？</li><li>Activity 的启动流程是什么样的？</li><li>四大组件底层的通信机制是怎样的？</li><li>AIDL 内部的实现原理是什么？</li><li>插件化编程技术应该从何学起？等等…</li></ul><p>这些问题的背后都与 Binder 有莫大的关系，要弄懂上面这些问题理解 Bidner 通信机制是必须的。</p><p>我们知道 Android 应用程序是由 Activity、Service、Broadcast Receiver 和 Content Provide 四大组件中的一个或者多个组成的。有时这些组件运行在同一进程，有时运行在不同的进程。这些进程间的通信就依赖于 Binder IPC 机制。不仅如此，Android 系统对应用层提供的各种服务如：ActivityManagerService、PackageManagerService 等都是基于 Binder IPC 机制来实现的。Binder 机制在 Android 中的位置非常重要，毫不夸张的说理解 Binder 是迈向 Android 高级工程的第一步。</p><h2 id="2-2-为什么是-Binder"><a href="#2-2-为什么是-Binder" class="headerlink" title="2.2 为什么是 Binder ?"></a>2.2 为什么是 Binder ?</h2><p>Android 系统是基于 Linux 内核的，Linux 已经提供了管道、消息队列、共享内存和 Socket 等 IPC 机制。那为什么 Android 还要提供 Binder 来实现 IPC 呢？主要是基于<strong>性能</strong>、<strong>稳定性</strong>和<strong>安全性</strong>几方面的原因。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>首先说说性能上的优势。Socket 作为一款通用接口，其传输效率低，开销大，主要用在跨网络的进程间通信和本机上进程间的低速通信。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的缓存区中，然后再从内核缓存区拷贝到接收方缓存区，至少有两次拷贝过程。共享内存虽然无需拷贝，但控制复杂，难以使用。Binder 只需要一次数据拷贝，性能上仅次于共享内存。</p><p>注：各种IPC方式数据拷贝次数，此表来源于<a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/universus/article/details/6211589" target="_blank" rel="noopener">Android Binder 设计与实现 - 设计篇</a></p><p><img src="https://pic1.zhimg.com/80/v2-2160e70ca6e813ff28c34eec5ae8209c_hd.jpg" alt="img"></p><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>再说说稳定性，Binder 基于 C/S 架构，客户端（Client）有什么需求就丢给服务端（Server）去完成，架构清晰、职责明确又相互独立，自然稳定性更好。共享内存虽然无需拷贝，但是控制负责，难以使用。从稳定性的角度讲，Binder 机制是优于内存共享的。</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>另一方面就是安全性。Android 作为一个开放性的平台，市场上有各类海量的应用供用户选择安装，因此安全性对于 Android 平台而言极其重要。作为用户当然不希望我们下载的 APP 偷偷读取我的通信录，上传我的隐私数据，后台偷跑流量、消耗手机电量。传统的 IPC 没有任何安全措施，完全依赖上层协议来确保。首先传统的 IPC 接收方无法获得对方可靠的进程用户ID/进程ID（UID/PID），从而无法鉴别对方身份。Android 为每个安装好的 APP 分配了自己的 UID，故而进程的 UID 是鉴别进程身份的重要标志。传统的 IPC 只能由用户在数据包中填入 UID/PID，但这样不可靠，容易被恶意程序利用。可靠的身份标识只有由 IPC 机制在内核中添加。其次传统的 IPC 访问接入点是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。同时 Binder 既支持实名 Binder，又支持匿名 Binder，安全性高。</p><p>基于上述原因，Android 需要建立一套新的 IPC 机制来满足系统对稳定性、传输性能和安全性方面的要求，这就是 Binder。</p><p><strong>最后用一张表格来总结下 Binder 的优势：</strong></p><p><img src="https://pic1.zhimg.com/80/v2-30dce36be4e6617596b5fab96ef904c6_hd.jpg" alt="img"></p><hr><h2 id="三-Linux-下传统的进程间通信原理"><a href="#三-Linux-下传统的进程间通信原理" class="headerlink" title="三. Linux 下传统的进程间通信原理"></a><strong>三. Linux 下传统的进程间通信原理</strong></h2><p>了解 Linux IPC 相关的概念和原理有助于我们理解 Binder 通信原理。因此，在介绍 Binder 跨进程通信原理之前，我们先聊聊 Linux 系统下传统的进程间通信是如何实现。</p><h2 id="3-1-基本概念介绍"><a href="#3-1-基本概念介绍" class="headerlink" title="3.1 基本概念介绍"></a>3.1 基本概念介绍</h2><p>这里我们先从 Linux 中进程间通信涉及的一些基本概念开始介绍，然后逐步展开，向大家说明传统的进程间通信的原理。</p><p><img src="https://pic4.zhimg.com/80/v2-38e2ea1d22660b237e17d2a7f298f3d6_hd.jpg" alt="img"></p><p>上图展示了 Liunx 中跨进程通信涉及到的一些基本概念：</p><ul><li>进程隔离</li><li>进程空间划分：用户空间(User Space)/内核空间(Kernel Space)</li><li>系统调用：用户态/内核态</li></ul><h2 id="进程隔离"><a href="#进程隔离" class="headerlink" title="进程隔离"></a>进程隔离</h2><p>简单的说就是操作系统中，进程与进程间内存是不共享的。两个进程就像两个平行的世界，A 进程没法直接访问 B 进程的数据，这就是进程隔离的通俗解释。A 进程和 B 进程之间要进行数据交互就得采用特殊的通信机制：进程间通信（IPC）。</p><h2 id="进程空间划分：用户空间-User-Space-内核空间-Kernel-Space"><a href="#进程空间划分：用户空间-User-Space-内核空间-Kernel-Space" class="headerlink" title="进程空间划分：用户空间(User Space)/内核空间(Kernel Space)"></a>进程空间划分：用户空间(User Space)/内核空间(Kernel Space)</h2><p>现在操作系统都是采用的虚拟存储器，对于 32 位系统而言，它的寻址空间（虚拟存储空间）就是 2 的 32 次方，也就是 4GB。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也可以访问底层硬件设备的权限。为了保护用户进程不能直接操作内核，保证内核的安全，操作系统从逻辑上将虚拟空间划分为用户空间（User Space）和内核空间（Kernel Space）。针对 Linux 操作系统而言，将最高的 1GB 字节供内核使用，称为内核空间；较低的 3GB 字节供各进程使用，称为用户空间。</p><blockquote><p>简单的说就是，内核空间（Kernel）是系统内核运行的空间，用户空间（User Space）是用户程序运行的空间。为了保证安全性，它们之间是隔离的。</p></blockquote><p><img src="https://pic1.zhimg.com/80/v2-3c719337413b9c5c4ad0b6c6b8eb0291_hd.jpg" alt="img"></p><h2 id="系统调用：用户态与内核态"><a href="#系统调用：用户态与内核态" class="headerlink" title="系统调用：用户态与内核态"></a>系统调用：用户态与内核态</h2><p>虽然从逻辑上进行了用户空间和内核空间的划分，但不可避免的用户空间需要访问内核资源，比如文件操作、访问网络等等。为了突破隔离限制，就需要借助<strong>系统调用</strong>来实现。系统调用是用户空间访问内核空间的唯一方式，保证了所有的资源访问都是在内核的控制下进行的，避免了用户程序对系统资源的越权访问，提升了系统安全性和稳定性。</p><p>Linux 使用两级保护机制：0 级供系统内核使用，3 级供用户程序使用。</p><p>当一个任务（进程）执行系统调用而陷入内核代码中执行时，称进程处于<strong>内核运行态（内核态）</strong>。此时处理器处于特权级最高的（0级）内核代码中执行。当进程处于内核态时，执行的内核代码会使用当前进程的内核栈。每个进程都有自己的内核栈。</p><p>当进程在执行用户自己的代码的时候，我们称其处于<strong>用户运行态（用户态）</strong>。此时处理器在特权级最低的（3级）用户代码中运行。</p><p>系统调用主要通过如下两个函数来实现：</p><pre><code>copy_from_user() //将数据从用户空间拷贝到内核空间copy_to_user() //将数据从内核空间拷贝到用户空间</code></pre><h2 id="3-2-Linux-下的传统-IPC-通信原理"><a href="#3-2-Linux-下的传统-IPC-通信原理" class="headerlink" title="3.2 Linux 下的传统 IPC 通信原理"></a>3.2 Linux 下的传统 IPC 通信原理</h2><p>理解了上面的几个概念，我们再来看看传统的 IPC 方式中，进程之间是如何实现通信的。</p><p>通常的做法是消息发送方将要发送的数据存放在内存缓存区中，通过系统调用进入内核态。然后内核程序在内核空间分配内存，开辟一块内核缓存区，调用 copy<em>from</em>user() 函数将数据从用户空间的内存缓存区拷贝到内核空间的内核缓存区中。同样的，接收方进程在接收数据时在自己的用户空间开辟一块内存缓存区，然后内核程序调用 copy<em>to</em>user() 函数将数据从内核缓存区拷贝到接收进程的内存缓存区。这样数据发送方进程和数据接收方进程就完成了一次数据传输，我们称完成了一次进程间通信。如下图：</p><p><img src="https://pic2.zhimg.com/80/v2-aab2affe42958a659ea8a517ffaff5a0_hd.jpg" alt="img"></p><p>这种传统的 IPC 通信方式有两个问题：</p><ol><li>性能低下，一次数据传递需要经历：内存缓存区 –&gt; 内核缓存区 –&gt; 内存缓存区，需要 2 次数据拷贝；</li><li>接收数据的缓存区由数据接收进程提供，但是接收进程并不知道需要多大的空间来存放将要传递过来的数据，因此只能开辟尽可能大的内存空间或者先调用 API 接收消息头来获取消息体的大小，这两种做法不是浪费空间就是浪费时间。</li></ol><hr><h2 id="四-Binder-跨进程通信原理"><a href="#四-Binder-跨进程通信原理" class="headerlink" title="四. Binder 跨进程通信原理"></a><strong>四. Binder 跨进程通信原理</strong></h2><p>理解了 Linux IPC 相关概念和通信原理，接下来我们正式介绍下 Binder IPC 的原理。</p><h2 id="4-1-动态内核可加载模块-amp-amp-内存映射"><a href="#4-1-动态内核可加载模块-amp-amp-内存映射" class="headerlink" title="4.1 动态内核可加载模块 &amp;&amp; 内存映射"></a>4.1 动态内核可加载模块 &amp;&amp; 内存映射</h2><p>正如前面所说，跨进程通信是需要内核空间做支持的。传统的 IPC 机制如管道、Socket 都是内核的一部分，因此通过内核支持来实现进程间通信自然是没问题的。但是 Binder 并不是 Linux 系统内核的一部分，那怎么办呢？这就得益于 Linux 的<strong>动态内核可加载模块</strong>（Loadable Kernel Module，LKM）的机制；模块是具有独立功能的程序，它可以被单独编译，但是不能独立运行。它在运行时被链接到内核作为内核的一部分运行。这样，Android 系统就可以通过动态添加一个内核模块运行在内核空间，用户进程之间通过这个内核模块作为桥梁来实现通信。</p><blockquote><p>在 Android 系统中，这个运行在内核空间，负责各个用户进程通过 Binder 实现通信的内核模块就叫 <strong>Binder 驱动</strong>（Binder Dirver）。</p></blockquote><p>那么在 Android 系统中用户进程之间是如何通过这个内核模块（Binder 驱动）来实现通信的呢？难道是和前面说的传统 IPC 机制一样，先将数据从发送方进程拷贝到内核缓存区，然后再将数据从内核缓存区拷贝到接收方进程，通过两次拷贝来实现吗？显然不是，否则也不会有开篇所说的 Binder 在性能方面的优势了。</p><p>这就不得不通道 Linux 下的另一个概念：<strong>内存映射</strong>。</p><p>Binder IPC 机制中涉及到的内存映射通过 mmap() 来实现，mmap() 是操作系统中一种内存映射的方法。内存映射简单的讲就是将用户空间的一块内存区域映射到内核空间。映射关系建立后，用户对这块内存区域的修改可以直接反应到内核空间；反之内核空间对这段区域的修改也能直接反应到用户空间。</p><p>内存映射能减少数据拷贝次数，实现用户空间和内核空间的高效互动。两个空间各自的修改能直接反映在映射的内存区域，从而被对方空间及时感知。也正因为如此，内存映射能够提供对进程间通信的支持。</p><h2 id="4-2-Binder-IPC-实现原理"><a href="#4-2-Binder-IPC-实现原理" class="headerlink" title="4.2 Binder IPC 实现原理"></a>4.2 Binder IPC 实现原理</h2><p>Binder IPC 正是基于内存映射（mmap）来实现的，但是 mmap() 通常是用在有物理介质的文件系统上的。</p><p>比如进程中的用户区域是不能直接和物理设备打交道的，如果想要把磁盘上的数据读取到进程的用户区域，需要两次拷贝（磁盘–&gt;内核空间–&gt;用户空间）；通常在这种场景下 mmap() 就能发挥作用，通过在物理介质和用户空间之间建立映射，减少数据的拷贝次数，用内存读写取代I/O读写，提高文件读取效率。</p><p>而 Binder 并不存在物理介质，因此 Binder 驱动使用 mmap() 并不是为了在物理介质和用户空间之间建立映射，而是用来在内核空间创建数据接收的缓存空间。</p><p>一次完整的 Binder IPC 通信过程通常是这样：</p><ol><li>首先 Binder 驱动在内核空间创建一个数据接收缓存区；</li><li>接着在内核空间开辟一块内核缓存区，建立<strong>内核缓存区</strong>和<strong>内核中数据接收缓存区</strong>之间的映射关系，以及<strong>内核中数据接收缓存区</strong>和<strong>接收进程用户空间地址</strong>的映射关系；</li><li>发送方进程通过系统调用 copy<em>from</em>user() 将数据 copy 到内核中的<strong>内核缓存区</strong>，由于内核缓存区和接收进程的用户空间存在内存映射，因此也就相当于把数据发送到了接收进程的用户空间，这样便完成了一次进程间的通信。</li></ol><p>如下图：</p><p><img src="https://pic4.zhimg.com/80/v2-cbd7d2befbed12d4c8896f236df96dbf_hd.jpg" alt="img"></p><hr><h2 id="五-Binder-通信模型"><a href="#五-Binder-通信模型" class="headerlink" title="五. Binder 通信模型"></a><strong>五. Binder 通信模型</strong></h2><p>介绍完 Binder IPC 的底层通信原理，接下来我们看看实现层面是如何设计的。</p><p>一次完整的进程间通信必然至少包含两个进程，通常我们称通信的双方分别为客户端进程（Client）和服务端进程（Server），由于进程隔离机制的存在，通信双方必然需要借助 Binder 来实现。</p><h2 id="5-1-Client-Server-ServiceManager-驱动"><a href="#5-1-Client-Server-ServiceManager-驱动" class="headerlink" title="5.1 Client/Server/ServiceManager/驱动"></a>5.1 Client/Server/ServiceManager/驱动</h2><p>前面我们介绍过，Binder 是基于 C/S 架构的。由一系列的组件组成，包括 Client、Server、ServiceManager、Binder 驱动。其中 Client、Server、Service Manager 运行在用户空间，Binder 驱动运行在内核空间。其中 Service Manager 和 Binder 驱动由系统提供，而 Client、Server 由应用程序来实现。Client、Server 和 ServiceManager 均是通过系统调用 open、mmap 和 ioctl 来访问设备文件 /dev/binder，从而实现与 Binder 驱动的交互来间接的实现跨进程通信。</p><p><img src="https://pic3.zhimg.com/80/v2-729b3444cd784d882215a24067893d0e_hd.jpg" alt="img"></p><p>Client、Server、ServiceManager、Binder 驱动这几个组件在通信过程中扮演的角色就如同互联网中服务器（Server）、客户端（Client）、DNS域名服务器（ServiceManager）以及路由器（Binder 驱动）之前的关系。</p><p>通常我们访问一个网页的步骤是这样的：首先在浏览器输入一个地址，如 <a href="https://link.zhihu.com/?target=http%3A//www.google.com" target="_blank" rel="noopener">http://www.google.com</a> 然后按下回车键。但是并没有办法通过域名地址直接找到我们要访问的服务器，因此需要首先访问 DNS 域名服务器，域名服务器中保存了 <a href="https://link.zhihu.com/?target=http%3A//www.google.com" target="_blank" rel="noopener">http://www.google.com</a> 对应的 ip 地址 10.249.23.13，然后通过这个 ip 地址才能放到到 <a href="https://link.zhihu.com/?target=http%3A//www.google.com" target="_blank" rel="noopener">http://www.google.com</a> 对应的服务器。</p><p><img src="https://pic4.zhimg.com/80/v2-7c68928e26f5b96b8b3471ebb1927107_hd.jpg" alt="img"></p><p><em>Android Binder 设计与实现一文中对 Client、Server、ServiceManager、Binder 驱动有很详细的描述，以下是部分摘录：</em></p><blockquote><p><strong>Binder 驱动</strong><br>Binder 驱动就如同路由器一样，是整个通信的核心；驱动负责进程之间 Binder 通信的建立，Binder 在进程之间的传递，Binder 引用计数管理，数据包在进程之间的传递和交互等一系列底层支持。<br><strong>ServiceManager 与实名 Binder</strong><br>ServiceManager 和 DNS 类似，作用是将字符形式的 Binder 名字转化成 Client 中对该 Binder 的引用，使得 Client 能够通过 Binder 的名字获得对 Binder 实体的引用。注册了名字的 Binder 叫实名 Binder，就像网站一样除了除了有 IP 地址意外还有自己的网址。Server 创建了 Binder，并为它起一个字符形式，可读易记得名字，将这个 Binder 实体连同名字一起以数据包的形式通过 Binder 驱动发送给 ServiceManager ，通知 ServiceManager 注册一个名为“张三”的 Binder，它位于某个 Server 中。驱动为这个穿越进程边界的 Binder 创建位于内核中的实体节点以及 ServiceManager 对实体的引用，将名字以及新建的引用打包传给 ServiceManager。ServiceManger 收到数据后从中取出名字和引用填入查找表。<br>细心的读者可能会发现，ServierManager 是一个进程，Server 是另一个进程，Server 向 ServiceManager 中注册 Binder 必然涉及到进程间通信。当前实现进程间通信又要用到进程间通信，这就好像蛋可以孵出鸡的前提却是要先找只鸡下蛋！Binder 的实现比较巧妙，就是预先创造一只鸡来下蛋。ServiceManager 和其他进程同样采用 Bidner 通信，ServiceManager 是 Server 端，有自己的 Binder 实体，其他进程都是 Client，需要通过这个 Binder 的引用来实现 Binder 的注册，查询和获取。ServiceManager 提供的 Binder 比较特殊，它没有名字也不需要注册。当一个进程使用 BINDER<em>SET</em>CONTEXT_MGR 命令将自己注册成 ServiceManager 时 Binder 驱动会自动为它创建 Binder 实体（<strong>这就是那只预先造好的那只鸡</strong>）。其次这个 Binder 实体的引用在所有 Client 中都固定为 0 而无需通过其它手段获得。也就是说，一个 Server 想要向 ServiceManager 注册自己的 Binder 就必须通过这个 0 号引用和 ServiceManager 的 Binder 通信。类比互联网，0 号引用就好比是域名服务器的地址，你必须预先动态或者手工配置好。要注意的是，这里说的 Client 是相对于 ServiceManager 而言的，一个进程或者应用程序可能是提供服务的 Server，但对于 ServiceManager 来说它仍然是个 Client。<br><strong>Client 获得实名 Binder 的引用</strong><br>Server 向 ServiceManager 中注册了 Binder 以后， Client 就能通过名字获得 Binder 的引用了。Client 也利用保留的 0 号引用向 ServiceManager 请求访问某个 Binder: 我申请访问名字叫张三的 Binder 引用。ServiceManager 收到这个请求后从请求数据包中取出 Binder 名称，在查找表里找到对应的条目，取出对应的 Binder 引用作为回复发送给发起请求的 Client。从面向对象的角度看，Server 中的 Binder 实体现在有两个引用：一个位于 ServiceManager 中，一个位于发起请求的 Client 中。如果接下来有更多的 Client 请求该 Binder，系统中就会有更多的引用指向该 Binder ，就像 Java 中一个对象有多个引用一样。</p></blockquote><h2 id="5-2-Binder-通信过程"><a href="#5-2-Binder-通信过程" class="headerlink" title="5.2 Binder 通信过程"></a>5.2 Binder 通信过程</h2><p>至此，我们大致能总结出 Binder 通信过程：</p><ol><li>首先，一个进程使用 BINDER<em>SET</em>CONTEXT_MGR 命令通过 Binder 驱动将自己注册成为 ServiceManager；</li><li>Server 通过驱动向 ServiceManager 中注册 Binder（Server 中的 Binder 实体），表明可以对外提供服务。驱动为这个 Binder 创建位于内核中的实体节点以及 ServiceManager 对实体的引用，将名字以及新建的引用打包传给 ServiceManager，ServiceManger 将其填入查找表。</li><li>Client 通过名字，在 Binder 驱动的帮助下从 ServiceManager 中获取到对 Binder 实体的引用，通过这个引用就能实现和 Server 进程的通信。</li></ol><p>我们看到整个通信过程都需要 Binder 驱动的接入。下图能更加直观的展现整个通信过程(为了进一步抽象通信过程以及呈现上的方便，下图我们忽略了 Binder 实体及其引用的概念)：</p><p><img src="https://pic4.zhimg.com/80/v2-67854cdf14d07a6a4acf9d675354e1ff_hd.jpg" alt="img"></p><h2 id="5-3-Binder-通信中的代理模式"><a href="#5-3-Binder-通信中的代理模式" class="headerlink" title="5.3 Binder 通信中的代理模式"></a>5.3 Binder 通信中的代理模式</h2><p>我们已经解释清楚 Client、Server 借助 Binder 驱动完成跨进程通信的实现机制了，但是还有个问题会让我们困惑。A 进程想要 B 进程中某个对象（object）是如何实现的呢？毕竟它们分属不同的进程，A 进程 没法直接使用 B 进程中的 object。</p><p>前面我们介绍过跨进程通信的过程都有 Binder 驱动的参与，因此在数据流经 Binder 驱动的时候驱动会对数据做一层转换。当 A 进程想要获取 B 进程中的 object 时，驱动并不会真的把 object 返回给 A，而是返回了一个跟 object 看起来一模一样的代理对象 objectProxy，这个 objectProxy 具有和 object 一摸一样的方法，但是这些方法并没有 B 进程中 object 对象那些方法的能力，这些方法只需要把把请求参数交给驱动即可。对于 A 进程来说和直接调用 object 中的方法是一样的。</p><p>当 Binder 驱动接收到 A 进程的消息后，发现这是个 objectProxy 就去查询自己维护的表单，一查发现这是 B 进程 object 的代理对象。于是就会去通知 B 进程调用 object 的方法，并要求 B 进程把返回结果发给自己。当驱动拿到 B 进程的返回结果后就会转发给 A 进程，一次通信就完成了。</p><p><img src="https://pic3.zhimg.com/80/v2-13361906ecda16e36a3b9cbe3d38cbc1_hd.jpg" alt="img"></p><h2 id="5-4-Binder-的完整定义"><a href="#5-4-Binder-的完整定义" class="headerlink" title="5.4 Binder 的完整定义"></a>5.4 Binder 的完整定义</h2><p>现在我们可以对 Binder 做个更加全面的定义了：</p><ul><li>从进程间通信的角度看，Binder 是一种进程间通信的机制；</li><li>从 Server 进程的角度看，Binder 指的是 Server 中的 Binder 实体对象；</li><li>从 Client 进程的角度看，Binder 指的是对 Binder 代理对象，是 Binder 实体对象的一个远程代理</li><li>从传输过程的角度看，Binder 是一个可以跨进程传输的对象；Binder 驱动会对这个跨越进程边界的对象对一点点特殊处理，自动完成代理对象和本地对象之间的转换。</li></ul><hr><h2 id="六-手动编码实现跨进程调用"><a href="#六-手动编码实现跨进程调用" class="headerlink" title="六. 手动编码实现跨进程调用"></a><strong>六. 手动编码实现跨进程调用</strong></h2><p>通常我们在做开发时，实现进程间通信用的最多的就是 AIDL。当我们定义好 AIDL 文件，在编译时编译器会帮我们生成代码实现 IPC 通信。借助 AIDL 编译以后的代码能帮助我们进一步理解 Binder IPC 的通信原理。</p><p>但是无论是从可读性还是可理解性上来看，编译器生成的代码对开发者并不友好。比如一个 BookManager.aidl 文件对应会生成一个 BookManager.java 文件，这个 java 文件包含了一个 BookManager 接口、一个 Stub 静态的抽象类和一个 Proxy 静态类。Proxy 是 Stub 的静态内部类，Stub 又是 BookManager 的静态内部类，这就造成了可读性和可理解性的问题。</p><blockquote><p>Android 之所以这样设计其实是有道理的，因为当有多个 AIDL 文件的时候把 BookManager、Stub、Proxy 放在同一个文件里能有效避免 Stub 和 Proxy 重名的问题。</p></blockquote><p>因此便于大家理解，下面我们来手动编写代码来实现跨进程调用。</p><h2 id="6-1-各-Java-类职责描述"><a href="#6-1-各-Java-类职责描述" class="headerlink" title="6.1 各 Java 类职责描述"></a>6.1 各 Java 类职责描述</h2><p>在正式编码实现跨进程调用之前，先介绍下实现过程中用到的一些类。了解了这些类的职责，有助于我们更好的理解和实现跨进程通信。</p><ul><li><strong>IBinder</strong> : IBinder 是一个接口，代表了一种跨进程通信的能力。只要实现了这个借口，这个对象就能跨进程传输。</li><li><strong>IInterface</strong> : IInterface 代表的就是 Server 进程对象具备什么样的能力（能提供哪些方法，其实对应的就是 AIDL 文件中定义的接口）</li><li><strong>Binder</strong> : Java 层的 Binder 类，代表的其实就是 Binder 本地对象。BinderProxy 类是 Binder 类的一个内部类，它代表远程进程的 Binder 对象的本地代理；这两个类都继承自 IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder 驱动会自动完成这两个对象的转换。</li><li><strong>Stub</strong> : AIDL 的时候，编译工具会给我们生成一个名为 Stub 的静态内部类；这个类继承了 Binder, 说明它是一个 Binder 本地对象，它实现了 IInterface 接口，表明它具有 Server 承诺给 Client 的能力；Stub 是一个抽象类，具体的 IInterface 的相关实现需要开发者自己实现。</li></ul><h2 id="6-2-实现过程讲解"><a href="#6-2-实现过程讲解" class="headerlink" title="6.2 实现过程讲解"></a>6.2 实现过程讲解</h2><p>一次跨进程通信必然会涉及到两个进程，在这个例子中 RemoteService 作为服务端进程，提供服务；ClientActivity 作为客户端进程，使用 RemoteService 提供的服务。如下图：</p><p><img src="https://pic2.zhimg.com/80/v2-7ca457119bd700a5acf7f69bb0c07e51_hd.jpg" alt="img"></p><p>那么服务端进程具备什么样的能力？能为客户端提供什么样的服务呢？还记得我们前面介绍过的 IInterface 吗，它代表的就是服务端进程具体什么样的能力。因此我们需要定义一个 BookManager 接口，BookManager 继承自 IIterface，表明服务端具备什么样的能力。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 这个类用来定义服务端 RemoteService 具备什么样的能力 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookManager</span> <span class="token keyword">extends</span> <span class="token class-name">IInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>只定义服务端具备什么样的能力是不够的，既然是跨进程调用，那么接下来我们得实现一个跨进程调用对象 Stub。Stub 继承 Binder, 说明它是一个 Binder 本地对象；实现 IInterface 接口，表明具有 Server 承诺给 Client 的能力；Stub 是一个抽象类，具体的 IInterface 的相关实现需要调用方自己实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name">Binder</span> <span class="token keyword">implements</span> <span class="token class-name">BookManager</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> BookManager <span class="token function">asInterface</span><span class="token punctuation">(</span>IBinder binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>binder <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        IInterface iin <span class="token operator">=</span> binder<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iin <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> iin <span class="token keyword">instanceof</span> <span class="token class-name">BookManager</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>BookManager<span class="token punctuation">)</span> iin<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>binder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> Parcel data<span class="token punctuation">,</span> Parcel reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> INTERFACE_TRANSACTION<span class="token operator">:</span>                reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TRANSAVTION_addBook<span class="token operator">:</span>                data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                Book arg0 <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arg0 <span class="token operator">=</span> Book<span class="token punctuation">.</span>CREATOR<span class="token punctuation">.</span><span class="token function">createFromParcel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>                reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Stub 类中我们重点介绍下 <code>asInterface</code> 和 <code>onTransact</code>。</p><p>先说说 <code>asInterface</code>，当 Client 端在创建和服务端的连接，调用 bindService 时需要创建一个 ServiceConnection 对象作为入参。在 ServiceConnection 的回调方法 onServiceConnected 中 会通过这个 asInterface(IBinder binder) 拿到 BookManager 对象，这个 IBinder 类型的入参 binder 是驱动传给我们的，正如你在代码中看到的一样，方法中会去调用 binder.queryLocalInterface() 去查找 Binder 本地对象，如果找到了就说明 Client 和 Server 在同一进程，那么这个 binder 本身就是 Binder 本地对象，可以直接使用。否则说明是 binder 是个远程对象，也就是 BinderProxy。因此需要我们创建一个代理对象 Proxy，通过这个代理对象来是实现远程访问。</p><p>接下来我们就要实现这个代理类 Proxy 了，既然是代理类自然需要实现 BookManager 接口。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">BookManager</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>IBinder remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>remote <span class="token operator">=</span> remote<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        Parcel data <span class="token operator">=</span> Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Parcel replay <span class="token operator">=</span> Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>book <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                book<span class="token punctuation">.</span><span class="token function">writeToParcel</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            remote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>Stub<span class="token punctuation">.</span>TRANSAVTION_addBook<span class="token punctuation">,</span> data<span class="token punctuation">,</span> replay<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            replay<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            replay<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们看看 addBook() 的实现；在 Stub 类中，addBook(Book book) 是一个抽象方法，Server 端需要去实现它。</p><ul><li>如果 Client 和 Server 在同一个进程，那么直接就是调用这个方法。</li><li>如果是远程调用，Client 想要调用 Server 的方法就需要通过 Binder 代理来完成，也就是上面的 Proxy。</li></ul><p>在 Proxy 中的 addBook() 方法中首先通过 Parcel 将数据序列化，然后调用 remote.transact()。正如前文所述 Proxy 是在 Stub 的 asInterface 中创建，能走到创建 Proxy 这一步就说明 Proxy 构造函数的入参是 BinderProxy，即这里的 remote 是个 BinderProxy 对象。最终通过一系列的函数调用，Client 进程通过系统调用陷入内核态，Client 进程中执行 addBook() 的线程挂起等待返回；驱动完成一系列的操作之后唤醒 Server 进程，调用 Server 进程本地对象的 onTransact()。最终又走到了 Stub 中的 onTransact() 中，onTransact() 根据函数编号调用相关函数（在 Stub 类中为 BookManager 接口中的每个函数中定义了一个编号，只不过上面的源码中我们简化掉了；在跨进程调用的时候，不会传递函数而是传递编号来指明要调用哪个函数）；我们这个例子里面，调用了 Binder 本地对象的 addBook() 并将结果返回给驱动，驱动唤醒 Client 进程里刚刚挂起的线程并将结果返回。</p><p>这样一次跨进程调用就完成了。</p><p>完整的代码我放到 GitHub 上了，有兴趣的小伙伴可以去看看。源码地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/BaronZ88/HelloBinder" target="_blank" rel="noopener">https://github.com/BaronZ88/HelloBinder</a></p><p>最后建议大家在不借助 AIDL 的情况下手写实现 Client 和 Server 进程的通信，加深对 Binder 通信过程的理解。</p><blockquote><p>受个人能力水平限制，文章中难免会有错误。如果大家发现文章不足之处，欢迎与我沟通交流。</p></blockquote><p><strong>本文在写作过程中参考了很多文章、书籍和源码，其中有很多描述和图片都借鉴了下面的文章，在这里感谢大佬们的无私分享！</strong></p><p><strong>参考资料如下：</strong></p><ul><li><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/universus/article/details/6211589" target="_blank" rel="noopener">Android Binder 设计与实现 - 设计篇</a></li><li><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/luoshengyang/article/details/6618363" target="_blank" rel="noopener">Android 进程间通信（IPC）机制 Binder 简要介绍和学习计划</a>、<a href="https://link.zhihu.com/?target=http%3A//item.jd.com/12248208.html" target="_blank" rel="noopener">《Android 系统源代码情景分析》</a></li><li><a href="https://link.zhihu.com/?target=http%3A//weishu.me/2016/01/12/binder-index-for-newer/" target="_blank" rel="noopener">Binder 学习指南</a></li><li><a href="https://link.zhihu.com/?target=http%3A//gityuan.com/2015/10/31/binder-prepare/" target="_blank" rel="noopener">Binder 系列文章</a></li><li><a href="https://link.zhihu.com/?target=https%3A//blog.csdn.net/carson_ho/article/details/73560642" target="_blank" rel="noopener">Android 图文详解 Binder 跨进程通信原理</a></li><li><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/innost/archive/2011/01/09/1931456.html" target="_blank" rel="noopener">Android 深入浅出之 Binder 机制</a></li><li><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/Anker/p/3269106.html" target="_blank" rel="noopener">用户空间与内核空间</a></li><li><a href="https://link.zhihu.com/?target=https%3A//www.cnblogs.com/huxiao-tee/p/4660352.html" target="_blank" rel="noopener">认真分析 mmap ：是什么 为什么 怎么用</a></li></ul><p>这篇文章并非原创，转载自<a href="https://zhuanlan.zhihu.com/p/35519585，主要是为了学习与记录，如果涉及侵权啥的，及时删除" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35519585，主要是为了学习与记录，如果涉及侵权啥的，及时删除</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你所知道的Support Library</title>
      <link href="/2018/07/19/%E4%BD%A0%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84Support-Library/"/>
      <url>/2018/07/19/%E4%BD%A0%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84Support-Library/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>作为安卓开发，天天跟<code>Support Library</code>打交道，动不动来个 <code>Support Library</code>相关类，如下：</p><pre class=" language-groovy"><code class="language-groovy">    implementation <span class="token string">'com.android.support:support-v4:27.0.2'</span>    implementation <span class="token string">'com.android.support:appcompat-v7:27.0.2'</span>    implementation <span class="token string">'com.android.support:design:27.0.2'</span>    implementation <span class="token string">'com.android.support:cardview-v7:27.0.2'</span></code></pre><p>这样做是没错，但是有时候我们只需要用到一个小小的类，导入了一个很大的包，有点小题大做了，所以一起来了解了解<code>Support Library</code>吧!</p><h2 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h2><p>Android 支持库提供了诸多未内置于框架的功能。这些库提供向后兼容版本的新功能、框架中未包含的实用 UI 元素，以及应用可以利用的一系列实用程序。 </p><p>支持库提供一系列不同的功能：</p><ul><li>向后兼容版本的框架组件。</li><li>用于实现建议的 Android 布局模式的 UI 元素。</li><li>支持不同的设备类型。</li><li>其他实用程序功能。</li></ul><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><p>打开<code>sdkmanage</code>选择<code></code>Support repository`下载</p><p>下载后，此工具会将支持库文件安装到您现有的 Android SDK 目录中。库文件位于 SDK 的以下子目录中：<code>&lt;sdk&gt;/extras/android/m2repository/com/android/support/</code> 目录。<img src="https://Kanghanbin.github.io/uploads/1.png" alt=""></p><p>在将支持库添加到应用之前，确定您想要包含的功能以及希望支持的最低 Android 版本 。</p><p>打开应用的<code>build.gradle</code>文件，将支持库添加到 dependencies 部分。例如，要添加 v4 core-utils 库，请添加以下行：</p><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    <span class="token punctuation">...</span>    compile <span class="token string">"com.android.support:support-core-utils:24.2.0"</span><span class="token punctuation">}</span></code></pre><p>为现有框架 API 提供支持的支持库类与框架类通常具有相同的名称，但前者位于 <code>android.support</code> 类软件包中，或带有 <code>*Compat</code> 后缀。 </p><h2 id="四、支持库功能"><a href="#四、支持库功能" class="headerlink" title="四、支持库功能"></a>四、支持库功能</h2><p>Android 支持库软件包含可以添加至应用的多个库。每个库均支持特定范围的 Android 平台版本和功能。</p><p>常用的 <code>support library</code>也就这么几个，<code>support library V4</code>,<code>support library V7</code>,<code>Design support library</code>，<code>Multidex support library</code>,其他的简单了解下就可以。。。</p><h3 id="v4-支持库"><a href="#v4-支持库" class="headerlink" title="v4 支持库"></a>v4 支持库</h3><p>这些库旨在与 Android 2.3（API 级别 9）及更高版本搭配使用。与其他支持库相比，它们包含的 API 集合最大，包括对应用组件、用户界面功能、辅助功能、数据处理、网络连接以及编程实用工具的支持。</p><p>如需了解有关 v4 支持库所提供类和方法的完整详细信息，请参阅 API 参考中的 <code>android.support.v4</code> 软件包。</p><p><strong>注</strong>：在支持库修订版 24.2.0 之前，存在一个 v4 支持库。为了提高效率，此库拆分成多个模块。出于向后兼容的考虑，如果您在 Gradle 脚本中列出了 <code>support-v4</code>，您的 APK 将包含所有的 v4 模块。不过，要减少 APK 大小，我们建议仅列出应用需要的特定模块。</p><ul><li><h3 id="v4-compat-库"><a href="#v4-compat-库" class="headerlink" title="v4 compat 库"></a>v4 compat 库</h3></li></ul><p>为众多框架 API 提供兼容性包装器，例如 <code>Context.obtainDrawable()</code> 和 <code>View.performAccessibilityAction()</code>。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:support-compat:24.2.0</code></pre><ul><li><h3 id="v4-core-utils-库"><a href="#v4-core-utils-库" class="headerlink" title="v4 core-utils 库"></a>v4 core-utils 库</h3></li></ul><p>提供大量实用程序类，例如 <code>AsyncTaskLoader</code> 和 <code>PermissionChecker</code>。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:support-core-utils:24.2.0</code></pre><ul><li><h3 id="v4-core-ui-库"><a href="#v4-core-ui-库" class="headerlink" title="v4 core-ui 库"></a>v4 core-ui 库</h3></li></ul><p>实现各种 UI 相关组件，例如 <code>ViewPager</code>、<code>NestedScrollView</code> 和 <code>ExploreByTouchHelper</code>。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:support-core-ui:24.2.0</code></pre><ul><li><h3 id="v4-media-compat-库"><a href="#v4-media-compat-库" class="headerlink" title="v4 media-compat 库"></a>v4 media-compat 库</h3></li></ul><p>向后移植部分<a href="https://developer.android.google.cn/reference/android/media/package-summary.html" target="_blank" rel="noopener">媒体</a>框架，包括 <code>MediaBrowser</code> 和 <code>MediaSession</code>。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:support-media-compat:24.2.0</code></pre><ul><li><h3 id="v4-fragment-库"><a href="#v4-fragment-库" class="headerlink" title="v4 fragment 库"></a>v4 fragment 库</h3></li></ul><p>添加对使用<a href="https://developer.android.google.cn/guide/components/fragments.html" target="_blank" rel="noopener">片段</a>封装用户界面和功能的支持，从而使应用能够提供可以在大屏幕设备与小屏幕设备之间进行调节的布局。此模块依赖于 <a href="https://developer.android.google.cn/topic/libraries/support-library/features#v4-compat" target="_blank" rel="noopener">compat</a>、<a href="https://developer.android.google.cn/topic/libraries/support-library/features#v4-core-utils" target="_blank" rel="noopener">core-utils</a>、<a href="https://developer.android.google.cn/topic/libraries/support-library/features#v4-core-ui" target="_blank" rel="noopener">core-ui</a> 和 <a href="https://developer.android.google.cn/topic/libraries/support-library/features#v4-media-compat" target="_blank" rel="noopener">media-compat</a>。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:support-fragment:24.2.0</code></pre><h4 id="Dalvik-可执行文件分包支持库"><a href="#Dalvik-可执行文件分包支持库" class="headerlink" title="Dalvik 可执行文件分包支持库"></a>Dalvik 可执行文件分包支持库</h4><p>此库可以为使用多个 Dalvik Executable (DEX) 文件开发应用提供支持。引用超过 65536 个方法的应用须使用 Dalvik 可执行文件分包配置。如需了解有关使用 Dalvik 可执行文件分包的详细信息，请参阅<a href="https://developer.android.google.cn/tools/building/multidex.html" target="_blank" rel="noopener">使用超过 6.4 万种方法开发应用</a>。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:multidex:1.0.0</code></pre><h4 id="v7-支持库"><a href="#v7-支持库" class="headerlink" title="v7 支持库"></a>v7 支持库</h4><p>一些库旨在与 Android 2.3（API 级别 9）及更高版本搭配使用。这些库提供了特定的功能集，并且可以单独添加到应用中，与其他库互不影响。</p><ul><li><h3 id="v7-appcompat-库"><a href="#v7-appcompat-库" class="headerlink" title="v7 appcompat 库"></a>v7 appcompat 库</h3></li></ul><p>此库添加了对<a href="https://developer.android.google.cn/guide/topics/ui/actionbar.html" target="_blank" rel="noopener">操作栏</a>用户界面<a href="https://developer.android.google.cn/design/patterns/actionbar.html" target="_blank" rel="noopener">设计模式</a>的支持。此库包含对 <a href="https://developer.android.google.cn/design/material/" target="_blank" rel="noopener">Material Design</a> 用户界面实现的支持。</p><p><strong>注</strong>：此库依赖于 v4 支持库。</p><p>下面是 v7 appcompat 库中包含的一些关键类：</p><ul><li><code>ActionBar</code> - 提供操作栏<a href="https://developer.android.google.cn/design/patterns/actionbar.html" target="_blank" rel="noopener">用户界面模式</a>的实现。如需了解有关使用操作栏的详细信息，请参阅<a href="https://developer.android.google.cn/guide/topics/ui/actionbar.html" target="_blank" rel="noopener">操作栏</a>开发者指南。</li><li><code>AppCompatActivity</code> - 添加一个应用 Activity 类，此类可作为使用支持库操作栏实现的 Activity 的基础类。</li><li><code>AppCompatDialog</code> - 添加一个对话框类，此类可作为 AppCompat 主题对话框的基础类。</li><li><code>ShareActionProvider</code> - 包含对可以添加到操作栏中的标准化分享操作（例如电子邮件或发帖至社交应用）的支持。</li></ul><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:appcompat-v7:24.2.0</code></pre><ul><li><h3 id="v7-cardview-库"><a href="#v7-cardview-库" class="headerlink" title="v7 cardview 库"></a>v7 cardview 库</h3></li></ul><p>此库添加了对 <code>CardView</code> 小部件的支持，让您能够在卡片内显示信息，从而使应用具备一致的外观。这些卡片对 Material Design 实现非常有用，并在电视应用布局中广为使用。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:cardview-v7:24.2.0</code></pre><ul><li><h3 id="v7-gridlayout-库"><a href="#v7-gridlayout-库" class="headerlink" title="v7 gridlayout 库"></a>v7 gridlayout 库</h3></li></ul><p>下载 Android 支持库后，此库可以添加对 <code>GridLayout</code> 类的支持，让您能够使用网状方格安排用户界面元素。如需了解有关 v7 gridlayout 库 API 的详细信息，请参阅 API 参考中的 <code>android.support.v7.widget</code> 软件包。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:gridlayout-v7:24.2.0</code></pre><ul><li><h3 id="v7-mediarouter-库"><a href="#v7-mediarouter-库" class="headerlink" title="v7 mediarouter 库"></a>v7 mediarouter 库</h3></li></ul><p>此库可以提供 <code>MediaRouter</code>、<code>MediaRouteProvider</code> 和支持 <a href="https://developers.google.cn/cast/docs/android_sender" target="_blank" rel="noopener">Google Cast</a> 的相关媒体类。</p><p>一般而言，利用 v7 mediarouter 库中的 API，您可以控制当前设备到外部屏幕、扬声器和其他目标设备的媒体渠道和流的路由。此库包含的 API 可以用于发布应用特定的媒体路由提供程序、发现和选择目标设备，以及检查媒体状态，等等。如需了解有关 v7 mediarouter 库 API 的详细信息，请参阅 API 参考中的 <code>android.support.v7.media</code> 软件包。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:mediarouter-v7:24.2.0</code></pre><p>支持库 r18 中引入的 v7 mediarouter 库 API 在后续版本的支持库中可能会发生更改。目前，我们建议仅使用与 <a href="https://developers.google.cn/cast/docs/android_sender" target="_blank" rel="noopener">Google Cast</a> 有关的库。</p><ul><li><h3 id="v7-palette-库"><a href="#v7-palette-库" class="headerlink" title="v7 palette 库"></a>v7 palette 库</h3></li></ul><p>v7 palette 支持库包含 <code>Palette</code> 类，此类让您可以从图像中抽取突出颜色。例如，音乐应用可以使用 <code>Palette</code> 对象从专辑封面抽取主要颜色，然后使用这些颜色创建一个色彩协调的歌曲标题卡。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:palette-v7:24.2.0</code></pre><ul><li><h3 id="v7-recyclerview-库"><a href="#v7-recyclerview-库" class="headerlink" title="v7 recyclerview 库"></a>v7 recyclerview 库</h3></li></ul><p>recyclerview 库添加了 <code>RecyclerView</code> 类。此类能够为 <a href="https://developer.android.google.cn/training/material/lists-cards.html" target="_blank" rel="noopener">RecyclerView</a> 小部件提供支持，RecyclerView 是一种通过提供有限的数据项窗口有效显示大数据集的视图。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:recyclerview-v7:24.2.0</code></pre><ul><li><h3 id="v7-Preference-支持库"><a href="#v7-Preference-支持库" class="headerlink" title="v7 Preference 支持库"></a>v7 Preference 支持库</h3></li></ul><p><a href="https://developer.android.google.cn/reference/android/support/v7/preference/package-summary.html" target="_blank" rel="noopener">首选项</a>软件包提供的 API 支持添加 preference 对象（例如 <code>CheckBoxPreference</code> 和 <code>ListPreference</code>），方便用户修改 UI 设置。</p><p>v7 Preference 库添加了对接口（例如 <code>Preference.OnPreferenceChangeListener</code> 和 <code>Preference.OnPreferenceClickListener</code>）以及类（例如 <code>CheckBoxPreference</code> 和 <code>ListPreference</code>）的支持。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:preference-v7:24.2.0</code></pre><h4 id="v8-支持库"><a href="#v8-支持库" class="headerlink" title="v8 支持库"></a>v8 支持库</h4><p>此库旨在与 Android 2.3（API 级别 9）及更高版本搭配使用。此库提供了特定的功能集，并且可以单独添加到应用中，与其他库互不影响。</p><ul><li><h3 id="v8-renderscript-库"><a href="#v8-renderscript-库" class="headerlink" title="v8 renderscript 库"></a>v8 renderscript 库</h3></li></ul><p>此库旨在与 Android 2.3（API 级别 9）及更高版本搭配使用。它添加了对 <a href="https://developer.android.google.cn/guide/topics/renderscript/compute.html" target="_blank" rel="noopener">RenderScript</a> 计算框架的支持。<code>android.support.v8.renderscript</code> 软件包中包含这些 API。请注意，在应用中添加这些 API 的步骤与添加其他支持库 API <em>迥然不同</em>。如需了解有关在应用中使用这些 API 的详细信息，请参阅 <a href="https://developer.android.google.cn/guide/topics/renderscript/compute.html#access-rs-apis" target="_blank" rel="noopener">RenderScript</a> 开发者指南。</p><p><strong>注</strong>：Android Studio 和 Gradle 构建支持使用带支持库的 RenderScript。renderscript 库位于 <code>build-tools/$VERSION/renderscript/</code> 文件夹中。</p><p>以下示例显示了此库的 Gradle 构建脚本属性：</p><pre><code>defaultConfig {    renderscriptTargetApi 18    renderscriptSupportModeEnabled true}</code></pre><h4 id="v13-支持库"><a href="#v13-支持库" class="headerlink" title="v13 支持库"></a>v13 支持库</h4><p>此库旨在用于 Android 3.2（API 级别 13）及更高版本。它添加了对带有 (<code>FragmentCompat</code>) 类和其他片段支持类的 <a href="https://developer.android.google.cn/guide/components/fragments.html" target="_blank" rel="noopener">Fragment</a> 用户界面模式的支持。如需了解有关片段的详细信息，请参阅<a href="https://developer.android.google.cn/guide/components/fragments.html" target="_blank" rel="noopener">片段</a>开发者指南。如需了解有关 v13 支持库 API 的详细信息，请参阅 API 参考中的 <code>android.support.v13</code> 软件包。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:support-v13:24.2.0</code></pre><h4 id="v14-Preference-支持库"><a href="#v14-Preference-支持库" class="headerlink" title="v14 Preference 支持库"></a>v14 Preference 支持库</h4><p><code>android.support.v14.preference</code> 软件包提供的 API 添加了对首选项接口（例如 <code>PreferenceFragment.OnPreferenceStartFragmentCallback</code> 和 <code>PreferenceFragment.OnPreferenceStartScreenCallback</code>）以及类（例如 <code>MultiSelectListPreference</code> 和 <code>PreferenceFragment</code>）的支持。如需了解有关 v14 Preference 支持库 API 的详细信息，请参阅 API 参考中的<a href="https://developer.android.google.cn/reference/android/support/v14/preference/package-summary.html" target="_blank" rel="noopener">首选项</a>软件包。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:preference-v14:24.2.0</code></pre><h4 id="适用于电视的-v17-Preference-支持库"><a href="#适用于电视的-v17-Preference-支持库" class="headerlink" title="适用于电视的 v17 Preference 支持库"></a>适用于电视的 v17 Preference 支持库</h4><p><code>android.support.v17.preference</code> 软件包提供的 API 可以在电视设备上提供首选项接口，包括对 <code>LeanbackListPreferenceDialogFragment.ViewHolder.OnItemClickListener</code> 接口和类的支持，例如 <code>BaseLeanbackPreferenceFragment</code> 和 <code>LeanbackPreferenceFragment</code>。如需了解有关 v17 Preference 支持库 API 的详细信息，请参阅 API 参考中的<a href="https://developer.android.google.cn/reference/android/support/v17/preference/package-summary.html" target="_blank" rel="noopener">首选项</a>软件包。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:preference-leanback-v17:24.2.0</code></pre><h4 id="v17-Leanback-库"><a href="#v17-Leanback-库" class="headerlink" title="v17 Leanback 库"></a>v17 Leanback 库</h4><p><code>android.support.v17.leanback</code> 软件包提供的 API 支持在电视设备上构建用户界面。它为电视应用提供了一些重要的小部件。一些值得注意的类包括：</p><ul><li><code>BrowseFragment</code> - 一种用于创建主要布局的片段，主要布局用于浏览类别和媒体项目。</li><li><code>DetailsFragment</code> - 用于 Leanback 细节屏幕的包装器片段。</li><li><code>PlaybackOverlayFragment</code> - 用于显示播放控件及相关内容的 <code>DetailsFragment</code> 子类。</li><li><code>SearchFragment</code> - 用于处理搜索的片段。片段可以接收用户的搜索请求并将其传递给应用提供的 <code>SearchResultProvider</code>。<code>SearchResultProvider</code> 可以将搜索结果返回给 <code>SearchFragment</code>，后者会将结果渲染到 <code>RowsFragment</code> 中。</li></ul><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:leanback-v17:24.2.0</code></pre><h4 id="注解支持库"><a href="#注解支持库" class="headerlink" title="注解支持库"></a>注解支持库</h4><p><a href="https://developer.android.google.cn/reference/android/support/annotation/package-summary.html" target="_blank" rel="noopener">注解</a>软件包提供的 API 支持向应用中添加注解元数据。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:support-annotations:24.2.0</code></pre><h4 id="设计支持库"><a href="#设计支持库" class="headerlink" title="设计支持库"></a>设计支持库</h4><p><a href="https://developer.android.google.cn/reference/android/support/design/package-summary.html" target="_blank" rel="noopener">设计</a>软件包提供的 API 支持向应用中添加 Material Design 组件和模式。</p><p>设计支持库添加了对应用开发者依赖的各种 Material Design 组件和模式的支持，例如抽屉式导航栏、浮动操作按钮 (<em>FAB</em>)、快捷信息栏和<a href="https://developer.android.google.cn/design/building-blocks/tabs.html" target="_blank" rel="noopener">标签页</a>。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:design:24.2.0</code></pre><h4 id="自定义标签页支持库"><a href="#自定义标签页支持库" class="headerlink" title="自定义标签页支持库"></a>自定义标签页支持库</h4><p><a href="https://developer.android.google.cn/reference/android/support/customtabs/package-summary.html" target="_blank" rel="noopener">自定义标签页</a>软件包提供的 API 支持向应用中添加自定义标签页并对其进行管理。</p><p>自定义标签页支持库添加了对<a href="https://developer.android.google.cn/reference/android/support/customtabs/CustomTabsService.html" target="_blank" rel="noopener">自定义标签页服务</a>和<a href="https://developer.android.google.cn/reference/android/support/customtabs/CustomTabsCallback.html" target="_blank" rel="noopener">自定义标签页回调</a>等各种类的支持。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:customtabs:24.2.0</code></pre><h4 id="百分比支持库"><a href="#百分比支持库" class="headerlink" title="百分比支持库"></a>百分比支持库</h4><p><a href="https://developer.android.google.cn/reference/android/support/percent/package-summary.html" target="_blank" rel="noopener">百分比</a>软件包提供的 API 支持向应用中添加基于百分比的尺寸并对其进行管理。</p><p>百分比支持库添加了对 <a href="https://developer.android.google.cn/reference/android/support/percent/PercentLayoutHelper.PercentLayoutParams.html" target="_blank" rel="noopener">PercentLayoutHelper.PercentLayoutParams</a> 接口和各种类的支持，例如 <a href="https://developer.android.google.cn/reference/android/support/percent/PercentFrameLayout.html" target="_blank" rel="noopener">PercentFrameLayout</a> 和<a href="https://developer.android.google.cn/reference/android/support/percent/PercentRelativeLayout.html" target="_blank" rel="noopener">PercentRelativeLayout</a>。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:percent:24.2.0</code></pre><h4 id="适用于电视的应用建议支持库"><a href="#适用于电视的应用建议支持库" class="headerlink" title="适用于电视的应用建议支持库"></a>适用于电视的应用建议支持库</h4><p><a href="https://developer.android.google.cn/reference/android/support/app/recommendation/package-summary.html" target="_blank" rel="noopener">应用建议</a>软件包提供的 API 支持向电视设备上运行的应用中添加内容建议。</p><p>应用库添加了对注解（例如 <a href="https://developer.android.google.cn/reference/android/support/app/recommendation/ContentRecommendation.ContentMaturity.html" target="_blank" rel="noopener">ContentRecommendation.ContentMaturity</a> 和各种类（例如 <a href="https://developer.android.google.cn/reference/android/support/app/recommendation/ContentRecommendation.html" target="_blank" rel="noopener">ContentRecommendation</a> 和<a href="https://developer.android.google.cn/reference/android/support/app/recommendation/RecommendationExtender.html" target="_blank" rel="noopener">RecommendationExtender</a>）的支持。</p><p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p><pre><code>com.android.support:recommendation:24.2.0</code></pre>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Recycleview的SnapHelper的理解</title>
      <link href="/2018/06/06/Recycleview%E7%9A%84SnapHelper%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/06/06/Recycleview%E7%9A%84SnapHelper%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://kanghanbin.github.io/blog/9.jpg" alt=""></p><p>SnapHelper是RecycleView在24.2.0版本中新增的辅助类，用于在RecycleView滚动结束时，将Item对其到某个位置。SnapHelper是个抽象类，继承了RecycleView.OnFlingListener类</p><h2 id="1-recycleview使用SnapHelper非常简单，只需要调用一行代码：attachToRecyclerView-mRecyclerView-，SnapHelper里方法如下："><a href="#1-recycleview使用SnapHelper非常简单，只需要调用一行代码：attachToRecyclerView-mRecyclerView-，SnapHelper里方法如下：" class="headerlink" title="1.recycleview使用SnapHelper非常简单，只需要调用一行代码：attachToRecyclerView(mRecyclerView)，SnapHelper里方法如下："></a>1.recycleview使用SnapHelper非常简单，只需要调用一行代码：attachToRecyclerView(mRecyclerView)，SnapHelper里方法如下：</h2><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attachToRecyclerView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> RecyclerView recyclerView<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IllegalStateException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果之前已经附着过该recyclerView，则不作任何处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mRecyclerView <span class="token operator">==</span> recyclerView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// nothing to do</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果不一致，则清理监听</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mRecyclerView <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">destroyCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mRecyclerView <span class="token operator">=</span> recyclerView<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mRecyclerView <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setupCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mGravityScroller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scroller</span><span class="token punctuation">(</span>mRecyclerView<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">DecelerateInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">snapToTargetExistingView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>将recycleView赋值给mRecycleview，重新建立监听，创建Scroller，然后调用snapToTargetExistingView方法用于首次对齐。</p><h2 id="2-snapToTargetExistingView"><a href="#2-snapToTargetExistingView" class="headerlink" title="2.snapToTargetExistingView()"></a>2.snapToTargetExistingView()</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">snapToTargetExistingView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mRecyclerView <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LayoutManager layoutManager <span class="token operator">=</span> mRecyclerView<span class="token punctuation">.</span><span class="token function">getLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutManager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        View snapView <span class="token operator">=</span> <span class="token function">findSnapView</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>snapView <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snapDistance <span class="token operator">=</span> <span class="token function">calculateDistanceToFinalSnap</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">,</span> snapView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>snapDistance<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> snapDistance<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mRecyclerView<span class="token punctuation">.</span><span class="token function">smoothScrollBy</span><span class="token punctuation">(</span>snapDistance<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> snapDistance<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>该方法是通过findSnapView获得snapView，然后通过calcuteDistanceToFinalSnap（）方法计算出snapView当前坐标到目的坐标之间的举例，然后调用smoothScrollBy（）方法滑动。</p><h2 id="3-setUpCallbacks（）-和-destroyCallbacks（）"><a href="#3-setUpCallbacks（）-和-destroyCallbacks（）" class="headerlink" title="3.setUpCallbacks（） 和 destroyCallbacks（）"></a>3.setUpCallbacks（） 和 destroyCallbacks（）</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setupCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalStateException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mRecyclerView<span class="token punctuation">.</span><span class="token function">getOnFlingListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"An instance of OnFlingListener already set."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mRecyclerView<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span>mScrollListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRecyclerView<span class="token punctuation">.</span><span class="token function">setOnFlingListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Called when the instance of a {@link RecyclerView} is detached.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">destroyCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRecyclerView<span class="token punctuation">.</span><span class="token function">removeOnScrollListener</span><span class="token punctuation">(</span>mScrollListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRecyclerView<span class="token punctuation">.</span><span class="token function">setOnFlingListener</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这两个方法很简单，分别是建立和移除两个回调：</p><h2 id="4-OnScrollListener和OnFlingListener，OnFlingListener已经实现了，所以直接用，OnScrollListener"><a href="#4-OnScrollListener和OnFlingListener，OnFlingListener已经实现了，所以直接用，OnScrollListener" class="headerlink" title="4.OnScrollListener和OnFlingListener，OnFlingListener已经实现了，所以直接用，OnScrollListener"></a>4.OnScrollListener和OnFlingListener，OnFlingListener已经实现了，所以直接用，OnScrollListener</h2><pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>OnScrollListener mScrollListener <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>OnScrollListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> mScrolled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrollStateChanged</span><span class="token punctuation">(</span>RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">int</span> newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrollStateChanged</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>newState <span class="token operator">==</span> RecyclerView<span class="token punctuation">.</span>SCROLL_STATE_IDLE <span class="token operator">&amp;&amp;</span> mScrolled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mScrolled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token function">snapToTargetExistingView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrolled</span><span class="token punctuation">(</span>RecyclerView recyclerView<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dx <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> dy <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mScrolled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span></code></pre><h2 id="5-在滚动停止的时候，调用snapToTargetExistingView方法将snapView滚到指定位置。SnapHelper实现onFling方法："><a href="#5-在滚动停止的时候，调用snapToTargetExistingView方法将snapView滚到指定位置。SnapHelper实现onFling方法：" class="headerlink" title="5.在滚动停止的时候，调用snapToTargetExistingView方法将snapView滚到指定位置。SnapHelper实现onFling方法："></a>5.在滚动停止的时候，调用snapToTargetExistingView方法将snapView滚到指定位置。SnapHelper实现onFling方法：</h2><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onFling</span><span class="token punctuation">(</span><span class="token keyword">int</span> velocityX<span class="token punctuation">,</span> <span class="token keyword">int</span> velocityY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LayoutManager layoutManager <span class="token operator">=</span> mRecyclerView<span class="token punctuation">.</span><span class="token function">getLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutManager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        RecyclerView<span class="token punctuation">.</span>Adapter adapter <span class="token operator">=</span> mRecyclerView<span class="token punctuation">.</span><span class="token function">getAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> minFlingVelocity <span class="token operator">=</span> mRecyclerView<span class="token punctuation">.</span><span class="token function">getMinFlingVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>velocityY<span class="token punctuation">)</span> <span class="token operator">></span> minFlingVelocity <span class="token operator">||</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>velocityX<span class="token punctuation">)</span> <span class="token operator">></span> minFlingVelocity<span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token function">snapFromFling</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">,</span> velocityX<span class="token punctuation">,</span> velocityY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="6-获取最小滑动速率，判断超过速率，执行snapFromFling方法："><a href="#6-获取最小滑动速率，判断超过速率，执行snapFromFling方法：" class="headerlink" title="6.获取最小滑动速率，判断超过速率，执行snapFromFling方法："></a>6.获取最小滑动速率，判断超过速率，执行snapFromFling方法：</h2><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">snapFromFling</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LayoutManager layoutManager<span class="token punctuation">,</span> <span class="token keyword">int</span> velocityX<span class="token punctuation">,</span> <span class="token keyword">int</span> velocityY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>layoutManager <span class="token keyword">instanceof</span> <span class="token class-name">ScrollVectorProvider</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        RecyclerView<span class="token punctuation">.</span>SmoothScroller smoothScroller <span class="token operator">=</span> <span class="token function">createSnapScroller</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>smoothScroller <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> targetPosition <span class="token operator">=</span> <span class="token function">findTargetSnapPosition</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">,</span> velocityX<span class="token punctuation">,</span> velocityY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetPosition <span class="token operator">==</span> RecyclerView<span class="token punctuation">.</span>NO_POSITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        smoothScroller<span class="token punctuation">.</span><span class="token function">setTargetPosition</span><span class="token punctuation">(</span>targetPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>        layoutManager<span class="token punctuation">.</span><span class="token function">startSmoothScroll</span><span class="token punctuation">(</span>smoothScroller<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建滚动器SmoothScroller ，通过findTargetSnapPosition计算速率targetPosition并设置给smoothScroller，具体创建SmoothScroller如下：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">protected</span> LinearSmoothScroller <span class="token function">createSnapScroller</span><span class="token punctuation">(</span>LayoutManager layoutManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>layoutManager <span class="token keyword">instanceof</span> <span class="token class-name">ScrollVectorProvider</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinearSmoothScroller</span><span class="token punctuation">(</span>mRecyclerView<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onTargetFound</span><span class="token punctuation">(</span>View targetView<span class="token punctuation">,</span> RecyclerView<span class="token punctuation">.</span>State state<span class="token punctuation">,</span> Action action<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snapDistances <span class="token operator">=</span> <span class="token function">calculateDistanceToFinalSnap</span><span class="token punctuation">(</span>mRecyclerView<span class="token punctuation">.</span><span class="token function">getLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        targetView<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> dx <span class="token operator">=</span> snapDistances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> dy <span class="token operator">=</span> snapDistances<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token function">calculateTimeForDeceleration</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dx<span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    action<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> time<span class="token punctuation">,</span> mDecelerateInterpolator<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">float</span> <span class="token function">calculateSpeedPerPixel</span><span class="token punctuation">(</span>DisplayMetrics displayMetrics<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> MILLISECONDS_PER_INCH <span class="token operator">/</span> displayMetrics<span class="token punctuation">.</span>densityDpi<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>创建了一个LinearSmoothScroller滚动器，onTargetFound方法具体实现计算当前坐标与目的坐标之间距离，计算做减速时所需要的时间，然后调用update方法根据滚动事件，距离和插值器更新SmoothScroller状态。</p><h2 id="最后重点方法："><a href="#最后重点方法：" class="headerlink" title="最后重点方法："></a>最后重点方法：</h2><h3 id="1-findTargetSnapPosition"><a href="#1-findTargetSnapPosition" class="headerlink" title="1.findTargetSnapPosition"></a>1.findTargetSnapPosition</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">findTargetSnapPosition</span><span class="token punctuation">(</span>LayoutManager layoutManager<span class="token punctuation">,</span> <span class="token keyword">int</span> velocityX<span class="token punctuation">,</span>        <span class="token keyword">int</span> velocityY<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该方法会根据触发Fling操作的速率（参数velocityX和参数velocityY）来找到RecyclerView需要滚动到哪个位置，该位置对应的ItemView就是那个需要进行对齐的列表项。我们把这个位置称为targetSnapPosition，对应的View称为targetSnapView。如果找不到targetSnapPosition，就返回RecyclerView.NO_POSITION。</p><h3 id="2-findSnapView"><a href="#2-findSnapView" class="headerlink" title="2.findSnapView"></a>2.findSnapView</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> View <span class="token function">findSnapView</span><span class="token punctuation">(</span>LayoutManager layoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该方法会找到当前layoutManager上最接近对齐位置的那个view，该view称为SanpView，对应的position称为SnapPosition。如果返回null，就表示没有需要对齐的View，也就不会做滚动对齐调整。</p><h3 id="3-calculateDistanceToFinalSnap"><a href="#3-calculateDistanceToFinalSnap" class="headerlink" title="3.calculateDistanceToFinalSnap"></a>3.calculateDistanceToFinalSnap</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">calculateDistanceToFinalSnap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LayoutManager layoutManager<span class="token punctuation">,</span>        <span class="token annotation punctuation">@NonNull</span> View targetView<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个方法会计算第二个参数对应的ItemView当前的坐标与需要对齐的坐标之间的距离。该方法返回一个大小为2的int数组，分别对应x轴和y轴方向上的距离。</p><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>SnapHelper是个抽象类，可以自己实现一个自定义SnapHelper类，安卓也提供了该类的两个继承类。LininearSnapHelper和PagerSnapHelper。这两个类都可以直接拿来用。LininearSnapHelper实现了recycleview滑动后itemview居中对齐，类似一个支持快速滑动viewpager；PagerSnapHelper一次只能滑动一项，不支持快速滑动的viewpager。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今日头条的安卓适配方案，值得收藏</title>
      <link href="/2018/05/20/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F/"/>
      <url>/2018/05/20/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA" target="_blank" rel="noopener">文章链接</a>，之前确实没有接触过，我简单看了一遍，可以说，这也是相对比较完美的方案，我先简单说一下这个方案的思路，它是通过修改density值，强行把所有不同尺寸分辨率的手机的宽度dp值改成一个统一的值，这样就解决了所有的适配问题。</p><p>比如，设计稿宽度是360px，那么开发这边就会把目标dp值设为360dp，在不同的设备中，动态修改density值，从而保证(手机像素宽度)px/density这个值始终是360dp,这样的话，就能保证UI在不同的设备上表现一致了。</p><p>这个方案侵入性很低，而且也没有涉及私有API，应该也是极不错的方案，我暂时也想不到强行修改density是否会有其他影响，既然有今日头条的大厂在用，稳定性应当是有保证的。</p><p>但是根据我的观察，这套方案对老项目是不太友好的，因为修改了系统的density值之后，整个布局的实际尺寸都会发生改变，如果想要在老项目文件中使用，恐怕整个布局文件中的尺寸都可能要重新按照设计稿修改一遍才行。因此，如果你是在维护或者改造老项目，使用这套方案就要三思了。</p><h3 id="具体代码实现为："><a href="#具体代码实现为：" class="headerlink" title="具体代码实现为："></a>具体代码实现为：</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 今日头条的屏幕适配方案</span>    <span class="token comment" spellcheck="true">// 通过修改density值，强行把所有不同尺寸分辨率的手机的宽度dp值改成一个统一的值，这样就解决了所有的适配问题</span>    <span class="token comment" spellcheck="true">// @param activity</span>    <span class="token comment" spellcheck="true">// @param application</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">float</span> sNoncompatDensity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">float</span> sNoncompatScaledDensity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setCustomDensity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Activity activity<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> Application application<span class="token punctuation">)</span><span class="token punctuation">{</span>        DisplayMetrics appDisplayMetrics<span class="token operator">=</span>application<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sNoncompatDensity<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sNoncompatDensity<span class="token operator">=</span>appDisplayMetrics<span class="token punctuation">.</span>density<span class="token punctuation">;</span>            sNoncompatScaledDensity<span class="token operator">=</span>appDisplayMetrics<span class="token punctuation">.</span>scaledDensity<span class="token punctuation">;</span>            application<span class="token punctuation">.</span><span class="token function">registerComponentCallbacks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>Configuration newConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>newConfig<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>newConfig<span class="token punctuation">.</span>fontScale<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        sNoncompatScaledDensity<span class="token operator">=</span>application<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scaledDensity<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">float</span> targetDensity<span class="token operator">=</span>appDisplayMetrics<span class="token punctuation">.</span>widthPixels<span class="token operator">/</span><span class="token number">360</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> targetScaleDensity<span class="token operator">=</span>targetDensity<span class="token operator">*</span><span class="token punctuation">(</span>sNoncompatScaledDensity<span class="token operator">/</span>sNoncompatDensity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> targetDensityDpi<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token operator">*</span>targetDensity<span class="token punctuation">)</span><span class="token punctuation">;</span>        appDisplayMetrics<span class="token punctuation">.</span>density<span class="token operator">=</span>targetDensity<span class="token punctuation">;</span>        appDisplayMetrics<span class="token punctuation">.</span>scaledDensity<span class="token operator">=</span>targetScaleDensity<span class="token punctuation">;</span>        appDisplayMetrics<span class="token punctuation">.</span>densityDpi<span class="token operator">=</span>targetDensityDpi<span class="token punctuation">;</span>        <span class="token keyword">final</span> DisplayMetrics activityDisplayMetrics<span class="token operator">=</span>activity<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        activityDisplayMetrics<span class="token punctuation">.</span>density<span class="token operator">=</span>targetDensity<span class="token punctuation">;</span>        activityDisplayMetrics<span class="token punctuation">.</span>scaledDensity<span class="token operator">=</span>targetScaleDensity<span class="token punctuation">;</span>        activityDisplayMetrics<span class="token punctuation">.</span>densityDpi<span class="token operator">=</span>targetDensityDpi<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2018-10-10更新一波："><a href="#2018-10-10更新一波：" class="headerlink" title="2018-10-10更新一波："></a>2018-10-10更新一波：</h3><p>今天看到大神<code>blankj</code>根据今日头条改进的方案，<a href="https://juejin.im/post/5b6250bee51d451918537021" target="_blank" rel="noopener">传送门</a>，写的不错</p><p>稀土掘金地址：<a href="https://juejin.im/post/5b6250bee51d451918537021" target="_blank" rel="noopener">https://juejin.im/post/5b6250bee51d451918537021</a></p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span> Adapt the screen <span class="token keyword">for</span> vertical slide<span class="token punctuation">.</span>  <span class="token operator">*</span><span class="token operator">-</span> <span class="token annotation punctuation">@param</span> activity        The activity<span class="token punctuation">.</span><span class="token operator">-</span> <span class="token annotation punctuation">@param</span> designWidthInPx The size of design diagram's width<span class="token punctuation">,</span> in pixel<span class="token punctuation">.</span>  <span class="token operator">*</span><span class="token operator">/</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adaptScreen4VerticalSlide</span><span class="token punctuation">(</span><span class="token keyword">final</span> Activity activity<span class="token punctuation">,</span>                                           <span class="token keyword">final</span> <span class="token keyword">int</span> designWidthInPx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">adaptScreen</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> designWidthInPx<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**- Adapt the screen for horizontal slide.  *- @param activity         The activity.- @param designHeightInPx The size of design diagram's height, in pixel.  */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adaptScreen4HorizontalSlide</span><span class="token punctuation">(</span><span class="token keyword">final</span> Activity activity<span class="token punctuation">,</span>                                             <span class="token keyword">final</span> <span class="token keyword">int</span> designHeightInPx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">adaptScreen</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> designHeightInPx<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**- Reference from: https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA  */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adaptScreen</span><span class="token punctuation">(</span><span class="token keyword">final</span> Activity activity<span class="token punctuation">,</span>                              <span class="token keyword">final</span> <span class="token keyword">int</span> sizeInPx<span class="token punctuation">,</span>                              <span class="token keyword">final</span> <span class="token keyword">boolean</span> isVerticalSlide<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> DisplayMetrics systemDm <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> DisplayMetrics appDm <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> DisplayMetrics activityDm <span class="token operator">=</span> activity<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isVerticalSlide<span class="token punctuation">)</span> <span class="token punctuation">{</span>      activityDm<span class="token punctuation">.</span>density <span class="token operator">=</span> activityDm<span class="token punctuation">.</span>widthPixels <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> sizeInPx<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      activityDm<span class="token punctuation">.</span>density <span class="token operator">=</span> activityDm<span class="token punctuation">.</span>heightPixels <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> sizeInPx<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  activityDm<span class="token punctuation">.</span>scaledDensity <span class="token operator">=</span> activityDm<span class="token punctuation">.</span>density <span class="token operator">*</span> <span class="token punctuation">(</span>systemDm<span class="token punctuation">.</span>scaledDensity <span class="token operator">/</span> systemDm<span class="token punctuation">.</span>dens  activityDm<span class="token punctuation">.</span>densityDpi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">160</span> <span class="token operator">*</span> activityDm<span class="token punctuation">.</span>density<span class="token punctuation">)</span><span class="token punctuation">;</span>  appDm<span class="token punctuation">.</span>density <span class="token operator">=</span> activityDm<span class="token punctuation">.</span>density<span class="token punctuation">;</span>  appDm<span class="token punctuation">.</span>scaledDensity <span class="token operator">=</span> activityDm<span class="token punctuation">.</span>scaledDensity<span class="token punctuation">;</span>  appDm<span class="token punctuation">.</span>densityDpi <span class="token operator">=</span> activityDm<span class="token punctuation">.</span>densityDpi<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**- Cancel adapt the screen.  *- @param activity The activity.  */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cancelAdaptScreen</span><span class="token punctuation">(</span><span class="token keyword">final</span> Activity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> DisplayMetrics systemDm <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> DisplayMetrics appDm <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> DisplayMetrics activityDm <span class="token operator">=</span> activity<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  activityDm<span class="token punctuation">.</span>density <span class="token operator">=</span> systemDm<span class="token punctuation">.</span>density<span class="token punctuation">;</span>  activityDm<span class="token punctuation">.</span>scaledDensity <span class="token operator">=</span> systemDm<span class="token punctuation">.</span>scaledDensity<span class="token punctuation">;</span>  activityDm<span class="token punctuation">.</span>densityDpi <span class="token operator">=</span> systemDm<span class="token punctuation">.</span>densityDpi<span class="token punctuation">;</span>  appDm<span class="token punctuation">.</span>density <span class="token operator">=</span> systemDm<span class="token punctuation">.</span>density<span class="token punctuation">;</span>  appDm<span class="token punctuation">.</span>scaledDensity <span class="token operator">=</span> systemDm<span class="token punctuation">.</span>scaledDensity<span class="token punctuation">;</span>  appDm<span class="token punctuation">.</span>densityDpi <span class="token operator">=</span> systemDm<span class="token punctuation">.</span>densityDpi<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**- Return whether adapt screen.  *- @return {@code true}: yes&lt;br>{@code false}: no  */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isAdaptScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> DisplayMetrics systemDm <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> DisplayMetrics appDm <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> systemDm<span class="token punctuation">.</span>density <span class="token operator">!=</span> appDm<span class="token punctuation">.</span>density<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DataBinding的用法</title>
      <link href="/2018/03/23/DataBinding%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2018/03/23/DataBinding%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://kanghanbin.github.io/blog/8.jpg" alt=""></p><p>首先，为什么要使用<code>DataBinding</code>?</p><ul><li>一般写法<code>findViewById</code>  罗里吧嗦，写到想吐</li><li><code>ButterKnife</code> 代替   解放<code>findViewById</code>  </li><li><code>DataBinding</code>数据和UI低耦合 </li></ul><h3 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h3><p>The Data Binding Library is a support library that allows you to bind UI components in your layouts to data sources in your app using a declarative format rather than programmatically.</p><p><code>DataBinding</code> 是一个支持库，它允许您使用声明性格式而不是以编程方式将应用程序中的UI组件绑定到应用程序中的数据源。</p><h5 id="1-1优点："><a href="#1-1优点：" class="headerlink" title="1.1优点："></a>1.1优点：</h5><p>布局文件中的绑定组件允许您在Activtiy中删除许多UI框架调用，使其更简单，更易于维护。这还可以提高应用程序的性能，并有助于防止内存泄漏和空指针异常。 </p><p>常用方式：</p><pre class=" language-java"><code class="language-java">TextView textView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>sample_text<span class="token punctuation">)</span><span class="token punctuation">;</span>textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用<code>databinding</code>：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{viewmodel.userName}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>是不是简单了很多？</p><h5 id="1-2-避免空指针异常"><a href="#1-2-避免空指针异常" class="headerlink" title="1.2 避免空指针异常"></a>1.2 避免空指针异常</h5><p>生成的数据绑定代码会自动检查<code>null</code>值并避免空指针异常。例如，在表达式中<code>@{user.name}</code>，如果 <code>user</code>为null，<code>user.name</code>则为其分配其默认值<code>null</code>。如果您引用<code>user.age</code>age，其中age是类型<code>int</code>，则数据绑定使用默认值<code>0</code>。</p><h4 id="二、环境配置："><a href="#二、环境配置：" class="headerlink" title="二、环境配置："></a>二、环境配置：</h4><p>要开始使用数据绑定，请从Android SDK管理器中的<strong>Support Repository</strong>下载库。有关更多信息，请参阅<a href="https://developer.android.google.cn/studio/intro/update.html" target="_blank" rel="noopener">更新IDE和SDK工具</a>。要将应用程序配置为使用数据绑定，请app模块中的  <code>build.gradle</code> 文件下在将<code>dataBinding</code>该元素添加到文件中，如以下示例所示：</p><pre class=" language-java"><code class="language-java">android <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    dataBinding <span class="token punctuation">{</span>        enabled <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="三、绑定表达式"><a href="#三、绑定表达式" class="headerlink" title="三、绑定表达式"></a>三、绑定表达式</h4><p><code>DataBinding</code> 自动生成将布局中的视图与数据对象绑定所需的类。数据绑定布局文件略有不同，以根标记开头， <code>layout</code>后跟<code>data</code>元素和<code>view</code>根元素。此视图元素是您的根在非绑定布局文件中的位置。以下代码显示了一个示例布局文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>       <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user.firstName}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user.lastName}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><p>其中的<code>user</code>变量<code>data</code>描述了可在此布局中使用的属性。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>布局中的表达式使用“ <code>@{}</code>”语法写入属性中。这里，<code>TextView</code>文本设置为<code>user</code>变量的 <code>firstName</code>属性：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user.firstName}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>我们现在假设你有一个普通的对象来描述<code>User</code> 实体：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> String firstName<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> String lastName<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String firstName<span class="token punctuation">,</span> String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种类型的对象具有永不改变的数据。在应用程序中，通常会读取一次并且之后不会更改的数据。也可以使用遵循一组约定的对象，例如访问器方法的用法，如以下示例所示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String firstName<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String lastName<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String firstName<span class="token punctuation">,</span> String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从数据绑定的角度来看，这两个类是等价的。<code>@{user.firstName}</code>用于该<a href="https://developer.android.google.cn/reference/android/widget/TextView.html#attr_android:text" target="_blank" rel="noopener"><code>android:text</code></a> 属性的表达式访问前一类中的字段<code>firstName</code>和 后一类中的<code>getFirstName()</code> 方法。或者，<code>firstName()</code>如果存在该方法，也可以解决。 </p><h4 id="四、绑定数据"><a href="#四、绑定数据" class="headerlink" title="四、绑定数据"></a>四、绑定数据</h4><p>为每个布局文件生成绑定类。默认情况下，类的名称基于布局文件的名称，将其转换为Pascal大小写并向其添加<em>Binding</em>后缀。上面的布局文件名是 <code>activity_main.xml</code>相应生成的类 <code>MainActivityBinding</code>。此类包含布局属性（例如，<code>user</code>变量）到布局视图的所有绑定，并知道如何为绑定表达式指定值。建议绑定的推荐方法是在扩展布局时执行此操作，如图所示在以下示例中：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>   MainActivityBinding binding <span class="token operator">=</span> DataBindingUtil<span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>   User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">,</span> <span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   binding<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在运行时，应用程序在UI中显示<strong>Test</strong>用户。或者，您可以使用a获取视图<code>LayoutInflater</code>，如以下示例所示：</p><pre class=" language-java"><code class="language-java">MainActivityBinding binding <span class="token operator">=</span> MainActivityBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token function">getLayoutInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果您在a <code>Fragment</code>， <code>ListView</code>或<code>RecyclerView</code>适配器中使用数据绑定项，则可能更喜欢使用 <a href="https://developer.android.google.cn/reference/android/databinding/DataBindingUtil.html#inflate(android.view.LayoutInflater, int, android.view.ViewGroup, boolean, android.databinding.DataBindingComponent" target="_blank" rel="noopener"><code>inflate()</code></a>) 绑定类或 <a href="https://developer.android.google.cn/reference/android/databinding/DataBindingUtil" target="_blank" rel="noopener"><code>DataBindingUtil</code></a>类的方法，如以下代码示例所示：</p><pre class=" language-java"><code class="language-java">ListItemBinding binding <span class="token operator">=</span> ListItemBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">,</span> viewGroup<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// or</span>ListItemBinding binding <span class="token operator">=</span> DataBindingUtil<span class="token punctuation">.</span><span class="token function">inflate</span> <span class="token punctuation">(</span>layoutInflater<span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>list_item<span class="token punctuation">,</span> viewGroup<span class="token punctuation">,</span> <span class="token boolean">false</span>）</code></pre><h4 id="五、表达式运算符和关键字"><a href="#五、表达式运算符和关键字" class="headerlink" title="五、表达式运算符和关键字"></a>五、表达式运算符和关键字</h4><p>表达式运算符关键字和代码中很相似，很好理解，直接看吧。。</p><ul><li>数学的 <code>+ - / * %</code></li><li>字符串连接 <code>+</code></li><li>合乎逻辑 <code>&amp;&amp; ||</code></li><li>二进制 <code>&amp; | ^</code></li><li>一元 <code>+ - ! ~</code></li><li>转移 <code>&gt;&gt; &gt;&gt;&gt; &lt;&lt;</code></li><li>对照 <code>== &gt; &lt; &gt;= &lt;=</code></li><li><code>instanceof</code></li><li>分组 <code>()</code></li><li>文字 - 字符，字符串，数字， <code>null</code></li><li>投</li><li>方法调用</li><li>现场访问</li><li>数组访问 <code>[]</code></li><li>三元运算符 <code>?:</code></li></ul><p>举例：</p><pre class=" language-xml"><code class="language-xml">android:text="@{String.valueOf(index + 1)}"android:visibility="@{age &lt; 13 ? View.GONE : View.VISIBLE}"android:transitionName='@{"image_" + id}'</code></pre><ul><li>？？空结合运算           这个比较特殊，值得注意下</li></ul><pre class=" language-xml"><code class="language-xml">  android:text="@{user.displayName ?? user.lastName}"</code></pre><p>  嘛意思呢? 意思就是判断<code>user.displayName</code>是否为<code>null</code> ，不为<code>null</code>,<code>user.displayName</code>,为<code>null</code>,则<code>user.lastName</code>,等价于以下代码：</p><pre class=" language-xml"><code class="language-xml">  android:text="@{user.displayName != null ? user.displayName : user.lastName}"</code></pre><h4 id="六、集合"><a href="#六、集合" class="headerlink" title="六、集合"></a>六、集合</h4><p><code>[]</code>为方便起见，可以使用运算符访问公共集合，例如数组，列表，稀疏列表和映射。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.util.SparseArray<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>List&lt;String<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sparse<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SparseArray&lt;String<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map&lt;String, String<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>…android:text="@{list[index]}"…android:text="@{sparse[index]}"…android:text="@{map[key]}"</code></pre><h4 id="七、事件处理"><a href="#七、事件处理" class="headerlink" title="七、事件处理"></a>七、事件处理</h4><p>数据绑定允许您编写从视图调度的表达式处理事件（例如，<code>onClick()</code>方法）。事件属性名称由监听器方法的名称确定，但有一些例外。例如，<code>View.OnClickListener</code>有一个方法<code>onClick()</code>，所以这个事件的属性是<code>android:onClick</code>。</p><p>对于click事件，有一些专门的事件处理程序需要除<code>android:onClick</code>避免冲突之外的属性。您可以使用以下属性来避免这些类型的冲突：</p><table><thead><tr><th>类</th><th>监听器设置</th><th>属性</th></tr></thead><tbody><tr><td><code>SearchView</code></td><td><code>setOnSearchClickListener(View.OnClickListener)</code></td><td><code>android:onSearchClick</code></td></tr><tr><td><code>ZoomControls</code></td><td><code>setOnZoomInClickListener(View.OnClickListener)</code></td><td><code>android:onZoomIn</code></td></tr><tr><td><code>ZoomControls</code></td><td><code>setOnZoomOutClickListener(View.OnClickListener)</code></td><td><code>android:onZoomOut</code></td></tr></tbody></table><p>您可以使用以下机制来处理事件：</p><h5 id="7-1-方法引用"><a href="#7-1-方法引用" class="headerlink" title="7.1 方法引用"></a>7.1 方法引用</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandlers</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClickFriend</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>绑定表达式可以将视图的单击监听器分配给 <code>onClickFriend()</code>方法，如下所示： </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handlers<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.MyHandlers<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>       <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user.firstName}<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{handlers::onClickFriend}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><h5 id="7-2-监听器绑定"><a href="#7-2-监听器绑定" class="headerlink" title="7.2 监听器绑定"></a>7.2 监听器绑定</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Presenter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSaveClick</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后，您可以将click事件绑定到<code>onSaveClick()</code>方法，如下所示：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>task<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.android.example.Task<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>presenter<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.android.example.Presenter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{() -<span class="token punctuation">></span> presenter.onSaveClick(task)}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><h4 id="八、关键字-Imports-variables-and-includes"><a href="#八、关键字-Imports-variables-and-includes" class="headerlink" title="八、关键字 Imports, variables, and includes"></a>八、关键字 Imports, variables, and includes</h4><p>官方解释，简单易懂</p><p>The Data Binding Library provides features such as imports, variables, and includes. Imports make easy to reference classes inside your layout files. Variables allow you to describe a property that can be used in binding expressions. Includes let you reuse complex layouts across your app.</p><ul><li>import</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.view.View<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.real.estate.View<span class="token punctuation">"</span></span>        <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Vista<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>//命名冲突时输入别名</code></pre><p>导入<code>View</code>该类允许您从绑定表达式中引用它。以下示例显示如何引用 类的常量<code>VISIBLE</code>和<code>GONE</code>常量<code>View</code>：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>   <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user.lastName}<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user.isAdult ? View.VISIBLE : View.GONE}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>variable </li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.graphics.drawable.Drawable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Drawable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>note<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span></code></pre><p>生成的绑定类对于每个描述的变量都有一个setter和getter。 </p><ul><li>include</li></ul><p>变量可以从包含的布局传递到包含的布局绑定中 </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>       <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/name<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">bind:</span>user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/contact<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">bind:</span>user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><h4 id="九、可观察的对象"><a href="#九、可观察的对象" class="headerlink" title="九、可观察的对象"></a>九、可观察的对象</h4><p>可观察性是指对象通知其他人数据变化的能力。数据绑定库允许您使对象，字段或集合可观察。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseObservable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String firstName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bindable</span>    <span class="token keyword">public</span> String <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bindable</span>    <span class="token keyword">public</span> String <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirstName</span><span class="token punctuation">(</span>String firstName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>        <span class="token function">notifyPropertyChanged</span><span class="token punctuation">(</span>BR<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLastName</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>        <span class="token function">notifyPropertyChanged</span><span class="token punctuation">(</span>BR<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们使用 <code>notifyPropertyChanged</code> 来进行数据改变完成通知，但我们怎么通知一个数据即将改变？我们不得不写一个 <code>@Bindable</code> 注解在 <code>getFirstName</code>。这将会自动产生一个 <code>BR.firstName</code>，这个 BR 很像我们经常使用的 R 类文件，我们通过这些注解会自动生成它。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>带你初识Kotlin(二)</title>
      <link href="/2017/08/07/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86Kotlin-%E4%BA%8C/"/>
      <url>/2017/08/07/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86Kotlin-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kanghanbin.github.io/2015/07/18/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86Kotlin/">上一节</a> 简单认识了下<code>kotlin</code>的基本类型和常用流程控制，这节继续学习</p><h3 id="一、Kotlin-变量声明"><a href="#一、Kotlin-变量声明" class="headerlink" title="一、Kotlin 变量声明"></a>一、<code>Kotlin</code> 变量声明</h3><p>首先，<code>kotlin</code>变量的声明必须使用关键字<code>var</code>或<code>val</code></p><ul><li><code>var</code>: 用此关键字声明的变量表示可变变量，即可读且可写。相当于<code>Java</code>中普通变量</li><li><code>val</code>: 用此关键字声明的变量表示不可变变量，即可读且不可写。相当于<code>Java</code>中用<code>final</code>修饰的变量</li></ul><h4 id="1-1基础用法："><a href="#1-1基础用法：" class="headerlink" title="1.1基础用法："></a>1.1基础用法：</h4><p>关键字 变量名：数据类型 = xxx  </p><p>eg:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//立即初始化</span><span class="token keyword">var</span> var_a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">//推导出类型</span><span class="token keyword">var</span> var_b <span class="token operator">=</span> <span class="token number">5</span><span class="token comment" spellcheck="true">//没有初始化的时候，必须声明类型</span><span class="token keyword">var</span> var_c <span class="token operator">:</span>Floatvar_c <span class="token operator">=</span> <span class="token number">12.4f</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"var_a => <span class="token interpolation variable">$var_a</span> \t var_b => <span class="token interpolation variable">$var_b</span> \t var_a => <span class="token interpolation variable">$var_c</span>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//$符号表示引用的意思</span></code></pre><p>注意：在类中声明变量时，必须初始化，如果不初始化，需要使用<code>lateinit</code>关键字<img src="https://Kanghanbin.github.io/blog/7.png" alt="IntelliJ IEDA中爆红并提示"></p><h4 id="1-2声明可空变量："><a href="#1-2声明可空变量：" class="headerlink" title="1.2声明可空变量："></a>1.2声明可空变量：</h4><ul><li>在声明的时候一定用标准的声明格式定义。不能用可推断类型的简写。</li><li>变量类型后面的<code>?</code>符号不能省略。不然就和普通的变量没区别了。</li><li>其初始化的值可以为<code>null</code>或确定的变量值。</li></ul><p>定义：</p><p><code>var/val</code> 变量名 ： 类型？ = null/确定的值</p><p>eg：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">var</span> var_a <span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">val</span> val_a <span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span></code></pre><h4 id="1-3后期初始化"><a href="#1-3后期初始化" class="headerlink" title="1.3后期初始化"></a>1.3后期初始化</h4><p>前面提到在类中定义一个变量（属性）时是必须初始化的，但是在平时<code>Android</code>开发中我们对组件变量的声明是不需要直接初始化，这。。。。，<code>Kotlin</code>中后期初始化满足了你。</p><ul><li>使用<code>lateinit</code>关键字</li><li>必须是可读且可写的变量，即用<code>var</code>声明的变量</li><li>不能声明于可空变量。</li><li>不能声明于基本数据类型变量。例：<code>Int</code>、<code>Float</code>、<code>Double</code>等，注意：<code>String</code>类型是可以的。</li><li>声明后，在使用该变量前必须赋值，不然会抛出<code>UninitializedPropertyAccessException</code>异常</li></ul><p>eg：</p><pre class=" language-kotlin"><code class="language-kotlin"></code></pre><h4 id="1-4延迟初始化"><a href="#1-4延迟初始化" class="headerlink" title="1.4延迟初始化"></a>1.4延迟初始化</h4><p>程序第一次使用到这个变量（属性）时再初始化</p><ul><li>使用<code>lazy{}</code>高阶函数，不能用于类型推断。且该函数在变量的数据类型后面，用<code>by</code>链接。</li><li>必须是只读变量，即用<code>val</code>声明的变量。</li></ul><p>eg：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 声明一个延迟初始化的字符串数组变量</span><span class="token keyword">private</span> <span class="token keyword">val</span> mTitles <span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>    <span class="token function">arrayOf</span><span class="token punctuation">(</span>            ctx<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>tab_title_android<span class="token punctuation">)</span><span class="token punctuation">,</span>            ctx<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>tab_title_ios<span class="token punctuation">)</span><span class="token punctuation">,</span>            ctx<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>tab_title_h5<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明一个延迟初始化的字符串</span><span class="token keyword">private</span> <span class="token keyword">val</span> mStr <span class="token operator">:</span> String <span class="token keyword">by</span> lazy<span class="token punctuation">{</span>    <span class="token string">"我是延迟初始化字符串变量"</span><span class="token punctuation">}</span></code></pre><h3 id="二、Kotlin注释"><a href="#二、Kotlin注释" class="headerlink" title="二、Kotlin注释"></a>二、<code>Kotlin</code>注释</h3><p><code>kotlin</code>中注释和java基本一样，只是多了个多行注释（嵌套多行注释），个人觉得没卵用，只是看起来有点层次感</p><p>eg：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token comment" spellcheck="true">/*    第一层块注释    /*        第二层块注释        /*            第三层快注释            这种注释方式在java中是不支持的，但是在kotlin中是支持的。算是一个亮点吧（貌似意义不大）。         */</span>     <span class="token operator">*</span><span class="token operator">/</span> <span class="token operator">*</span><span class="token operator">/</span></code></pre><p>其他注释和java一个样</p><h3 id="三、进制数"><a href="#三、进制数" class="headerlink" title="三、进制数"></a>三、进制数</h3><ul><li>二进制数</li><li><strong>八进制数（Kotlin不支持）</strong></li><li>十进制数</li><li>十六进制数</li></ul><p>eg：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token number">0x0F</span>            <span class="token comment" spellcheck="true">//十六进制数</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token number">0b00001011</span>      <span class="token comment" spellcheck="true">//二进制数</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">123</span>             <span class="token comment" spellcheck="true">//十进制数</span><span class="token comment" spellcheck="true">// ps：Kotlin不支持八进制数</span><span class="token function">println</span><span class="token punctuation">(</span>" g <span class="token operator">=</span><span class="token operator">></span> $g \n h <span class="token operator">=</span><span class="token operator">></span> $h \n k <span class="token operator">=</span><span class="token operator">></span> $k<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果：</p><p>g =&gt; 15  h =&gt; 11  k =&gt; 123  </p>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>带你初识Kotlin（一）</title>
      <link href="/2017/07/18/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86Kotlin/"/>
      <url>/2017/07/18/%E5%B8%A6%E4%BD%A0%E5%88%9D%E8%AF%86Kotlin/</url>
      
        <content type="html"><![CDATA[<h3 id="What-is-Kotlin"><a href="#What-is-Kotlin" class="headerlink" title="What is Kotlin?"></a>What is <code>Kotlin</code>?</h3><p>Kotlin是JVM和Android的实用编程语言，结合了OO和功能特性，专注于<strong>互操作性</strong>，<strong>安全性</strong>，<strong>清晰度</strong>和<strong>工具</strong>支持。 </p><p>本文记录自己学习<code>kotlin</code>认为需要记录的重点，如果需要详细学习，请点击<a href="http://www.kotlindoc.cn/" target="_blank" rel="noopener">Kotlin中文文档</a>学习。</p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>在 Kotlin 中，所有变量的成员方法和属性都是一个对象。一些类型是内建的，它们的实现是优化过的，但对用户来说它们就像普通的类一样。</p><ul><li>数值类型</li></ul><p>Kotlin 处理数值的方法和 java 很相似，但不是完全一样。比如，不存在隐式转换数值的精度，并且在字面上有一些小小的不同 。Kotlin 提供了如下内建数值类型(和 java 很相似)：</p><table><thead><tr><th><strong>类型</strong></th><th></th><th style="text-align:left"><strong>字宽</strong></th></tr></thead><tbody><tr><td>Double</td><td>双精度浮点数</td><td style="text-align:left">64</td></tr><tr><td>Float</td><td>浮点数</td><td style="text-align:left">32</td></tr><tr><td>Long</td><td>长整型</td><td style="text-align:left">64</td></tr><tr><td>Int</td><td>整形</td><td style="text-align:left">32</td></tr><tr><td>Short</td><td>短整型</td><td style="text-align:left">16</td></tr><tr><td>Byte</td><td>字节</td><td style="text-align:left">8</td></tr></tbody></table><p>在<code>Kotlin</code>中，短类型，不会隐式转化为长类型，这意味着我们必须显式转换才能把 <code>Byte</code> 赋值给 <code>Int</code>。</p><p>error：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> b<span class="token operator">:</span> Byte <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// OK, literals are checked statically</span><span class="token keyword">val</span> i<span class="token operator">:</span> Int <span class="token operator">=</span> b <span class="token comment" spellcheck="true">//ERRO</span></code></pre><p>right:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> i<span class="token operator">:</span> Int <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//显示转换</span></code></pre><p>我们可以通过显式转换把数值类型提升 。每个数值类型都支持下面的转换：</p><blockquote><p><code>toByte(): Byte</code></p></blockquote><blockquote><p><code>toShort(): Short</code></p></blockquote><blockquote><p><code>toInt(): Int</code></p></blockquote><blockquote><p><code>toLong(): Long</code></p></blockquote><blockquote><p><code>toFloat(): Float</code></p></blockquote><blockquote><p><code>toDouble(): Double</code></p></blockquote><blockquote><p><code>toChar(): Char</code></p></blockquote><p>Kotlin支持标准的运算表达式，关于位运算，<code>kotlin</code>没有提供特殊的操作符，只是提供了可以叫中缀形式的方法，比如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">shl</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">0x000FF000</span></code></pre><p>下面是全部的位运算操作符(<strong>只可以用在 <code>Int</code> 和 <code>Long</code> 类型</strong>)：</p><blockquote><p><code>shl(bits)</code> – 带符号左移 (相当于 Java’s <code>&lt;&lt;</code>) <code>shr(bits)</code> – 带符号右移 (相当于 Java’s <code>&gt;&gt;</code>) <code>ushr(bits)</code> – 无符号右移 (相当于 Java’s <code>&gt;&gt;&gt;</code>) <code>and(bits)</code> – 按位与 <code>or(bits)</code> – 按位或 <code>xor(bits)</code> – 按位异或 <code>inv(bits)</code> – 按位翻转</p></blockquote><pre class=" language-kotlin"><code class="language-kotlin"> <span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">shl</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//打印结果为8</span></code></pre><ul><li>字符类型</li></ul><p>字符类型用<code>Char</code>表示，不能直接当做数值使用：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">check</span><span class="token punctuation">(</span>c<span class="token operator">:</span> Char<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//ERROR: 类型不匹配，这里会提示</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>字符是由单引号包裹的’1’，特殊的字符通过反斜杠\转义，下面的字符序列支持转义：\t,\b,\n,\r,’,”,\和$。编码任何其他字符，使用 Unicode 转义语法：\uFF00。</p><p>我们可以将字符显示的转义为Int数字：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">decimalDigitValue</span><span class="token punctuation">(</span>c<span class="token operator">:</span> Char<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!</span><span class="token keyword">in</span> <span class="token string">'0'</span><span class="token operator">..</span><span class="token string">'9'</span><span class="token punctuation">)</span>         <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Out of range"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//显示转换为数值类型</span><span class="token punctuation">}</span></code></pre><ul><li>布尔值</li></ul><p>只有<code>true</code>和<code>false</code></p><p>布尔值的内建操作包括|| – lazy disjunction &amp;&amp; – lazy conjunction</p><ul><li>数组</li></ul><p>Arrays在 Kotlin 中由 <code>Array</code> 类表示，有 <code>get</code> 和 <code>set</code> 方法(通过运算符重载可以由[]调用)，以及 <code>size</code>方法，以及一些常用的函数：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Array<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">private</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> T    <span class="token keyword">fun</span> <span class="token keyword">set</span><span class="token punctuation">(</span>Index<span class="token operator">:</span> Int<span class="token punctuation">,</span> value<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> Unit    <span class="token keyword">fun</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><blockquote><p>给库函数 <code>arrayOf()</code> 传递每一项的值来创建Array，<code>arrayOf(1, 2, 3)</code> 创建了一个[1, 2, 3] 这样的数组。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//等价于[1,2,3,4,5]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token keyword">in</span> arr1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">32.3f</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token keyword">in</span> arr2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre><code>1   2   3   4   5   0   2   3   a   32.3 </code></pre><p>也可以使用库函数 <code>arrayOfNulls()</code> 用于创建一个指定数据类型且可以为空元素的给定元素个数的数组 。例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arr3 <span class="token operator">=</span> arrayOfNulls<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如若不予数组赋值则arr3[0]、arr3[1]、arr3[2]皆为null</span><span class="token keyword">for</span><span class="token punctuation">(</span>v <span class="token keyword">in</span> arr3<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//为数组arr3赋值</span>arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>arr3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span>arr3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">for</span><span class="token punctuation">(</span>v <span class="token keyword">in</span> arr3<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre><code>null    null    null    10  20  30   </code></pre><p>或者通过指定Array大小并提供一个迭代器 </p><ul><li>使用一个工厂函数<code>Array()</code>，它使用数组大小和返回给定其索引的每个数组元素的初始值的函数。</li><li><code>Array()</code> =&gt; 第一个参数表示数组元素的个数，第二个参数则为使用其元素下标组成的表达式</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 创建一个 Array&lt;String>  内容为 ["0", "1", "4", "9", "16"]</span><span class="token keyword">val</span> asc <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>i <span class="token operator">-></span> <span class="token punctuation">(</span>i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></blockquote><ul><li>字符串</li></ul><p>Kotlin 有两种类型的 string ：一种是可以带分割符的，一种是可以包含新行以及任意文本的。带分割符的 string 很像 java 的 string:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> s <span class="token operator">=</span> <span class="token string">"Hello World!\n"</span></code></pre><p>整行String 是由三个引号包裹的(“””),不可以包含分割符但可以包含其它字符：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> text <span class="token operator">=</span> <span class="token raw-string string">"""    for (c in "foo")        print(c)"""</span></code></pre><p>打印结果为</p><pre><code>for (c in &quot;foo&quot;)    print(c)</code></pre><ul><li>通配符$</li></ul><p>字符串可以包含模板表达式。一个模板表达式由一个 $ 开始并包含另一个简单的名称：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">val</span> s <span class="token operator">=</span> <span class="token string">"i = <span class="token interpolation variable">$i</span>"</span> <span class="token comment" spellcheck="true">// 识别为 "i = 10"</span></code></pre><p>或者是一个带大括号的表达式：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"<span class="token interpolation variable">$s</span>.length is <span class="token interpolation"><span class="token delimiter variable">${</span>s<span class="token punctuation">.</span>length<span class="token delimiter variable">}</span></span>"</span> <span class="token comment" spellcheck="true">//识别为 "abc.length is 3"</span></code></pre><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if-表达式"><a href="#if-表达式" class="headerlink" title="if 表达式"></a>if 表达式</h4><p>if除了除了传统的用法之外，还可以用作表达式</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//传统用法</span><span class="token keyword">var</span> max <span class="token operator">=</span> a<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span>    max <span class="token operator">=</span> b<span class="token comment" spellcheck="true">//带 else </span><span class="token keyword">var</span> max<span class="token operator">:</span> Int<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>    max <span class="token operator">=</span> a<span class="token keyword">else</span>    max <span class="token operator">=</span> b<span class="token comment" spellcheck="true">//作为表达式</span><span class="token keyword">val</span> max <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> a <span class="token keyword">else</span> b</code></pre><p>原来在java中的写法，在<code>kotlin</code>中报错</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> numA <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">var</span> numB<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token punctuation">(</span>numA <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token comment" spellcheck="true">//错误</span></code></pre><h4 id="when-表达式"><a href="#when-表达式" class="headerlink" title="when 表达式"></a>when 表达式</h4><p>when取代了 C 风格语言的 switch 。最简单的用法像下面这样 </p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">when</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token number">1</span> <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x == 1"</span><span class="token punctuation">)</span>    <span class="token number">2</span> <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x == 2"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//Note the block</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x is neither 1 nor 2"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在其它分支都不匹配的时候默认匹配 else 分支。如果把 when 做为表达式的话 else 分支是强制的，除非编译器可以提供所有覆盖所有可能的分支条件。</p><p>如果有分支可以用同样的方式处理的话，分支条件可以连在一起，相当于<code>switch</code>语句中不适用<code>break</code>跳转语句：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">when</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x == 0 or x == 1"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"otherwise"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>when 可以用<strong>任意表达式</strong>作为分支的条件，也可以用in或！in判断是否在一个集合当中，只适用于数值类型，用is判断是否是某个类型。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">describe</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Any<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span>        <span class="token keyword">when</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token number">1</span> <span class="token operator">-></span> <span class="token string">"one"</span>            <span class="token string">"hello"</span> <span class="token operator">-></span> <span class="token string">"gretting"</span>            <span class="token keyword">is</span> Long <span class="token operator">-></span> <span class="token string">"long"</span>            <span class="token operator">!</span><span class="token keyword">is</span> String <span class="token operator">-></span> <span class="token string">"Not a string"</span>            <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token string">"unknown"</span>        <span class="token punctuation">}</span></code></pre><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>for 循环通过任何提供的迭代器进行迭代。语法是下面这样的：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> collection<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p>内容可以是一个语句块</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> Int <span class="token keyword">in</span> ints<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><ul><li>新增规则，去满足for（初始值；条件；增减步长）</li></ul><blockquote><ol><li><p>递增：until          <code>until</code> [n,m）= &gt;即<code>大于等于n,小于m</code> </p><p>例：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token comment" spellcheck="true">// 循环5次，且步长为1的递增</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i => <span class="token interpolation variable">$i</span> \t"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>输出结果为</p><pre><code>i =&gt; 0  i =&gt; 1  i =&gt; 2  i =&gt; 3  i =&gt; 4</code></pre></li><li><p>递减：<code>downTo</code>            <code>downTo[n,m]</code> =&gt; 即<code>小于等于n,大于等于m ,n &gt; m</code> </p><p>例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 循环5次，且步长为1的递减</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">15</span> downTo <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i => <span class="token interpolation variable">$i</span> \t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre><code>i =&gt; 15     i =&gt; 14     i =&gt; 13     i =&gt; 12     i =&gt;</code></pre></li><li><p>递增：符号<code>..</code>                 <code>..[n,m]</code>=&gt; 即<code>大于等于n，小于等于m</code> </p><p>和<code>until</code>的区别，一个包区间，一个闭区间，<code>..</code>更简单吧！</p><p>例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"使用 符号`..`的打印结果\n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">20</span> <span class="token operator">..</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i => <span class="token interpolation variable">$i</span> \t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"使用until的打印结果\n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">20</span> until <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i => <span class="token interpolation variable">$i</span> \t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre><code>使用 符号`..`的打印结果i =&gt; 20     i =&gt; 21     i =&gt; 22     i =&gt; 23     i =&gt; 24     i =&gt; 25     使用until的打印结果i =&gt; 20     i =&gt; 21     i =&gt; 22     i =&gt; 23     i =&gt; 24 </code></pre></li><li><p>步长：step</p><p>例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">10</span> until <span class="token number">16</span> step <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i => <span class="token interpolation variable">$i</span> \t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre><code>i =&gt; 10     i =&gt; 12     i =&gt; 14 </code></pre></li></ol></blockquote><ul><li>迭代</li></ul><blockquote><p><strong>使用数组的indices属性遍历</strong></p><p>例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arrayListTwo <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> arrayListTwo<span class="token punctuation">.</span>indices<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arrayListTwo[<span class="token interpolation variable">$i</span>] => "</span> <span class="token operator">+</span> arrayListTwo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre><code>arrayListTwo[0] =&gt; 1arrayListTwo[1] =&gt; 3arrayListTwo[2] =&gt; 5arrayListTwo[3] =&gt; 7arrayListTwo[4] =&gt; 9</code></pre><p><strong>使用数组的withIndex()方法遍历</strong></p><p>例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arrayListTwo <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> arrayListTwo<span class="token punctuation">.</span><span class="token function">withIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"index => <span class="token interpolation variable">$index</span> \t value => <span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre><code>index =&gt; 0   value =&gt; 1index =&gt; 1   value =&gt; 3index =&gt; 2   value =&gt; 5index =&gt; 3   value =&gt; 7index =&gt; 4   value =&gt; 9</code></pre><p><strong>使用列表或数组的扩展函数遍历</strong></p><blockquote><ul><li>数组或列表有一个成员或扩展函数<code>iterator()</code>实现了<code>Iterator&lt;T&gt;</code>接口，且该接口提供了<code>next()</code>与<code>hasNext()</code>两个成员或扩展函数</li><li>其一般和<code>while</code>循环一起使用</li></ul></blockquote><ol><li><p>可以查看<code>Array.kt</code>这个类。可以看见其中的<code>iterator()</code>函数，而这个函数实现了<code>Iterator</code>接口。</p><pre class=" language-kotlin"><code class="language-kotlin"> <span class="token comment" spellcheck="true">/**   *   Creates an iterator for iterating over the elements of the array.   */</span> <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token operator">&lt;</span>T<span class="token operator">></span></code></pre></li><li><p>查看<code>Iterator.kt</code>这个接口类，这个接口提供了<code>hasNext()</code>函数和<code>next()</code>函数。</p><pre class=" language-kotlin"><code class="language-kotlin"> <span class="token keyword">public</span> <span class="token keyword">interface</span> Iterator<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/**   * Returns the next element in the iteration.   */</span> <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token comment" spellcheck="true">/**   * Returns `true` if the iteration has more elements.   */</span> <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">}</span></code></pre></li></ol><p>例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arrayListThree <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">var</span> iterator<span class="token operator">:</span> Iterator<span class="token operator">&lt;</span>Any<span class="token operator">></span> <span class="token operator">=</span> arrayListThree<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre><code>2a3false9</code></pre><p>终上所述就是<code>for</code>循环语句常用的用法。</p></blockquote><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while 和 do…while 像往常那样</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x<span class="token operator">--</span><span class="token punctuation">}</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> y <span class="token operator">=</span> <span class="token function">retrieveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// y 在这是可见的</span></code></pre><h4 id="在循环中使用-break-和-continue"><a href="#在循环中使用-break-和-continue" class="headerlink" title="在循环中使用 break 和 continue"></a>在循环中使用 break 和 continue</h4>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Source Insight 初次使用</title>
      <link href="/2017/05/06/Source-Insight-%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/05/06/Source-Insight-%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="A-why-SI"><a href="#A-why-SI" class="headerlink" title="A. why SI:"></a>A. why SI:</h2><p>　　为什么要用<strong>Source Insight</strong>呢？因为她比完整的IDE要更快啊，比一般的编辑器便捷啊！她有逆天的查看定义，查看调用，查看引用功能以及方便的Context Window上下文显示，像这样的东西非常有利于查看大量代码！</p><p>　　那么问题来了——比如我现在随便找了一份源码，我该要怎么阅读呢？很简单，SI可以极其方便地将一个源码目录变成source insight工程，然后直接操作——来天吞天，来地含地：新建工程——&gt;命名工程——&gt;设置源码目录——&gt;好了，去阅读吧。。。</p><p>　　那么又有一个问题，比如老子要设置字体背景之类的东西哩？呵呵，<strong>Options-&gt;Preferences…</strong>里面的内容能让你晚上做梦都笑醒了。</p><p>　　所以说到这里，SI的强大之处在于：速度快，阅读方便，设置方便。当然这只是一小部分，她还有强大的自定义指令的功能，这个还在学习，放下不表。但是，就这些基本的功能就已经能支持我很好的工作了啊！</p><p>　  </p><h2 id="B-SI-Project初体验与窗口布局介绍："><a href="#B-SI-Project初体验与窗口布局介绍：" class="headerlink" title="B. SI Project初体验与窗口布局介绍："></a>B. SI Project初体验与窗口布局介绍：</h2><p>　　新建工程之后是add and remove files这个窗口，一般add tree就把文件夹里的所有文件都加载进这个工程了。那么Load完成之后呢？close对话框就可以了啊。close之前有个神奇的地方向大家介绍下——SI可以加不同路径的代码进入你的工程，嘿嘿嘿。。。</p><p>　　完成之后，<strong>Project Window</strong>就出现在右边了，点击其中任意一个文件，内容就显示在中央编辑区域了。左边是<strong>Symbol Window</strong>，可以快速定位函数、变量定义等。下面是<strong>Context Window</strong>，显示有用的上下文相关信息。可以通过<strong>View菜单</strong>调出或者关闭各种窗口。比如<strong>Relative Window</strong>可以显示出方法中调用的方法。</p><p>　　以下是source insight标准工作界面，从左到右从上到下分别是<strong>Symbol window /编辑区 / Project window / Relative window / Context window</strong>. 这样的布局是非常方便的，大家就按照这样布局就行。可能有的人source insight窗口嵌入有问题，没事儿，多试几次多拖拽几次就行了。。。</p><p><img src="https://kanghanbin.github.io/blog/6.png" alt="img"></p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="C-几种逆天功能："><a href="#C-几种逆天功能：" class="headerlink" title="C.几种逆天功能："></a>C.几种逆天功能：</h2><h3 id="1-同步"><a href="#1-同步" class="headerlink" title="1.同步"></a>1.同步</h3><p>　　在编辑区域中，键盘按下Ctrl，用鼠标单击变量或方法时，会跳到变量或方法的定义。</p><p>　　如果某个变量或者方法是<strong>黑色字体</strong>表示的，说明它还没有被定义。</p><p>　　当然有时候也不是因为没定义，需要同步一下，<strong>Project-&gt;Synchronizing Files</strong>。</p><h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h2><h3 id="2-查看定义"><a href="#2-查看定义" class="headerlink" title="2.查看定义"></a>2.查看定义</h3><p>　　可以选中一个变量，然后右键，<strong>Jump to Definition</strong>，跳转到定义。</p><p>　　当然，上面提过，也可以直接Ctrl+鼠标点击。</p><p>　　在编辑区域内选中变量或者方法，过一两秒，Context Window会自动显示定义。</p><h3 id="3-查找引用"><a href="#3-查找引用" class="headerlink" title="3.查找引用"></a>3.查找引用</h3><p>　　选择一个变量或方法后右键<strong>Lookup References…</strong>就可以进行查找。</p><p>　　查找结果显示在一个框里，点击每条查找结果前面的红色标记(两个红色的相背的三角形)，可以该条结果对应代码文件，进入代码编辑状态；再点击代码中的查找对应行开头的红色标记可以转回查找结果页面。</p><p>　　工具栏上有相应的图标进行上一条和下一条的跳转。</p><p>　　Lookup References弹出的对话框里可以进行查询的选项配置。比如是否大小写敏感，是不查找注释还是只在注释里查找。</p><p>　　另外Search Method也可以选是字符串、正则、关键字、还是引用类型。</p><h3 id="4-查找调用"><a href="#4-查找调用" class="headerlink" title="4.查找调用"></a>4.查找调用</h3><p>　　这个是针对方法的，选中方法名，然后右键<strong>Jump to Caller</strong>，如果只有一次调用，则直接跳转，如果多次调用，则显示一个列表框，选择一项就会跳转过去。</p><p>　　文件中的查找可以通过菜单Search。</p><h2 id="附录：Source-Insight常用快捷键"><a href="#附录：Source-Insight常用快捷键" class="headerlink" title="附录：Source Insight常用快捷键"></a>附录：Source Insight常用快捷键</h2><p>　　1.Ctrl + 鼠标单击 进入定义.</p><p>　　2.Alt + F12可以切换，让字符宽度变得一致，或者是大小不同地显示。</p><p>　　3.Shift + F8 标亮文本中光标所在的单词。</p><p>　　4.Ctrl + G (或者F5) 跳转到某一行。</p><p>　　5.Ctrl + O 搜索文件，找到回车打开，找不到ESC退出</p><p>　　6.Alt + G (或者F7) 打开Symbol Window.</p><p>　　7.Alt +, 后退；Alt+.前进.</p><p>　　8.Ctrl + F 查找关键字。</p><p>​       9.Ctrl + Shift + F 全工程查找关键字</p>]]></content>
      
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git团队协作常见命令的记录</title>
      <link href="/2016/10/27/Git%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
      <url>/2016/10/27/Git%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://kanghanbin.github.io/blog/2.jpg" alt=""></p><h3 id="一、Git简介"><a href="#一、Git简介" class="headerlink" title="一、Git简介"></a>一、<code>Git</code>简介</h3><p>一个分布式版本管理系统，重点在分布式，CVS和SVN都是集中式版本控制系统，那么问题来了，分布式和集中式有何区别呢？</p><p>先说<em>集中式版本控制系统</em>，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。 集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。 </p><p><img src="https://kanghanbin.github.io/blog/1.jpg" alt=""></p><p><strong>分布式版本控制系统</strong>根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><p><img src="https://kanghanbin.github.io/blog/3.jpg" alt=""></p><h3 id="二、工作区和暂存区："><a href="#二、工作区和暂存区：" class="headerlink" title="二、工作区和暂存区："></a>二、工作区和暂存区：</h3><p>工作区就是我们能看到的工作目录，比如我们编写的所有代码都属于工作区</p><p>工作区里有个隐藏目录<code>.git</code>,是git的版本库，里面存放了很多东西，最重要的就是<code>stage</code>（暂存区）还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code> <img src="https://kanghanbin.github.io/blog/4.jpg" alt=""></p><p>把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改</p><h3 id="三、Git团队写作的一些命令"><a href="#三、Git团队写作的一些命令" class="headerlink" title="三、Git团队写作的一些命令"></a>三、<code>Git</code>团队写作的一些命令</h3><h4 id="0-远程库相关命令"><a href="#0-远程库相关命令" class="headerlink" title="0.远程库相关命令"></a>0.远程库相关命令</h4><blockquote><h5 id="0-1关联远程库"><a href="#0-1关联远程库" class="headerlink" title="0.1关联远程库"></a>0.1关联远程库</h5><p>git remote add origin &lt;远程仓库连接&gt;</p><p>git remote add origin git@server-name:path/repo-name.git </p><p>将本地仓库关联远程仓库。</p><h5 id="0-2推送至远程仓库"><a href="#0-2推送至远程仓库" class="headerlink" title="0.2推送至远程仓库"></a>0.2推送至远程仓库</h5><p>git push origin master</p><p>第一次推送（git push origin - u origin master）</p><h5 id="0-3克隆远程仓库至本地"><a href="#0-3克隆远程仓库至本地" class="headerlink" title="0.3克隆远程仓库至本地"></a>0.3克隆远程仓库至本地</h5><p>git clone git@server-name:path/repo-name.git </p></blockquote><h4 id="1-初始化相关命令"><a href="#1-初始化相关命令" class="headerlink" title="1.初始化相关命令"></a>1.初始化相关命令</h4><blockquote><h5 id="1-1初始化仓库"><a href="#1-1初始化仓库" class="headerlink" title="1.1初始化仓库"></a>1.1初始化仓库</h5><p>git init</p><p>把当前目录变成Git可以管理的仓库 当前目录下会多了一个<code>.git</code>的目录 ，用来跟踪版本管理库。（注意：.git目录可能为隐藏）</p><h5 id="1-2把文件添加到仓库："><a href="#1-2把文件添加到仓库：" class="headerlink" title="1.2把文件添加到仓库："></a>1.2把文件添加到仓库：</h5><p>git add 文件名：</p><p>git add readme.txt</p><h5 id="1-3把文件提交到仓库："><a href="#1-3把文件提交到仓库：" class="headerlink" title="1.3把文件提交到仓库："></a>1.3把文件提交到仓库：</h5><p>git commit -m “提交说明，方便别人看”</p><p>一次可以提交多个文件</p><h5 id="1-4查看提交历史记录"><a href="#1-4查看提交历史记录" class="headerlink" title="1.4查看提交历史记录"></a>1.4查看提交历史记录</h5><p>git log</p><p>命令显示从最近到最远的提交日志 </p><h5 id="1-5查看命令历史"><a href="#1-5查看命令历史" class="headerlink" title="1.5查看命令历史"></a>1.5查看命令历史</h5><p>git reflog</p><p>可以看到提交命令的历史记录，拿到，commit id，避免回退完之后又想回来找不到 commit id。</p><h5 id="1-6回退版本"><a href="#1-6回退版本" class="headerlink" title="1.6回退版本"></a>1.6回退版本</h5><p>git reset HEAD^ </p><p>回退至上一个版本</p><p>在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>git reset <commit id=""></commit></p><p>git reseat 1094a</p><p>回退至指定版本号，版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了 。</p><h5 id="1-7查看状态"><a href="#1-7查看状态" class="headerlink" title="1.7查看状态"></a>1.7查看状态</h5><p>git status</p><p>显示当前暂存区和分支上的状态。</p><h5 id="1-8查看工作区和版本库最新提交区别"><a href="#1-8查看工作区和版本库最新提交区别" class="headerlink" title="1.8查看工作区和版本库最新提交区别"></a>1.8查看工作区和版本库最新提交区别</h5><p>git diff </p><h5 id="1-9丢弃工作区的修改"><a href="#1-9丢弃工作区的修改" class="headerlink" title="1.9丢弃工作区的修改"></a>1.9丢弃工作区的修改</h5><p>git checkout – <file></file></p><p>就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。 </p><h5 id="1-10撤销暂存区的修改"><a href="#1-10撤销暂存区的修改" class="headerlink" title="1.10撤销暂存区的修改"></a>1.10撤销暂存区的修改</h5><p>git reset HEAD <file></file></p><p>可以把暂存区的修改撤销掉（unstage），重新放回工作 区</p></blockquote><h4 id="2-分支相关命令"><a href="#2-分支相关命令" class="headerlink" title="2.分支相关命令"></a>2.分支相关命令</h4><blockquote><h5 id="2-1-创建分支"><a href="#2-1-创建分支" class="headerlink" title="2.1 创建分支"></a>2.1 创建分支</h5><p>git branch 新分支名</p><p>例如，在master分之下，新开一个开发分支：</p><p>git branch dev</p><h5 id="2-2切换到新分支"><a href="#2-2切换到新分支" class="headerlink" title="2.2切换到新分支"></a>2.2切换到新分支</h5><p>git checkout 分支名</p><p>例如，在master分支下，切换到新开的dev：</p><p>git checkout dev </p><h5 id="2-3创建-切换分支-合并到一个命令"><a href="#2-3创建-切换分支-合并到一个命令" class="headerlink" title="2.3创建+切换分支 合并到一个命令"></a>2.3创建+切换分支 合并到一个命令</h5><p>git checkout -b 新分支名</p><p>例如，新开一个开发分支，并立即切换到该分支： </p><p>git checkout -b dev</p><h5 id="2-4合并分支"><a href="#2-4合并分支" class="headerlink" title="2.4合并分支"></a>2.4合并分支</h5><p>git merge 需要合并的分支名</p><p>例如，刚刚已经切换回master，现在需要合并dev的内容：  </p><p>git mearge dev</p><h5 id="2-5-查看本地分支列表"><a href="#2-5-查看本地分支列表" class="headerlink" title="2.5 查看本地分支列表"></a>2.5 查看本地分支列表</h5><p>git branch -a</p><p>例如，刚刚已经切换回master，现在需要合并dev的内容： </p><h5 id="2-6查看远程分支列表"><a href="#2-6查看远程分支列表" class="headerlink" title="2.6查看远程分支列表"></a>2.6查看远程分支列表</h5><p>git branch -r</p><h5 id="2-7向远程提交本地新开发的分支"><a href="#2-7向远程提交本地新开发的分支" class="headerlink" title="2.7向远程提交本地新开发的分支"></a>2.7向远程提交本地新开发的分支</h5><p>git push origin  新分支名</p><p>例如，刚刚在master下新开的dev分支： </p><p>git push origin dev</p><h5 id="2-8删除远程分支"><a href="#2-8删除远程分支" class="headerlink" title="2.8删除远程分支"></a>2.8删除远程分支</h5><p>git push orgin :远程分支名</p><p>例如：删除刚刚提交到远程的分支；</p><p>git push origin:dev</p><h5 id="2-9删除本地分支"><a href="#2-9删除本地分支" class="headerlink" title="2.9删除本地分支"></a>2.9删除本地分支</h5><p>git branch 分支名称 -d</p><p>例如，在master分支下，删除新开的dev分支： </p><p>git branch dev -d </p><p>注意：如果dev的更改，push到远程，在GitLab(或者其他git系统)上面进行了merge操作，但是本地master没有pull最新的代码，会删除不成功，可以先git pull origin master，或者强制删除 git branch dev -D </p><h5 id="2-10更新分支列表"><a href="#2-10更新分支列表" class="headerlink" title="2.10更新分支列表"></a>2.10更新分支列表</h5><p>git fetch -p</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo搭建博客常用命令</title>
      <link href="/2016/07/15/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/07/15/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为何要用Fragment的newInstance</title>
      <link href="/2016/06/03/%E4%B8%BA%E4%BD%95%E8%A6%81%E7%94%A8Fragment%E7%9A%84newInstance/"/>
      <url>/2016/06/03/%E4%B8%BA%E4%BD%95%E8%A6%81%E7%94%A8Fragment%E7%9A%84newInstance/</url>
      
        <content type="html"><![CDATA[<h3 id="Qusetion1"><a href="#Qusetion1" class="headerlink" title="Qusetion1:"></a><strong>Qusetion1</strong>:</h3><p>开发中一直在用<code>Fragment</code>,使用<code>Fragment</code>接受参数是经常遇到的问题，为什么不用构造方法，而用<code>newInstance</code>呢？，构造方法不是更快更省事么？<code>Androidstudio</code>中右键直接创建<code>Fragment</code>:</p><p><img src="https://Kanghanbin.github.io/blog/5.png" alt=""></p><h3 id="Answer1："><a href="#Answer1：" class="headerlink" title="Answer1："></a><strong>Answer1：</strong></h3><p>默认会生成如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * A simple {@link Fragment} subclass. * Activities that contain this fragment must implement the * {@link BlankFragment.OnFragmentInteractionListener} interface * to handle interaction events. * Use the {@link BlankFragment#newInstance} factory method to * create an instance of this fragment. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlankFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: Rename parameter arguments, choose names that match</span>    <span class="token comment" spellcheck="true">// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ARG_PARAM1 <span class="token operator">=</span> <span class="token string">"param1"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ARG_PARAM2 <span class="token operator">=</span> <span class="token string">"param2"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO: Rename and change types of parameters</span>    <span class="token keyword">private</span> String mParam1<span class="token punctuation">;</span>    <span class="token keyword">private</span> String mParam2<span class="token punctuation">;</span>    <span class="token keyword">private</span> OnFragmentInteractionListener mListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BlankFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Required empty public constructor</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Use this factory method to create a new instance of     * this fragment using the provided parameters.     *     * @param param1 Parameter 1.     * @param param2 Parameter 2.     * @return A new instance of fragment BlankFragment.     */</span>    <span class="token comment" spellcheck="true">// TODO: Rename and change types and number of parameters</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> BlankFragment <span class="token function">newInstance</span><span class="token punctuation">(</span>String param1<span class="token punctuation">,</span> String param2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BlankFragment fragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlankFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bundle args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>ARG_PARAM1<span class="token punctuation">,</span> param1<span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>ARG_PARAM2<span class="token punctuation">,</span> param2<span class="token punctuation">)</span><span class="token punctuation">;</span>        fragment<span class="token punctuation">.</span><span class="token function">setArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> fragment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mParam1 <span class="token operator">=</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>ARG_PARAM1<span class="token punctuation">)</span><span class="token punctuation">;</span>            mParam2 <span class="token operator">=</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>ARG_PARAM2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup container<span class="token punctuation">,</span>                             Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Inflate the layout for this fragment</span>        <span class="token keyword">return</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_blank<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// TODO: Rename method, update argument and hook method into UI event</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onButtonPressed</span><span class="token punctuation">(</span>Uri uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mListener<span class="token punctuation">.</span><span class="token function">onFragmentInteraction</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAttach</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">OnFragmentInteractionListener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mListener <span class="token operator">=</span> <span class="token punctuation">(</span>OnFragmentInteractionListener<span class="token punctuation">)</span> context<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">" must implement OnFragmentInteractionListener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mListener <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * This interface must be implemented by activities that contain this     * fragment to allow an interaction in this fragment to be communicated     * to the activity and potentially other fragments contained in that     * activity.     * &lt;p>     * See the Android Training lesson &lt;a href=     * "http://developer.android.com/training/basics/fragments/communicating.html"     * >Communicating with Other Fragments&lt;/a> for more information.     */</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnFragmentInteractionListener</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Update argument type and name</span>        <span class="token keyword">void</span> <span class="token function">onFragmentInteraction</span><span class="token punctuation">(</span>Uri uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>明显，谷歌建议使用<code>newInstance</code>来传递参数，然后在<code>onCreate</code>接受参数的。</p><p>主要通过fragment的<code>setArguments</code>（Bundle）/<code>getArguments</code>方法实现。</p><p>这样做的好处是，（配置发生改变）屏幕旋转时，<code>fragment</code>数据不会丢失。调用者只需要关系传递的哪些数据，而无需关心传递数据的Key是什么。</p><h3 id="Question2"><a href="#Question2" class="headerlink" title="Question2:"></a><strong>Question2:</strong></h3><p><code>FragmentPagerAdapter</code>与<code>FragmentStatePagerAdapter</code>有什么区别：</p><h3 id="Answer2："><a href="#Answer2：" class="headerlink" title="Answer2："></a><strong>Answer2：</strong></h3><p>主要区别就在与对于fragment是否销毁，下面细说：</p><p><code>FragmentPagerAdapter</code>：对于不再需要的<code>fragment</code>，选择调用detach方法，仅销毁视图，并不会销毁fragment实例。</p><p><code>FragmentStatePagerAdapter</code>：会销毁不再需要的fragment，当当前事务提交以后，会彻底的将<code>fragment</code>从当前Activity的<code>FragmentManager</code>中移除，<code>state</code>标明，销毁时，会将其<code>onSaveInstanceState(Bundle outState)</code>中的<code>bundle</code>信息保存下来，当用户切换回来，可以通过该<code>bundle</code>恢复生成新的<code>fragment</code>，也就是说，你可以在<code>onSaveInstanceState(Bundle outState)</code>方法中保存一些数据，在<code>onCreate</code>中进行恢复创建。</p><p>如上所说，使用<code>FragmentStatePagerAdapter</code>当然更省内存，但是销毁新建也是需要时间的。一般情况下，如果你是制作主页面，就3、4个Tab，那么可以选择使用<code>FragmentPagerAdapter</code>，如果你是用于<code>ViewPager</code>展示数量特别多的条目时，那么建议使用<code>FragmentStatePagerAdapter</code>。</p><p>参考链接：</p><p><a href="http://blog.csdn.net/lmj623565791/article/details/42628537" target="_blank" rel="noopener">Android Fragment 你应该知道的一切</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
